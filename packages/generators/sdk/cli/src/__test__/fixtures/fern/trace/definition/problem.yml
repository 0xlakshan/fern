imports:
  commons: commons.yml

types:
  ProblemInfo:
    properties:
      problemId: commons.ProblemId
      problemDescription: ProblemDescription
      problemName: string
      problemVersion: integer
      files: map<commons.Language, ProblemFiles>
      inputParams: list<VariableTypeAndName>
      outputType: commons.VariableType
      testcases: list<commons.TestCaseWithExpectedResult>
      methodName: string
      supportsCustomTestCases: boolean
  ProblemsMap:
    properties:
      problemsById: map<commons.ProblemId, ProblemInfo>
  ProblemDescription:
    properties:
      boards: list<ProblemDescriptionBoard>
  ProblemDescriptionBoard:
    union:
      html: string
      variable: commons.VariableValue
      testCaseId: string
    examples:
      - value:
          type: html
          value: "<div>hello world</div>"
      - value:
          type: testCaseId
          value: test-case-id-1
  ProblemFiles:
    properties:
      solutionFile: commons.FileInfo
      readOnlyFiles: list<commons.FileInfo>
    examples:
      - value:
          solutionFile:
            filename: "hello.txt"
            contents: "I'm some file content"
          readOnlyFiles: []
  VariableTypeAndName:
    properties:
      variableType: commons.VariableType
      name: string

  CreateProblemRequest:
    properties:
      problemName: string
      problemDescription: ProblemDescription
      files: map<commons.Language, ProblemFiles>
      inputParams: list<VariableTypeAndName>
      outputType: commons.VariableType
      testcases: list<commons.TestCaseWithExpectedResult>
      methodName: string
  CreateProblemResponse:
    union:
      success: commons.ProblemId
      error: CreateProblemError

  UpdateProblemResponse:
    properties:
      problemVersion: integer

  CreateProblemError:
    discriminant:
      value: _type
      name: errorType
    union:
      generic: GenericCreateProblemError
  GenericCreateProblemError:
    properties:
      message: string
      type: string
      stacktrace: string

  GetDefaultStarterFilesResponse:
    properties:
      files: map<commons.Language, ProblemFiles>

service:
  base-path: /problem-crud
  auth: false
  endpoints:
    createProblem:
      docs: Creates a problem
      method: POST
      path: /create
      request: CreateProblemRequest
      response: CreateProblemResponse

    updateProblem:
      docs: Updates a problem
      method: POST
      path: /update/{problemId}
      path-parameters:
        problemId: commons.ProblemId
      request: CreateProblemRequest
      response: UpdateProblemResponse

    deleteProblem:
      docs: Soft deletes a problem
      method: DELETE
      path: /delete/{problemId}
      path-parameters:
        problemId: commons.ProblemId

    getDefaultStarterFiles:
      docs: Returns default starter files for problem
      method: POST
      path: /default-starter-files
      request:
        name: GetDefaultStarterFilesRequest
        body:
          properties:
            inputParams: list<VariableTypeAndName>
            outputType: commons.VariableType
            methodName: string
      response: GetDefaultStarterFilesResponse
