// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`runGenerator fiddle 1`] = `
Array [
  Object {
    "contents": "node_modules
.DS_Store
*.d.ts
dist/

# yarn berry
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/sdks
!.yarn/versions",
    "name": ".gitignore",
    "type": "file",
  },
  Object {
    "contents": "tabWidth: 4
printWidth: 120
",
    "name": ".prettierrc.yml",
    "type": "file",
  },
  Object {
    "contents": "const { build } = require(\\"esbuild\\");

void main();

async function main() {
    await bundle({
        platform: \\"node\\",
        target: \\"node14\\",
        format: \\"cjs\\",
        outdir: \\"node\\",
    });
    await bundle({
        platform: \\"browser\\",
        format: \\"esm\\",
        outdir: \\"browser/esm\\",
    });
    await bundle({
        platform: \\"browser\\",
        format: \\"cjs\\",
        outdir: \\"browser/cjs\\",
    });
}

async function bundle({ platform, target, format, outdir }) {
    await runEsbuild({
        platform,
        target,
        format,
        entryPoint: \\"./src/index.ts\\",
        outfile: \`./dist/\${outdir}/index.js\`,
    });
    await runEsbuild({
        platform,
        target,
        format,
        entryPoint: \\"./src/core/index.ts\\",
        outfile: \`./dist/\${outdir}/core.js\`,
    });
    await runEsbuild({
        platform,
        target,
        format,
        entryPoint: \\"./src/serialization/index.ts\\",
        outfile: \`./dist/\${outdir}/serialization.js\`,
    });
}

async function runEsbuild({ platform, target, format, entryPoint, outfile }) {
    await build({
        platform,
        target,
        format,
        entryPoints: [entryPoint],
        outfile,
        bundle: true,
        alias: {
            // matches up with tsconfig paths
            \\"@fern-fern/fiddle-sdk\\": \\"./src\\",
        }
    }).catch(() => process.exit(1));
}
",
    "name": "build.js",
    "type": "file",
  },
  Object {
    "contents": "{
    \\"name\\": \\"@fern-fern/fiddle-sdk\\",
    \\"version\\": \\"\\",
    \\"files\\": [
        \\"dist\\",
        \\"types\\",
        \\"core.d.ts\\",
        \\"serialization.d.ts\\"
    ],
    \\"exports\\": {
        \\".\\": {
            \\"node\\": \\"./dist/node/index.js\\",
            \\"import\\": \\"./dist/browser/esm/index.js\\",
            \\"require\\": \\"./dist/browser/cjs/index.js\\",
            \\"default\\": \\"./dist/browser/cjs/index.js\\",
            \\"types\\": \\"./types/index.d.ts\\"
        },
        \\"./core\\": {
            \\"node\\": \\"./dist/node/core.js\\",
            \\"import\\": \\"./dist/browser/esm/core.js\\",
            \\"require\\": \\"./dist/browser/cjs/core.js\\",
            \\"default\\": \\"./dist/browser/cjs/core.js\\",
            \\"types\\": \\"./types/core/index.d.ts\\"
        },
        \\"./serialization\\": {
            \\"node\\": \\"./dist/node/serialization.js\\",
            \\"import\\": \\"./dist/browser/esm/serialization.js\\",
            \\"require\\": \\"./dist/browser/cjs/serialization.js\\",
            \\"default\\": \\"./dist/browser/cjs/serialization.js\\",
            \\"types\\": \\"./types/serialization/index.d.ts\\"
        }
    },
    \\"types\\": \\"./types/index.d.ts\\",
    \\"scripts\\": {
        \\"format\\": \\"prettier --write 'src/**/*.ts'\\",
        \\"compile\\": \\"tsc && tsc-alias\\",
        \\"bundle\\": \\"node build.js\\",
        \\"build\\": \\"yarn compile && yarn bundle\\"
    },
    \\"dependencies\\": {
        \\"@types/url-join\\": \\"4.0.1\\",
        \\"axios\\": \\"^0.27.2\\",
        \\"url-join\\": \\"4.0.1\\"
    },
    \\"devDependencies\\": {
        \\"@types/node\\": \\"17.0.33\\",
        \\"esbuild\\": \\"0.16.15\\",
        \\"prettier\\": \\"2.7.1\\",
        \\"tsc-alias\\": \\"1.7.1\\",
        \\"typescript\\": \\"4.6.4\\"
    }
}
",
    "name": "package.json",
    "type": "file",
  },
  Object {
    "contents": Array [
      Object {
        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { Client as HealthClient } from \\"./api/resources/health/client/Client\\";
import { Client as RemoteGenClient } from \\"./api/resources/remoteGen/client/Client\\";

export declare namespace FiddleClient {
    interface Options {
        environment: string;
    }
}

export class FiddleClient {
    constructor(private readonly options: FiddleClient.Options) {}

    private _health: HealthClient | undefined;

    public get health(): HealthClient {
        return (this._health ??= new HealthClient(this.options));
    }

    private _remoteGen: RemoteGenClient | undefined;

    public get remoteGen(): RemoteGenClient {
        return (this._remoteGen ??= new RemoteGenClient(this.options));
    }
}
",
        "name": "Client.ts",
        "type": "file",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "export * from \\"./resources\\";
",
            "name": "index.ts",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": Array [
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";
import urlJoin from \\"url-join\\";

export declare namespace Client {
    interface Options {
        environment: string;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {}

    public async status(): Promise<core.APIResponse<void, Fiddle.health.status.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, \\"/api/health\\"),
            method: \\"GET\\",
        });
        if (_response.ok) {
            return {
                ok: true,
                body: undefined,
            };
        }

        return {
            ok: false,
            error: Fiddle.health.status.Error._unknown(_response.error),
        };
    }
}
",
                        "name": "Client.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export * as status from \\"./status\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export type Error = Fiddle.health.status.Error._Unknown;

export declare namespace Error {
    interface _Unknown extends _Utils {
        error: void;
        content: core.Fetcher.Error;
    }

    interface _Utils {
        _visit: <_Result>(visitor: Fiddle.health.status.Error._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        _other: (value: core.Fetcher.Error) => _Result;
    }
}

export const Error = {
    _unknown: (fetcherError: core.Fetcher.Error): Fiddle.health.status.Error._Unknown => {
        return {
            error: undefined,
            content: fetcherError,
            _visit: function <_Result>(
                this: Fiddle.health.status.Error._Unknown,
                visitor: Fiddle.health.status.Error._Visitor<_Result>
            ) {
                return Fiddle.health.status.Error._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: Fiddle.health.status.Error,
        visitor: Fiddle.health.status.Error._Visitor<_Result>
    ): _Result => {
        switch (value.error) {
            default:
                return visitor._other(value as any);
        }
    },
} as const;
",
                        "name": "status.ts",
                        "type": "file",
                      },
                    ],
                    "name": "client",
                    "type": "directory",
                  },
                  Object {
                    "contents": "export * from \\"./client\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "health",
                "type": "directory",
              },
              Object {
                "contents": "export * as remoteGen from \\"./remoteGen\\";
export * from \\"./remoteGen/types\\";
export * as health from \\"./health\\";
export * from \\"./remoteGen/client/requests\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";
import urlJoin from \\"url-join\\";
import * as serializers from \\"../../../../serialization\\";

export declare namespace Client {
    interface Options {
        environment: string;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {}

    public async createJob(
        request: Fiddle.CreateJobRequest
    ): Promise<core.APIResponse<Fiddle.CreateJobResponse, Fiddle.remoteGen.createJob.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, \\"/api/remote-gen/create-job\\"),
            method: \\"POST\\",
            body: await serializers.CreateJobRequest.jsonOrThrow(request),
        });
        if (_response.ok) {
            return {
                ok: true,
                body: await serializers.CreateJobResponse.parseOrThrow(
                    _response.body as serializers.CreateJobResponse.Raw,
                    { allowUnknownKeys: true }
                ),
            };
        }

        if (_response.error.reason === \\"status-code\\") {
            switch ((_response.error.body as serializers.remoteGen.createJob.Error.Raw)?.error) {
                case \\"IllegalApiNameError\\":
                case \\"GeneratorsDoNotExistError\\":
                case \\"CannotPublishToNpmScope\\":
                case \\"CannotPublishToMavenGroup\\":
                case \\"InsufficientPermissions\\":
                    return {
                        ok: false,
                        error: await serializers.remoteGen.createJob.Error.parseOrThrow(
                            _response.error.body as serializers.remoteGen.createJob.Error.Raw,
                            { allowUnknownKeys: true }
                        ),
                    };
            }
        }

        return {
            ok: false,
            error: Fiddle.remoteGen.createJob.Error._unknown(_response.error),
        };
    }

    public async createJobV2(
        request: Fiddle.CreateJobRequestV2
    ): Promise<core.APIResponse<Fiddle.CreateJobResponse, Fiddle.remoteGen.createJobV2.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, \\"/api/remote-gen/create-job-v2\\"),
            method: \\"POST\\",
            body: await serializers.CreateJobRequestV2.jsonOrThrow(request),
        });
        if (_response.ok) {
            return {
                ok: true,
                body: await serializers.CreateJobResponse.parseOrThrow(
                    _response.body as serializers.CreateJobResponse.Raw,
                    { allowUnknownKeys: true }
                ),
            };
        }

        if (_response.error.reason === \\"status-code\\") {
            switch ((_response.error.body as serializers.remoteGen.createJobV2.Error.Raw)?.error) {
                case \\"IllegalApiNameError\\":
                case \\"GeneratorsDoNotExistError\\":
                case \\"CannotPublishToNpmScope\\":
                case \\"CannotPublishToMavenGroup\\":
                case \\"InsufficientPermissions\\":
                    return {
                        ok: false,
                        error: await serializers.remoteGen.createJobV2.Error.parseOrThrow(
                            _response.error.body as serializers.remoteGen.createJobV2.Error.Raw,
                            { allowUnknownKeys: true }
                        ),
                    };
            }
        }

        return {
            ok: false,
            error: Fiddle.remoteGen.createJobV2.Error._unknown(_response.error),
        };
    }

    public async getJobStatus(
        jobId: Fiddle.RemoteGenJobId
    ): Promise<
        core.APIResponse<Record<Fiddle.RemoteGenTaskId, Fiddle.Task | undefined>, Fiddle.remoteGen.getJobStatus.Error>
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment,
                \`/api/remote-gen/jobs/\${await serializers.RemoteGenJobId.jsonOrThrow(jobId)}/status\`
            ),
            method: \\"POST\\",
        });
        if (_response.ok) {
            return {
                ok: true,
                body: await serializers.remoteGen.getJobStatus.Response.parseOrThrow(
                    _response.body as serializers.remoteGen.getJobStatus.Response.Raw,
                    { allowUnknownKeys: true }
                ),
            };
        }

        return {
            ok: false,
            error: Fiddle.remoteGen.getJobStatus.Error._unknown(_response.error),
        };
    }
}
",
                        "name": "Client.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export type Error =
    | Fiddle.remoteGen.createJob.Error.IllegalApiNameError
    | Fiddle.remoteGen.createJob.Error.GeneratorsDoNotExistError
    | Fiddle.remoteGen.createJob.Error.CannotPublishToNpmScope
    | Fiddle.remoteGen.createJob.Error.CannotPublishToMavenGroup
    | Fiddle.remoteGen.createJob.Error.InsufficientPermissions
    | Fiddle.remoteGen.createJob.Error._Unknown;

export declare namespace Error {
    interface IllegalApiNameError extends _Utils {
        error: \\"IllegalApiNameError\\";
    }

    interface GeneratorsDoNotExistError extends _Utils {
        error: \\"GeneratorsDoNotExistError\\";
        content: Fiddle.GeneratorsDoNotExistErrorBodyType;
    }

    interface CannotPublishToNpmScope extends _Utils {
        error: \\"CannotPublishToNpmScope\\";
        content: Fiddle.CannotPublishToNpmScopeDetails;
    }

    interface CannotPublishToMavenGroup extends _Utils {
        error: \\"CannotPublishToMavenGroup\\";
        content: Fiddle.CannotPublishToMavenGroupDetails;
    }

    interface InsufficientPermissions extends _Utils {
        error: \\"InsufficientPermissions\\";
        content: Fiddle.InsufficientPermissionsDetails;
    }

    interface _Unknown extends _Utils {
        error: void;
        content: core.Fetcher.Error;
    }

    interface _Utils {
        _visit: <_Result>(visitor: Fiddle.remoteGen.createJob.Error._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        illegalApiNameError: () => _Result;
        generatorsDoNotExistError: (value: Fiddle.GeneratorsDoNotExistErrorBodyType) => _Result;
        cannotPublishToNpmScope: (value: Fiddle.CannotPublishToNpmScopeDetails) => _Result;
        cannotPublishToMavenGroup: (value: Fiddle.CannotPublishToMavenGroupDetails) => _Result;
        insufficientPermissions: (value: Fiddle.InsufficientPermissionsDetails) => _Result;
        _other: (value: core.Fetcher.Error) => _Result;
    }
}

export const Error = {
    illegalApiNameError: (): Fiddle.remoteGen.createJob.Error.IllegalApiNameError => {
        return {
            error: \\"IllegalApiNameError\\",
            _visit: function <_Result>(
                this: Fiddle.remoteGen.createJob.Error.IllegalApiNameError,
                visitor: Fiddle.remoteGen.createJob.Error._Visitor<_Result>
            ) {
                return Fiddle.remoteGen.createJob.Error._visit(this, visitor);
            },
        };
    },

    generatorsDoNotExistError: (
        value: Fiddle.GeneratorsDoNotExistErrorBodyType
    ): Fiddle.remoteGen.createJob.Error.GeneratorsDoNotExistError => {
        return {
            content: value,
            error: \\"GeneratorsDoNotExistError\\",
            _visit: function <_Result>(
                this: Fiddle.remoteGen.createJob.Error.GeneratorsDoNotExistError,
                visitor: Fiddle.remoteGen.createJob.Error._Visitor<_Result>
            ) {
                return Fiddle.remoteGen.createJob.Error._visit(this, visitor);
            },
        };
    },

    cannotPublishToNpmScope: (
        value: Fiddle.CannotPublishToNpmScopeDetails
    ): Fiddle.remoteGen.createJob.Error.CannotPublishToNpmScope => {
        return {
            content: value,
            error: \\"CannotPublishToNpmScope\\",
            _visit: function <_Result>(
                this: Fiddle.remoteGen.createJob.Error.CannotPublishToNpmScope,
                visitor: Fiddle.remoteGen.createJob.Error._Visitor<_Result>
            ) {
                return Fiddle.remoteGen.createJob.Error._visit(this, visitor);
            },
        };
    },

    cannotPublishToMavenGroup: (
        value: Fiddle.CannotPublishToMavenGroupDetails
    ): Fiddle.remoteGen.createJob.Error.CannotPublishToMavenGroup => {
        return {
            content: value,
            error: \\"CannotPublishToMavenGroup\\",
            _visit: function <_Result>(
                this: Fiddle.remoteGen.createJob.Error.CannotPublishToMavenGroup,
                visitor: Fiddle.remoteGen.createJob.Error._Visitor<_Result>
            ) {
                return Fiddle.remoteGen.createJob.Error._visit(this, visitor);
            },
        };
    },

    insufficientPermissions: (
        value: Fiddle.InsufficientPermissionsDetails
    ): Fiddle.remoteGen.createJob.Error.InsufficientPermissions => {
        return {
            content: value,
            error: \\"InsufficientPermissions\\",
            _visit: function <_Result>(
                this: Fiddle.remoteGen.createJob.Error.InsufficientPermissions,
                visitor: Fiddle.remoteGen.createJob.Error._Visitor<_Result>
            ) {
                return Fiddle.remoteGen.createJob.Error._visit(this, visitor);
            },
        };
    },

    _unknown: (fetcherError: core.Fetcher.Error): Fiddle.remoteGen.createJob.Error._Unknown => {
        return {
            error: undefined,
            content: fetcherError,
            _visit: function <_Result>(
                this: Fiddle.remoteGen.createJob.Error._Unknown,
                visitor: Fiddle.remoteGen.createJob.Error._Visitor<_Result>
            ) {
                return Fiddle.remoteGen.createJob.Error._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: Fiddle.remoteGen.createJob.Error,
        visitor: Fiddle.remoteGen.createJob.Error._Visitor<_Result>
    ): _Result => {
        switch (value.error) {
            case \\"IllegalApiNameError\\":
                return visitor.illegalApiNameError();
            case \\"GeneratorsDoNotExistError\\":
                return visitor.generatorsDoNotExistError(value.content);
            case \\"CannotPublishToNpmScope\\":
                return visitor.cannotPublishToNpmScope(value.content);
            case \\"CannotPublishToMavenGroup\\":
                return visitor.cannotPublishToMavenGroup(value.content);
            case \\"InsufficientPermissions\\":
                return visitor.insufficientPermissions(value.content);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
",
                        "name": "createJob.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export type Error =
    | Fiddle.remoteGen.createJobV2.Error.IllegalApiNameError
    | Fiddle.remoteGen.createJobV2.Error.GeneratorsDoNotExistError
    | Fiddle.remoteGen.createJobV2.Error.CannotPublishToNpmScope
    | Fiddle.remoteGen.createJobV2.Error.CannotPublishToMavenGroup
    | Fiddle.remoteGen.createJobV2.Error.InsufficientPermissions
    | Fiddle.remoteGen.createJobV2.Error._Unknown;

export declare namespace Error {
    interface IllegalApiNameError extends _Utils {
        error: \\"IllegalApiNameError\\";
    }

    interface GeneratorsDoNotExistError extends _Utils {
        error: \\"GeneratorsDoNotExistError\\";
        content: Fiddle.GeneratorsDoNotExistErrorBodyType;
    }

    interface CannotPublishToNpmScope extends _Utils {
        error: \\"CannotPublishToNpmScope\\";
        content: Fiddle.CannotPublishToNpmScopeDetails;
    }

    interface CannotPublishToMavenGroup extends _Utils {
        error: \\"CannotPublishToMavenGroup\\";
        content: Fiddle.CannotPublishToMavenGroupDetails;
    }

    interface InsufficientPermissions extends _Utils {
        error: \\"InsufficientPermissions\\";
        content: Fiddle.InsufficientPermissionsDetails;
    }

    interface _Unknown extends _Utils {
        error: void;
        content: core.Fetcher.Error;
    }

    interface _Utils {
        _visit: <_Result>(visitor: Fiddle.remoteGen.createJobV2.Error._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        illegalApiNameError: () => _Result;
        generatorsDoNotExistError: (value: Fiddle.GeneratorsDoNotExistErrorBodyType) => _Result;
        cannotPublishToNpmScope: (value: Fiddle.CannotPublishToNpmScopeDetails) => _Result;
        cannotPublishToMavenGroup: (value: Fiddle.CannotPublishToMavenGroupDetails) => _Result;
        insufficientPermissions: (value: Fiddle.InsufficientPermissionsDetails) => _Result;
        _other: (value: core.Fetcher.Error) => _Result;
    }
}

export const Error = {
    illegalApiNameError: (): Fiddle.remoteGen.createJobV2.Error.IllegalApiNameError => {
        return {
            error: \\"IllegalApiNameError\\",
            _visit: function <_Result>(
                this: Fiddle.remoteGen.createJobV2.Error.IllegalApiNameError,
                visitor: Fiddle.remoteGen.createJobV2.Error._Visitor<_Result>
            ) {
                return Fiddle.remoteGen.createJobV2.Error._visit(this, visitor);
            },
        };
    },

    generatorsDoNotExistError: (
        value: Fiddle.GeneratorsDoNotExistErrorBodyType
    ): Fiddle.remoteGen.createJobV2.Error.GeneratorsDoNotExistError => {
        return {
            content: value,
            error: \\"GeneratorsDoNotExistError\\",
            _visit: function <_Result>(
                this: Fiddle.remoteGen.createJobV2.Error.GeneratorsDoNotExistError,
                visitor: Fiddle.remoteGen.createJobV2.Error._Visitor<_Result>
            ) {
                return Fiddle.remoteGen.createJobV2.Error._visit(this, visitor);
            },
        };
    },

    cannotPublishToNpmScope: (
        value: Fiddle.CannotPublishToNpmScopeDetails
    ): Fiddle.remoteGen.createJobV2.Error.CannotPublishToNpmScope => {
        return {
            content: value,
            error: \\"CannotPublishToNpmScope\\",
            _visit: function <_Result>(
                this: Fiddle.remoteGen.createJobV2.Error.CannotPublishToNpmScope,
                visitor: Fiddle.remoteGen.createJobV2.Error._Visitor<_Result>
            ) {
                return Fiddle.remoteGen.createJobV2.Error._visit(this, visitor);
            },
        };
    },

    cannotPublishToMavenGroup: (
        value: Fiddle.CannotPublishToMavenGroupDetails
    ): Fiddle.remoteGen.createJobV2.Error.CannotPublishToMavenGroup => {
        return {
            content: value,
            error: \\"CannotPublishToMavenGroup\\",
            _visit: function <_Result>(
                this: Fiddle.remoteGen.createJobV2.Error.CannotPublishToMavenGroup,
                visitor: Fiddle.remoteGen.createJobV2.Error._Visitor<_Result>
            ) {
                return Fiddle.remoteGen.createJobV2.Error._visit(this, visitor);
            },
        };
    },

    insufficientPermissions: (
        value: Fiddle.InsufficientPermissionsDetails
    ): Fiddle.remoteGen.createJobV2.Error.InsufficientPermissions => {
        return {
            content: value,
            error: \\"InsufficientPermissions\\",
            _visit: function <_Result>(
                this: Fiddle.remoteGen.createJobV2.Error.InsufficientPermissions,
                visitor: Fiddle.remoteGen.createJobV2.Error._Visitor<_Result>
            ) {
                return Fiddle.remoteGen.createJobV2.Error._visit(this, visitor);
            },
        };
    },

    _unknown: (fetcherError: core.Fetcher.Error): Fiddle.remoteGen.createJobV2.Error._Unknown => {
        return {
            error: undefined,
            content: fetcherError,
            _visit: function <_Result>(
                this: Fiddle.remoteGen.createJobV2.Error._Unknown,
                visitor: Fiddle.remoteGen.createJobV2.Error._Visitor<_Result>
            ) {
                return Fiddle.remoteGen.createJobV2.Error._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: Fiddle.remoteGen.createJobV2.Error,
        visitor: Fiddle.remoteGen.createJobV2.Error._Visitor<_Result>
    ): _Result => {
        switch (value.error) {
            case \\"IllegalApiNameError\\":
                return visitor.illegalApiNameError();
            case \\"GeneratorsDoNotExistError\\":
                return visitor.generatorsDoNotExistError(value.content);
            case \\"CannotPublishToNpmScope\\":
                return visitor.cannotPublishToNpmScope(value.content);
            case \\"CannotPublishToMavenGroup\\":
                return visitor.cannotPublishToMavenGroup(value.content);
            case \\"InsufficientPermissions\\":
                return visitor.insufficientPermissions(value.content);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
",
                        "name": "createJobV2.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export type Error = Fiddle.remoteGen.getJobStatus.Error._Unknown;

export declare namespace Error {
    interface _Unknown extends _Utils {
        error: void;
        content: core.Fetcher.Error;
    }

    interface _Utils {
        _visit: <_Result>(visitor: Fiddle.remoteGen.getJobStatus.Error._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        _other: (value: core.Fetcher.Error) => _Result;
    }
}

export const Error = {
    _unknown: (fetcherError: core.Fetcher.Error): Fiddle.remoteGen.getJobStatus.Error._Unknown => {
        return {
            error: undefined,
            content: fetcherError,
            _visit: function <_Result>(
                this: Fiddle.remoteGen.getJobStatus.Error._Unknown,
                visitor: Fiddle.remoteGen.getJobStatus.Error._Visitor<_Result>
            ) {
                return Fiddle.remoteGen.getJobStatus.Error._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: Fiddle.remoteGen.getJobStatus.Error,
        visitor: Fiddle.remoteGen.getJobStatus.Error._Visitor<_Result>
    ): _Result => {
        switch (value.error) {
            default:
                return visitor._other(value as any);
        }
    },
} as const;
",
                        "name": "getJobStatus.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export * from \\"./requests\\";
export * as createJob from \\"./createJob\\";
export * as createJobV2 from \\"./createJobV2\\";
export * as getJobStatus from \\"./getJobStatus\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": Array [
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";

export interface CreateJobRequest {
    apiName: string;
    organizationName: string;
    version?: string;
    generators: Fiddle.GeneratorConfig[];
}
",
                            "name": "CreateJobRequest.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";

export interface CreateJobRequestV2 {
    apiName: string;
    organizationName: string;
    version?: string;
    generators: Fiddle.GeneratorConfigV2[];
    uploadToS3?: boolean;
}
",
                            "name": "CreateJobRequestV2.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "export { CreateJobRequest } from \\"./CreateJobRequest\\";
export { CreateJobRequestV2 } from \\"./CreateJobRequestV2\\";
",
                            "name": "index.ts",
                            "type": "file",
                          },
                        ],
                        "name": "requests",
                        "type": "directory",
                      },
                    ],
                    "name": "client",
                    "type": "directory",
                  },
                  Object {
                    "contents": "export * from \\"./types\\";
export * from \\"./client\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface CannotPublishToMavenGroupDetails {
    generatorId: string;
    invalidGroup: string;
    validGroup: string;
}
",
                        "name": "CannotPublishToMavenGroupDetails.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface CannotPublishToNpmScopeDetails {
    generatorId: string;
    invalidScope: string;
    validScope: string;
}
",
                        "name": "CannotPublishToNpmScopeDetails.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";

export interface CreateJobResponse {
    jobId: Fiddle.RemoteGenJobId;
    /** The order of this list corresponds to the order of the generators supplied in the request. */
    taskIds: Fiddle.RemoteGenTaskId[];
}
",
                        "name": "CreateJobResponse.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface FailedTaskStatus {
    message: string;
    /** Pre-signed URL that points to a zipfile containing generated code. */
    s3PreSignedReadUrl?: string;
}
",
                        "name": "FailedTaskStatus.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface FinishedTaskStatus {
    /** This field is deprecated. */
    hasFilesToDownload: boolean;
    /** Deprecated (use v2). Pre-signed URL that points to a zipfile containing generated code. */
    s3PreSignedReadUrl: string;
    /** Pre-signed URL that points to a zipfile containing generated code. */
    s3PreSignedReadUrlV2?: string;
}
",
                        "name": "FinishedTaskStatus.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";

export interface GeneratorConfig {
    id: string;
    version: string;
    customConfig?: unknown;
    willDownloadFiles: boolean;
    /** Npm and Maven outputs default to fern registries. */
    outputs: Fiddle.GeneratorOutputs;
}
",
                        "name": "GeneratorConfig.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";

export interface GeneratorConfigV2 {
    id: string;
    version: string;
    customConfig?: unknown;
    outputMode: Fiddle.OutputMode;
}
",
                        "name": "GeneratorConfigV2.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface GeneratorIdAndVersion {
    id: string;
    version: string;
}
",
                        "name": "GeneratorIdAndVersion.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";

export interface GeneratorOutputs {
    npm?: Fiddle.NpmOutput;
    maven?: Fiddle.MavenOutput;
}
",
                        "name": "GeneratorOutputs.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";

export interface GeneratorsDoNotExistErrorBodyType {
    nonExistentGenerators: Fiddle.GeneratorIdAndVersion[];
}
",
                        "name": "GeneratorsDoNotExistErrorBodyType.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";

export interface GithubOutputMode {
    owner: string;
    repo: string;
    publishInfo?: Fiddle.GithubPublishInfo;
}
",
                        "name": "GithubOutputMode.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";

export type GithubPublishInfo =
    | Fiddle.GithubPublishInfo.Npm
    | Fiddle.GithubPublishInfo.Maven
    | Fiddle.GithubPublishInfo.Postman
    | Fiddle.GithubPublishInfo._Unknown;

export declare namespace GithubPublishInfo {
    interface Npm extends Fiddle.NpmOutputWithOptionalToken, _Utils {
        type: \\"npm\\";
    }

    interface Maven extends Fiddle.MavenOutputWithOptionalCreds, _Utils {
        type: \\"maven\\";
    }

    interface Postman extends Fiddle.PostmanOutput, _Utils {
        type: \\"postman\\";
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: Fiddle.GithubPublishInfo._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        npm: (value: Fiddle.NpmOutputWithOptionalToken) => _Result;
        maven: (value: Fiddle.MavenOutputWithOptionalCreds) => _Result;
        postman: (value: Fiddle.PostmanOutput) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const GithubPublishInfo = {
    npm: (value: Fiddle.NpmOutputWithOptionalToken): Fiddle.GithubPublishInfo.Npm => {
        return {
            ...value,
            type: \\"npm\\",
            _visit: function <_Result>(
                this: Fiddle.GithubPublishInfo.Npm,
                visitor: Fiddle.GithubPublishInfo._Visitor<_Result>
            ) {
                return Fiddle.GithubPublishInfo._visit(this, visitor);
            },
        };
    },

    maven: (value: Fiddle.MavenOutputWithOptionalCreds): Fiddle.GithubPublishInfo.Maven => {
        return {
            ...value,
            type: \\"maven\\",
            _visit: function <_Result>(
                this: Fiddle.GithubPublishInfo.Maven,
                visitor: Fiddle.GithubPublishInfo._Visitor<_Result>
            ) {
                return Fiddle.GithubPublishInfo._visit(this, visitor);
            },
        };
    },

    postman: (value: Fiddle.PostmanOutput): Fiddle.GithubPublishInfo.Postman => {
        return {
            ...value,
            type: \\"postman\\",
            _visit: function <_Result>(
                this: Fiddle.GithubPublishInfo.Postman,
                visitor: Fiddle.GithubPublishInfo._Visitor<_Result>
            ) {
                return Fiddle.GithubPublishInfo._visit(this, visitor);
            },
        };
    },

    _unknown: (value: { type: string }): Fiddle.GithubPublishInfo._Unknown => {
        return {
            ...(value as any),
            _visit: function <_Result>(
                this: Fiddle.GithubPublishInfo._Unknown,
                visitor: Fiddle.GithubPublishInfo._Visitor<_Result>
            ) {
                return Fiddle.GithubPublishInfo._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: Fiddle.GithubPublishInfo,
        visitor: Fiddle.GithubPublishInfo._Visitor<_Result>
    ): _Result => {
        switch (value.type) {
            case \\"npm\\":
                return visitor.npm(value);
            case \\"maven\\":
                return visitor.maven(value);
            case \\"postman\\":
                return visitor.postman(value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
",
                        "name": "GithubPublishInfo.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface InsufficientPermissionsDetails {
    dummy?: string;
}
",
                        "name": "InsufficientPermissionsDetails.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export type LogLevel = \\"DEBUG\\" | \\"INFO\\" | \\"WARN\\" | \\"ERROR\\";

export const LogLevel = {
    Debug: \\"DEBUG\\",
    Info: \\"INFO\\",
    Warn: \\"WARN\\",
    Error: \\"ERROR\\",
} as const;
",
                        "name": "LogLevel.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface MavenCoordinate {
    group: string;
    artifact: string;
    version: string;
}
",
                        "name": "MavenCoordinate.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface MavenOutput {
    registryUrl: string;
    username: string;
    password: string;
    coordinate: string;
}
",
                        "name": "MavenOutput.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";

export interface MavenOutputWithOptionalCreds {
    registryUrl: string;
    coordinate: string;
    credentials?: Fiddle.UsernamePassword;
}
",
                        "name": "MavenOutputWithOptionalCreds.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface NpmCoordinate {
    name: string;
    version: string;
}
",
                        "name": "NpmCoordinate.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface NpmOutput {
    registryUrl: string;
    packageName: string;
    token: string;
}
",
                        "name": "NpmOutput.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface NpmOutputWithOptionalToken {
    registryUrl: string;
    packageName: string;
    token?: string;
}
",
                        "name": "NpmOutputWithOptionalToken.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";

export type OutputMode =
    | Fiddle.OutputMode.Publish
    | Fiddle.OutputMode.PublishV2
    | Fiddle.OutputMode.DownloadFiles
    | Fiddle.OutputMode.Github
    | Fiddle.OutputMode._Unknown;

export declare namespace OutputMode {
    interface Publish extends Fiddle.PublishOutputMode, _Utils {
        type: \\"publish\\";
    }

    interface PublishV2 extends _Utils {
        type: \\"publishV2\\";
        publishV2: Fiddle.PublishOutputModeV2;
    }

    interface DownloadFiles extends _Utils {
        type: \\"downloadFiles\\";
    }

    interface Github extends Fiddle.GithubOutputMode, _Utils {
        type: \\"github\\";
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: Fiddle.OutputMode._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        publish: (value: Fiddle.PublishOutputMode) => _Result;
        publishV2: (value: Fiddle.PublishOutputModeV2) => _Result;
        downloadFiles: () => _Result;
        github: (value: Fiddle.GithubOutputMode) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const OutputMode = {
    publish: (value: Fiddle.PublishOutputMode): Fiddle.OutputMode.Publish => {
        return {
            ...value,
            type: \\"publish\\",
            _visit: function <_Result>(this: Fiddle.OutputMode.Publish, visitor: Fiddle.OutputMode._Visitor<_Result>) {
                return Fiddle.OutputMode._visit(this, visitor);
            },
        };
    },

    publishV2: (value: Fiddle.PublishOutputModeV2): Fiddle.OutputMode.PublishV2 => {
        return {
            publishV2: value,
            type: \\"publishV2\\",
            _visit: function <_Result>(
                this: Fiddle.OutputMode.PublishV2,
                visitor: Fiddle.OutputMode._Visitor<_Result>
            ) {
                return Fiddle.OutputMode._visit(this, visitor);
            },
        };
    },

    downloadFiles: (): Fiddle.OutputMode.DownloadFiles => {
        return {
            type: \\"downloadFiles\\",
            _visit: function <_Result>(
                this: Fiddle.OutputMode.DownloadFiles,
                visitor: Fiddle.OutputMode._Visitor<_Result>
            ) {
                return Fiddle.OutputMode._visit(this, visitor);
            },
        };
    },

    github: (value: Fiddle.GithubOutputMode): Fiddle.OutputMode.Github => {
        return {
            ...value,
            type: \\"github\\",
            _visit: function <_Result>(this: Fiddle.OutputMode.Github, visitor: Fiddle.OutputMode._Visitor<_Result>) {
                return Fiddle.OutputMode._visit(this, visitor);
            },
        };
    },

    _unknown: (value: { type: string }): Fiddle.OutputMode._Unknown => {
        return {
            ...(value as any),
            _visit: function <_Result>(this: Fiddle.OutputMode._Unknown, visitor: Fiddle.OutputMode._Visitor<_Result>) {
                return Fiddle.OutputMode._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(value: Fiddle.OutputMode, visitor: Fiddle.OutputMode._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"publish\\":
                return visitor.publish(value);
            case \\"publishV2\\":
                return visitor.publishV2(value.publishV2);
            case \\"downloadFiles\\":
                return visitor.downloadFiles();
            case \\"github\\":
                return visitor.github(value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
",
                        "name": "OutputMode.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";

export interface Package {
    coordinate: Fiddle.PackageCoordinate;
    status: Fiddle.PackagePublishStatus;
}
",
                        "name": "Package.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";

export type PackageCoordinate =
    | Fiddle.PackageCoordinate.Npm
    | Fiddle.PackageCoordinate.Maven
    | Fiddle.PackageCoordinate.Pypi
    | Fiddle.PackageCoordinate._Unknown;

export declare namespace PackageCoordinate {
    interface Npm extends Fiddle.NpmCoordinate, _Utils {
        type: \\"npm\\";
    }

    interface Maven extends Fiddle.MavenCoordinate, _Utils {
        type: \\"maven\\";
    }

    interface Pypi extends Fiddle.PypiCoordinate, _Utils {
        type: \\"pypi\\";
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: Fiddle.PackageCoordinate._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        npm: (value: Fiddle.NpmCoordinate) => _Result;
        maven: (value: Fiddle.MavenCoordinate) => _Result;
        pypi: (value: Fiddle.PypiCoordinate) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const PackageCoordinate = {
    npm: (value: Fiddle.NpmCoordinate): Fiddle.PackageCoordinate.Npm => {
        return {
            ...value,
            type: \\"npm\\",
            _visit: function <_Result>(
                this: Fiddle.PackageCoordinate.Npm,
                visitor: Fiddle.PackageCoordinate._Visitor<_Result>
            ) {
                return Fiddle.PackageCoordinate._visit(this, visitor);
            },
        };
    },

    maven: (value: Fiddle.MavenCoordinate): Fiddle.PackageCoordinate.Maven => {
        return {
            ...value,
            type: \\"maven\\",
            _visit: function <_Result>(
                this: Fiddle.PackageCoordinate.Maven,
                visitor: Fiddle.PackageCoordinate._Visitor<_Result>
            ) {
                return Fiddle.PackageCoordinate._visit(this, visitor);
            },
        };
    },

    pypi: (value: Fiddle.PypiCoordinate): Fiddle.PackageCoordinate.Pypi => {
        return {
            ...value,
            type: \\"pypi\\",
            _visit: function <_Result>(
                this: Fiddle.PackageCoordinate.Pypi,
                visitor: Fiddle.PackageCoordinate._Visitor<_Result>
            ) {
                return Fiddle.PackageCoordinate._visit(this, visitor);
            },
        };
    },

    _unknown: (value: { type: string }): Fiddle.PackageCoordinate._Unknown => {
        return {
            ...(value as any),
            _visit: function <_Result>(
                this: Fiddle.PackageCoordinate._Unknown,
                visitor: Fiddle.PackageCoordinate._Visitor<_Result>
            ) {
                return Fiddle.PackageCoordinate._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: Fiddle.PackageCoordinate,
        visitor: Fiddle.PackageCoordinate._Visitor<_Result>
    ): _Result => {
        switch (value.type) {
            case \\"npm\\":
                return visitor.npm(value);
            case \\"maven\\":
                return visitor.maven(value);
            case \\"pypi\\":
                return visitor.pypi(value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
",
                        "name": "PackageCoordinate.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export type PackagePublishStatus = \\"NOT_STARTED_PUBLISHING\\" | \\"PUBLISHING\\" | \\"PUBLISHED\\" | \\"FAILED_TO_PUBLISH\\";

export const PackagePublishStatus = {
    NotStartedPublishing: \\"NOT_STARTED_PUBLISHING\\",
    Publishing: \\"PUBLISHING\\",
    Published: \\"PUBLISHED\\",
    FailedToPublish: \\"FAILED_TO_PUBLISH\\",
} as const;
",
                        "name": "PackagePublishStatus.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface PostmanOutput {
    apiKey: string;
    workspaceId: string;
}
",
                        "name": "PostmanOutput.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";

export interface PublishOutputMode {
    registryOverrides: Fiddle.RegistryOverrides;
}
",
                        "name": "PublishOutputMode.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";

export type PublishOutputModeV2 =
    | Fiddle.PublishOutputModeV2.NpmOverride
    | Fiddle.PublishOutputModeV2.MavenOverride
    | Fiddle.PublishOutputModeV2.Postman
    | Fiddle.PublishOutputModeV2._Unknown;

export declare namespace PublishOutputModeV2 {
    interface NpmOverride extends _Utils {
        type: \\"npmOverride\\";
        npmOverride?: Fiddle.NpmOutput;
    }

    interface MavenOverride extends _Utils {
        type: \\"mavenOverride\\";
        mavenOverride?: Fiddle.MavenOutput;
    }

    interface Postman extends Fiddle.PostmanOutput, _Utils {
        type: \\"postman\\";
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: Fiddle.PublishOutputModeV2._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        npmOverride: (value: Fiddle.NpmOutput | undefined) => _Result;
        mavenOverride: (value: Fiddle.MavenOutput | undefined) => _Result;
        postman: (value: Fiddle.PostmanOutput) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const PublishOutputModeV2 = {
    npmOverride: (value?: Fiddle.NpmOutput): Fiddle.PublishOutputModeV2.NpmOverride => {
        return {
            npmOverride: value,
            type: \\"npmOverride\\",
            _visit: function <_Result>(
                this: Fiddle.PublishOutputModeV2.NpmOverride,
                visitor: Fiddle.PublishOutputModeV2._Visitor<_Result>
            ) {
                return Fiddle.PublishOutputModeV2._visit(this, visitor);
            },
        };
    },

    mavenOverride: (value?: Fiddle.MavenOutput): Fiddle.PublishOutputModeV2.MavenOverride => {
        return {
            mavenOverride: value,
            type: \\"mavenOverride\\",
            _visit: function <_Result>(
                this: Fiddle.PublishOutputModeV2.MavenOverride,
                visitor: Fiddle.PublishOutputModeV2._Visitor<_Result>
            ) {
                return Fiddle.PublishOutputModeV2._visit(this, visitor);
            },
        };
    },

    postman: (value: Fiddle.PostmanOutput): Fiddle.PublishOutputModeV2.Postman => {
        return {
            ...value,
            type: \\"postman\\",
            _visit: function <_Result>(
                this: Fiddle.PublishOutputModeV2.Postman,
                visitor: Fiddle.PublishOutputModeV2._Visitor<_Result>
            ) {
                return Fiddle.PublishOutputModeV2._visit(this, visitor);
            },
        };
    },

    _unknown: (value: { type: string }): Fiddle.PublishOutputModeV2._Unknown => {
        return {
            ...(value as any),
            _visit: function <_Result>(
                this: Fiddle.PublishOutputModeV2._Unknown,
                visitor: Fiddle.PublishOutputModeV2._Visitor<_Result>
            ) {
                return Fiddle.PublishOutputModeV2._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: Fiddle.PublishOutputModeV2,
        visitor: Fiddle.PublishOutputModeV2._Visitor<_Result>
    ): _Result => {
        switch (value.type) {
            case \\"npmOverride\\":
                return visitor.npmOverride(value.npmOverride);
            case \\"mavenOverride\\":
                return visitor.mavenOverride(value.mavenOverride);
            case \\"postman\\":
                return visitor.postman(value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
",
                        "name": "PublishOutputModeV2.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface PypiCoordinate {
    name: string;
    version: string;
}
",
                        "name": "PypiCoordinate.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";

export interface RegistryOverrides {
    npm?: Fiddle.NpmOutput;
    maven?: Fiddle.MavenOutput;
}
",
                        "name": "RegistryOverrides.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";

export type RemoteGenJobId = string & {
    RemoteGenJobId: void;
};

export function RemoteGenJobId(value: string): Fiddle.RemoteGenJobId {
    return value as unknown as Fiddle.RemoteGenJobId;
}
",
                        "name": "RemoteGenJobId.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";

/**
 * A remote gen job can be made up of several tasks.
 * A task corresponds to an instance of a generator (in .fernrc.yml).
 *
 */
export type RemoteGenTaskId = string & {
    RemoteGenTaskId: void;
};

export function RemoteGenTaskId(value: string): Fiddle.RemoteGenTaskId {
    return value as unknown as Fiddle.RemoteGenTaskId;
}
",
                        "name": "RemoteGenTaskId.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";

export interface Task {
    status: Fiddle.TaskStatus;
    packages: Fiddle.Package[];
    logs: Fiddle.TaskLog[];
}
",
                        "name": "Task.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";

export interface TaskLog {
    level: Fiddle.LogLevel;
    message: string;
}
",
                        "name": "TaskLog.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";

export type TaskStatus =
    | Fiddle.TaskStatus.NotStarted
    | Fiddle.TaskStatus.Running
    | Fiddle.TaskStatus.Failed
    | Fiddle.TaskStatus.Finished
    | Fiddle.TaskStatus._Unknown;

export declare namespace TaskStatus {
    interface NotStarted extends _Utils {
        type: \\"notStarted\\";
    }

    interface Running extends _Utils {
        type: \\"running\\";
    }

    interface Failed extends Fiddle.FailedTaskStatus, _Utils {
        type: \\"failed\\";
    }

    interface Finished extends Fiddle.FinishedTaskStatus, _Utils {
        type: \\"finished\\";
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: Fiddle.TaskStatus._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        notStarted: () => _Result;
        running: () => _Result;
        failed: (value: Fiddle.FailedTaskStatus) => _Result;
        finished: (value: Fiddle.FinishedTaskStatus) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const TaskStatus = {
    notStarted: (): Fiddle.TaskStatus.NotStarted => {
        return {
            type: \\"notStarted\\",
            _visit: function <_Result>(
                this: Fiddle.TaskStatus.NotStarted,
                visitor: Fiddle.TaskStatus._Visitor<_Result>
            ) {
                return Fiddle.TaskStatus._visit(this, visitor);
            },
        };
    },

    running: (): Fiddle.TaskStatus.Running => {
        return {
            type: \\"running\\",
            _visit: function <_Result>(this: Fiddle.TaskStatus.Running, visitor: Fiddle.TaskStatus._Visitor<_Result>) {
                return Fiddle.TaskStatus._visit(this, visitor);
            },
        };
    },

    failed: (value: Fiddle.FailedTaskStatus): Fiddle.TaskStatus.Failed => {
        return {
            ...value,
            type: \\"failed\\",
            _visit: function <_Result>(this: Fiddle.TaskStatus.Failed, visitor: Fiddle.TaskStatus._Visitor<_Result>) {
                return Fiddle.TaskStatus._visit(this, visitor);
            },
        };
    },

    finished: (value: Fiddle.FinishedTaskStatus): Fiddle.TaskStatus.Finished => {
        return {
            ...value,
            type: \\"finished\\",
            _visit: function <_Result>(this: Fiddle.TaskStatus.Finished, visitor: Fiddle.TaskStatus._Visitor<_Result>) {
                return Fiddle.TaskStatus._visit(this, visitor);
            },
        };
    },

    _unknown: (value: { type: string }): Fiddle.TaskStatus._Unknown => {
        return {
            ...(value as any),
            _visit: function <_Result>(this: Fiddle.TaskStatus._Unknown, visitor: Fiddle.TaskStatus._Visitor<_Result>) {
                return Fiddle.TaskStatus._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(value: Fiddle.TaskStatus, visitor: Fiddle.TaskStatus._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"notStarted\\":
                return visitor.notStarted();
            case \\"running\\":
                return visitor.running();
            case \\"failed\\":
                return visitor.failed(value);
            case \\"finished\\":
                return visitor.finished(value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
",
                        "name": "TaskStatus.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface UsernamePassword {
    username: string;
    password: string;
}
",
                        "name": "UsernamePassword.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export * from \\"./RemoteGenJobId\\";
export * from \\"./RemoteGenTaskId\\";
export * from \\"./GeneratorIdAndVersion\\";
export * from \\"./GeneratorConfig\\";
export * from \\"./GeneratorConfigV2\\";
export * from \\"./OutputMode\\";
export * from \\"./PublishOutputMode\\";
export * from \\"./PublishOutputModeV2\\";
export * from \\"./RegistryOverrides\\";
export * from \\"./GeneratorOutputs\\";
export * from \\"./NpmOutput\\";
export * from \\"./MavenOutput\\";
export * from \\"./PostmanOutput\\";
export * from \\"./GithubOutputMode\\";
export * from \\"./GithubPublishInfo\\";
export * from \\"./NpmOutputWithOptionalToken\\";
export * from \\"./MavenOutputWithOptionalCreds\\";
export * from \\"./UsernamePassword\\";
export * from \\"./Task\\";
export * from \\"./TaskStatus\\";
export * from \\"./FailedTaskStatus\\";
export * from \\"./FinishedTaskStatus\\";
export * from \\"./TaskLog\\";
export * from \\"./LogLevel\\";
export * from \\"./Package\\";
export * from \\"./PackagePublishStatus\\";
export * from \\"./PackageCoordinate\\";
export * from \\"./NpmCoordinate\\";
export * from \\"./MavenCoordinate\\";
export * from \\"./PypiCoordinate\\";
export * from \\"./CreateJobResponse\\";
export * from \\"./GeneratorsDoNotExistErrorBodyType\\";
export * from \\"./CannotPublishToNpmScopeDetails\\";
export * from \\"./CannotPublishToMavenGroupDetails\\";
export * from \\"./InsufficientPermissionsDetails\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                    ],
                    "name": "types",
                    "type": "directory",
                  },
                ],
                "name": "remoteGen",
                "type": "directory",
              },
            ],
            "name": "resources",
            "type": "directory",
          },
        ],
        "name": "api",
        "type": "directory",
      },
      Object {
        "contents": Array [
          Object {
            "contents": Array [
              Object {
                "contents": "export type APIResponse<Success, Failure> = SuccessfulResponse<Success> | FailedResponse<Failure>;

export interface SuccessfulResponse<T> {
    ok: true;
    body: T;
}

export interface FailedResponse<T> {
    ok: false;
    error: T;
}
",
                "name": "APIResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "import axios, { AxiosError } from \\"axios\\";
import { APIResponse } from \\"./APIResponse\\";

export interface Fetcher {
    fetch: FetchFunction;
}

export type FetchFunction = (args: Fetcher.Args) => Promise<APIResponse<unknown, Fetcher.Error>>;

export declare namespace Fetcher {
    export interface Args {
        url: string;
        method: string;
        headers?: Record<string, string | undefined>;
        queryParameters?: URLSearchParams;
        body?: unknown;
        timeoutMs?: number;
        withCredentials?: boolean;
    }

    export type Error = FailedStatusCodeError | NonJsonError | TimeoutError | UnknownError;

    export interface FailedStatusCodeError {
        reason: \\"status-code\\";
        statusCode: number;
        body: unknown;
    }

    export interface NonJsonError {
        reason: \\"non-json\\";
        statusCode: number;
        rawBody: string;
    }

    export interface TimeoutError {
        reason: \\"timeout\\";
    }

    export interface UnknownError {
        reason: \\"unknown\\";
        errorMessage: string;
    }
}

export const fetcher: FetchFunction = async (args) => {
    const headers: Record<string, string> = {
        \\"Content-Type\\": \\"application/json\\",
    };

    if (args.headers != null) {
        for (const [key, value] of Object.entries(args.headers)) {
            if (value != null) {
                headers[key] = value;
            }
        }
    }

    try {
        const response = await axios({
            url: args.url,
            params: args.queryParameters,
            method: args.method,
            headers,
            data: args.body,
            validateStatus: () => true,
            transformResponse: (response) => response,
            timeout: args.timeoutMs ?? 60_000,
            transitional: {
                clarifyTimeoutError: true,
            },
            withCredentials: args.withCredentials,
        });

        let body: unknown;
        if (response.data != null && response.data.length > 0) {
            try {
                body = JSON.parse(response.data) ?? undefined;
            } catch {
                return {
                    ok: false,
                    error: {
                        reason: \\"non-json\\",
                        statusCode: response.status,
                        rawBody: response.data,
                    },
                };
            }
        }

        if (response.status >= 200 && response.status < 300) {
            return {
                ok: true,
                body,
            };
        } else {
            return {
                ok: false,
                error: {
                    reason: \\"status-code\\",
                    statusCode: response.status,
                    body,
                },
            };
        }
    } catch (error) {
        if ((error as AxiosError).code === \\"ETIMEDOUT\\") {
            return {
                ok: false,
                error: {
                    reason: \\"timeout\\",
                },
            };
        }

        return {
            ok: false,
            error: {
                reason: \\"unknown\\",
                errorMessage: (error as AxiosError).message,
            },
        };
    }
};
",
                "name": "Fetcher.ts",
                "type": "file",
              },
              Object {
                "contents": "export type Supplier<T> = T | Promise<T> | (() => T | Promise<T>);

export const Supplier = {
    get: async <T>(supplier: Supplier<T>): Promise<T> => {
        if (typeof supplier === \\"function\\") {
            return (supplier as () => T)();
        } else {
            return supplier;
        }
    },
};
",
                "name": "Supplier.ts",
                "type": "file",
              },
              Object {
                "contents": "export { type APIResponse } from \\"./APIResponse\\";
export { fetcher, type Fetcher, type FetchFunction } from \\"./Fetcher\\";
export { Supplier } from \\"./Supplier\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "fetcher",
            "type": "directory",
          },
          Object {
            "contents": "export * as serialization from \\"./schemas\\";
export * from \\"./fetcher\\";
",
            "name": "index.ts",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "import { SchemaUtils } from \\"./builders\\";
import { MaybePromise } from \\"./utils/MaybePromise\\";

export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;

export type inferRaw<S extends Schema> = S extends Schema<infer Raw, any> ? Raw : never;
export type inferParsed<S extends Schema> = S extends Schema<any, infer Parsed> ? Parsed : never;

export interface BaseSchema<Raw, Parsed> {
    parse: (raw: unknown, opts?: SchemaOptions) => MaybePromise<MaybeValid<Parsed>>;
    json: (parsed: unknown, opts?: SchemaOptions) => MaybePromise<MaybeValid<Raw>>;
    getType: () => SchemaType | Promise<SchemaType>;
}

export const SchemaType = {
    DATE: \\"date\\",
    ENUM: \\"enum\\",
    LIST: \\"list\\",
    STRING_LITERAL: \\"stringLiteral\\",
    OBJECT: \\"object\\",
    ANY: \\"any\\",
    BOOLEAN: \\"boolean\\",
    NUMBER: \\"number\\",
    STRING: \\"string\\",
    UNKNOWN: \\"unknown\\",
    RECORD: \\"record\\",
    SET: \\"set\\",
    UNION: \\"union\\",
    OPTIONAL: \\"optional\\",
} as const;
export type SchemaType = typeof SchemaType[keyof typeof SchemaType];

export type MaybeValid<T> = Valid<T> | Invalid;

export interface Valid<T> {
    ok: true;
    value: T;
}

export interface Invalid {
    ok: false;
    errors: ValidationError[];
}

export interface ValidationError {
    path: string[];
    message: string;
}

export interface SchemaOptions {
    /**
     * @default false
     */
    allowUnknownKeys?: boolean;
}
",
                "name": "Schema.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "import { BaseSchema, Schema, SchemaType } from \\"../../Schema\\";
import { getSchemaUtils } from \\"../schema-utils\\";

// https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
const ISO_8601_REGEX =
    /^([+-]?\\\\d{4}(?!\\\\d{2}\\\\b))((-?)((0[1-9]|1[0-2])(\\\\3([12]\\\\d|0[1-9]|3[01]))?|W([0-4]\\\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\\\d|[12]\\\\d{2}|3([0-5]\\\\d|6[1-6])))([T\\\\s]((([01]\\\\d|2[0-3])((:?)[0-5]\\\\d)?|24:?00)([.,]\\\\d+(?!:))?)?(\\\\17[0-5]\\\\d([.,]\\\\d+)?)?([zZ]|([+-])([01]\\\\d|2[0-3]):?([0-5]\\\\d)?)?)?)?$/;

export function date(): Schema<string, Date> {
    const baseSchema: BaseSchema<string, Date> = {
        parse: (raw) => {
            if (typeof raw === \\"string\\" && ISO_8601_REGEX.test(raw)) {
                return {
                    ok: true,
                    value: new Date(raw),
                };
            } else {
                return {
                    ok: false,
                    errors: [
                        {
                            path: [],
                            message: \\"Not an ISO 8601 date string\\",
                        },
                    ],
                };
            }
        },
        json: (date) => {
            if (date instanceof Date) {
                return {
                    ok: true,
                    value: date.toISOString(),
                };
            } else {
                return {
                    ok: false,
                    errors: [
                        {
                            path: [],
                            message: \\"Not a Date object\\",
                        },
                    ],
                };
            }
        },
        getType: () => SchemaType.DATE,
    };

    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
    };
}
",
                        "name": "date.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { date } from \\"./date\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                    ],
                    "name": "date",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "import { Schema, SchemaType } from \\"../../Schema\\";
import { createIdentitySchemaCreator } from \\"../../utils/createIdentitySchemaCreator\\";

export function enum_<U extends string, E extends U[]>(values: E): Schema<E[number], E[number]> {
    const validValues = new Set<string>(values);

    const schemaCreator = createIdentitySchemaCreator(SchemaType.ENUM, (value, { allowUnknownKeys = false } = {}) => {
        if (typeof value === \\"string\\" && (validValues.has(value) || allowUnknownKeys)) {
            return {
                ok: true,
                value: value as U,
            };
        } else {
            return {
                ok: false,
                errors: [
                    {
                        path: [],
                        message: \\"Not one of the allowed values\\",
                    },
                ],
            };
        }
    });

    return schemaCreator();
}
",
                        "name": "enum.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { enum_ } from \\"./enum\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                    ],
                    "name": "enum",
                    "type": "directory",
                  },
                  Object {
                    "contents": "export * from \\"./date\\";
export * from \\"./enum\\";
export * from \\"./lazy\\";
export * from \\"./list\\";
export * from \\"./literals\\";
export * from \\"./object\\";
export * from \\"./object-like\\";
export * from \\"./primitives\\";
export * from \\"./record\\";
export * from \\"./schema-utils\\";
export * from \\"./set\\";
export * from \\"./union\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export { lazy, type SchemaGetter } from \\"./lazy\\";
export { lazyObject } from \\"./lazyObject\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { BaseSchema, Schema } from \\"../../Schema\\";
import { getSchemaUtils } from \\"../schema-utils\\";

export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType | Promise<SchemaType>;

export function lazy<Raw, Parsed>(getter: SchemaGetter<Schema<Raw, Parsed>>): Schema<Raw, Parsed> {
    const baseSchema = constructLazyBaseSchema(getter);
    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
    };
}

export function constructLazyBaseSchema<Raw, Parsed>(
    getter: SchemaGetter<Schema<Raw, Parsed>>
): BaseSchema<Raw, Parsed> {
    return {
        parse: async (raw, opts) => (await getMemoizedSchema(getter)).parse(raw, opts),
        json: async (parsed, opts) => (await getMemoizedSchema(getter)).json(parsed, opts),
        getType: async () => (await getMemoizedSchema(getter)).getType(),
    };
}

type MemoizedGetter<SchemaType extends Schema<any, any>> = SchemaGetter<SchemaType> & { __zurg_memoized?: SchemaType };

export async function getMemoizedSchema<SchemaType extends Schema<any, any>>(
    getter: SchemaGetter<SchemaType>
): Promise<SchemaType> {
    const castedGetter = getter as MemoizedGetter<SchemaType>;
    if (castedGetter.__zurg_memoized == null) {
        castedGetter.__zurg_memoized = await getter();
    }
    return castedGetter.__zurg_memoized;
}
",
                        "name": "lazy.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { getObjectUtils } from \\"../object\\";
import { getObjectLikeUtils } from \\"../object-like\\";
import { BaseObjectSchema, ObjectSchema } from \\"../object/types\\";
import { getSchemaUtils } from \\"../schema-utils\\";
import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from \\"./lazy\\";

export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
    const baseSchema: BaseObjectSchema<Raw, Parsed> = {
        ...constructLazyBaseSchema(getter),
        _getRawProperties: async () => (await getMemoizedSchema(getter))._getRawProperties(),
        _getParsedProperties: async () => (await getMemoizedSchema(getter))._getParsedProperties(),
    };

    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
        ...getObjectLikeUtils(baseSchema),
        ...getObjectUtils(baseSchema),
    };
}
",
                        "name": "lazyObject.ts",
                        "type": "file",
                      },
                    ],
                    "name": "lazy",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export { list } from \\"./list\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from \\"../../Schema\\";
import { MaybePromise } from \\"../../utils/MaybePromise\\";
import { getSchemaUtils } from \\"../schema-utils\\";

export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
    const baseSchema: BaseSchema<Raw[], Parsed[]> = {
        parse: async (raw, opts) => validateAndTransformArray(raw, (item) => schema.parse(item, opts)),
        json: (parsed, opts) => validateAndTransformArray(parsed, (item) => schema.json(item, opts)),
        getType: () => SchemaType.LIST,
    };

    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
    };
}

async function validateAndTransformArray<Raw, Parsed>(
    value: unknown,
    transformItem: (item: Raw) => MaybePromise<MaybeValid<Parsed>>
): Promise<MaybeValid<Parsed[]>> {
    if (!Array.isArray(value)) {
        return {
            ok: false,
            errors: [
                {
                    message: \\"Not a list\\",
                    path: [],
                },
            ],
        };
    }

    const maybeValidItems = await Promise.all(value.map((item) => transformItem(item)));

    return maybeValidItems.reduce<MaybeValid<Parsed[]>>(
        (acc, item, index) => {
            if (acc.ok && item.ok) {
                return {
                    ok: true,
                    value: [...acc.value, item.value],
                };
            }

            const errors: ValidationError[] = [];
            if (!acc.ok) {
                errors.push(...acc.errors);
            }
            if (!item.ok) {
                errors.push(
                    ...item.errors.map((error) => ({
                        path: [\`[\${index}]\`, ...error.path],
                        message: error.message,
                    }))
                );
            }

            return {
                ok: false,
                errors,
            };
        },
        { ok: true, value: [] }
    );
}
",
                        "name": "list.ts",
                        "type": "file",
                      },
                    ],
                    "name": "list",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export { stringLiteral } from \\"./stringLiteral\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { Schema, SchemaType } from \\"../../Schema\\";
import { createIdentitySchemaCreator } from \\"../../utils/createIdentitySchemaCreator\\";

export function stringLiteral<V extends string>(literal: V): Schema<V, V> {
    const schemaCreator = createIdentitySchemaCreator(SchemaType.STRING_LITERAL, (value) => {
        if (value === literal) {
            return {
                ok: true,
                value: literal,
            };
        } else {
            return {
                ok: false,
                errors: [
                    {
                        path: [],
                        message: \`Not equal to \\"\${literal}\\"\`,
                    },
                ],
            };
        }
    });

    return schemaCreator();
}
",
                        "name": "stringLiteral.ts",
                        "type": "file",
                      },
                    ],
                    "name": "literals",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export { getObjectUtils, object } from \\"./object\\";
export { isProperty, property, type Property } from \\"./property\\";
export {
    type BaseObjectSchema,
    type inferObjectSchemaFromPropertySchemas,
    type inferParsedObject,
    type inferParsedObjectFromPropertySchemas,
    type inferParsedPropertySchema,
    type inferRawKey,
    type inferRawObject,
    type inferRawObjectFromPropertySchemas,
    type inferRawPropertySchema,
    type ObjectSchema,
    type ObjectUtils,
    type PropertySchemas,
} from \\"./types\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MaybeValid, Schema, SchemaType, ValidationError } from \\"../../Schema\\";
import { entries } from \\"../../utils/entries\\";
import { filterObject } from \\"../../utils/filterObject\\";
import { isPlainObject, NOT_AN_OBJECT_ERROR_MESSAGE } from \\"../../utils/isPlainObject\\";
import { keys } from \\"../../utils/keys\\";
import { MaybePromise } from \\"../../utils/MaybePromise\\";
import { partition } from \\"../../utils/partition\\";
import { getObjectLikeUtils } from \\"../object-like\\";
import { getSchemaUtils } from \\"../schema-utils\\";
import { isProperty } from \\"./property\\";
import {
    BaseObjectSchema,
    inferObjectSchemaFromPropertySchemas,
    inferParsedObjectFromPropertySchemas,
    inferRawObjectFromPropertySchemas,
    ObjectSchema,
    ObjectUtils,
    PropertySchemas,
} from \\"./types\\";

interface ObjectPropertyWithRawKey {
    rawKey: string;
    parsedKey: string;
    valueSchema: Schema<any, any>;
}

export function object<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
    schemas: T
): inferObjectSchemaFromPropertySchemas<T> {
    const baseSchema: BaseObjectSchema<
        inferRawObjectFromPropertySchemas<T>,
        inferParsedObjectFromPropertySchemas<T>
    > = {
        _getRawProperties: () =>
            Promise.resolve(
                Object.entries(schemas).map(([parsedKey, propertySchema]) =>
                    isProperty(propertySchema) ? propertySchema.rawKey : parsedKey
                ) as unknown as (keyof inferRawObjectFromPropertySchemas<T>)[]
            ),
        _getParsedProperties: () =>
            Promise.resolve(keys(schemas) as unknown as (keyof inferParsedObjectFromPropertySchemas<T>)[]),

        parse: async (raw, opts) => {
            const rawKeyToProperty: Record<string, ObjectPropertyWithRawKey> = {};
            const requiredKeys: string[] = [];

            for (const [parsedKey, schemaOrObjectProperty] of entries(schemas)) {
                const rawKey = isProperty(schemaOrObjectProperty) ? schemaOrObjectProperty.rawKey : parsedKey;
                const valueSchema: Schema<any, any> = isProperty(schemaOrObjectProperty)
                    ? schemaOrObjectProperty.valueSchema
                    : schemaOrObjectProperty;

                const property: ObjectPropertyWithRawKey = {
                    rawKey,
                    parsedKey: parsedKey as string,
                    valueSchema,
                };

                rawKeyToProperty[rawKey] = property;

                if ((await valueSchema.getType()) !== \\"optional\\") {
                    requiredKeys.push(rawKey);
                }
            }

            return validateAndTransformObject({
                value: raw,
                requiredKeys,
                getProperty: (rawKey) => {
                    const property = rawKeyToProperty[rawKey];
                    if (property == null) {
                        return undefined;
                    }
                    return {
                        transformedKey: property.parsedKey,
                        transform: (propertyValue) => property.valueSchema.parse(propertyValue, opts),
                    };
                },
                allowUnknownKeys: opts?.allowUnknownKeys ?? false,
            });
        },

        json: async (parsed, opts) => {
            const requiredKeys: string[] = [];

            for (const [parsedKey, schemaOrObjectProperty] of entries(schemas)) {
                const valueSchema: Schema<any, any> = isProperty(schemaOrObjectProperty)
                    ? schemaOrObjectProperty.valueSchema
                    : schemaOrObjectProperty;

                if ((await valueSchema.getType()) !== \\"optional\\") {
                    requiredKeys.push(parsedKey as string);
                }
            }

            return validateAndTransformObject({
                value: parsed,
                requiredKeys,
                getProperty: (
                    parsedKey
                ):
                    | { transformedKey: string; transform: (propertyValue: unknown) => MaybePromise<MaybeValid<any>> }
                    | undefined => {
                    const property = schemas[parsedKey as keyof T];

                    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
                    if (property == null) {
                        return undefined;
                    }

                    if (isProperty(property)) {
                        return {
                            transformedKey: property.rawKey,
                            transform: (propertyValue) => property.valueSchema.json(propertyValue, opts),
                        };
                    } else {
                        return {
                            transformedKey: parsedKey,
                            transform: (propertyValue) => property.json(propertyValue, opts),
                        };
                    }
                },
                allowUnknownKeys: opts?.allowUnknownKeys ?? false,
            });
        },

        getType: () => SchemaType.OBJECT,
    };

    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
        ...getObjectLikeUtils(baseSchema),
        ...getObjectUtils(baseSchema),
    };
}

async function validateAndTransformObject<Transformed>({
    value,
    requiredKeys,
    getProperty,
    allowUnknownKeys,
}: {
    value: unknown;
    requiredKeys: string[];
    getProperty: (
        preTransformedKey: string
    ) => { transformedKey: string; transform: (propertyValue: unknown) => MaybePromise<MaybeValid<any>> } | undefined;
    allowUnknownKeys: boolean;
}): Promise<MaybeValid<Transformed>> {
    if (!isPlainObject(value)) {
        return {
            ok: false,
            errors: [
                {
                    path: [],
                    message: NOT_AN_OBJECT_ERROR_MESSAGE,
                },
            ],
        };
    }

    const missingRequiredKeys = new Set(requiredKeys);
    const errors: ValidationError[] = [];
    const transformed: Record<string | number | symbol, any> = {};

    for (const [preTransformedKey, preTransformedItemValue] of Object.entries(value)) {
        const property = getProperty(preTransformedKey);

        if (property != null) {
            missingRequiredKeys.delete(preTransformedKey);

            const value = await property.transform(preTransformedItemValue);
            if (value.ok) {
                transformed[property.transformedKey] = value.value;
            } else {
                errors.push(
                    ...value.errors.map((error) => ({
                        path: [preTransformedKey, ...error.path],
                        message: error.message,
                    }))
                );
            }
        } else if (allowUnknownKeys) {
            transformed[preTransformedKey] = preTransformedItemValue;
        } else {
            errors.push({
                path: [preTransformedKey],
                message: \`Unrecognized key \\"\${preTransformedKey}\\"\`,
            });
        }
    }

    errors.push(
        ...requiredKeys
            .filter((key) => missingRequiredKeys.has(key))
            .map((key) => ({
                path: [],
                message: \`Missing required key \\"\${key}\\"\`,
            }))
    );

    if (errors.length === 0) {
        return {
            ok: true,
            value: transformed as Transformed,
        };
    } else {
        return {
            ok: false,
            errors,
        };
    }
}

export function getObjectUtils<Raw, Parsed>(schema: BaseObjectSchema<Raw, Parsed>): ObjectUtils<Raw, Parsed> {
    return {
        extend: <RawExtension, ParsedExtension>(extension: ObjectSchema<RawExtension, ParsedExtension>) => {
            const baseSchema: BaseObjectSchema<Raw & RawExtension, Parsed & ParsedExtension> = {
                _getParsedProperties: async () => [
                    ...(await schema._getParsedProperties()),
                    ...(await extension._getParsedProperties()),
                ],
                _getRawProperties: async () => [
                    ...(await schema._getRawProperties()),
                    ...(await extension._getRawProperties()),
                ],
                parse: async (raw, opts) => {
                    return validateAndTransformExtendedObject({
                        extensionKeys: await extension._getRawProperties(),
                        value: raw,
                        transformBase: (rawBase) => schema.parse(rawBase, opts),
                        transformExtension: (rawExtension) => extension.parse(rawExtension, opts),
                    });
                },
                json: async (parsed, opts) => {
                    return validateAndTransformExtendedObject({
                        extensionKeys: await extension._getParsedProperties(),
                        value: parsed,
                        transformBase: (parsedBase) => schema.json(parsedBase, opts),
                        transformExtension: (parsedExtension) => extension.json(parsedExtension, opts),
                    });
                },
                getType: () => SchemaType.OBJECT,
            };

            return {
                ...baseSchema,
                ...getSchemaUtils(baseSchema),
                ...getObjectLikeUtils(baseSchema),
                ...getObjectUtils(baseSchema),
            };
        },
    };
}

async function validateAndTransformExtendedObject<PreTransformedExtension, TransformedBase, TransformedExtension>({
    extensionKeys,
    value,
    transformBase,
    transformExtension,
}: {
    extensionKeys: (keyof PreTransformedExtension)[];
    value: unknown;
    transformBase: (value: unknown) => MaybePromise<MaybeValid<TransformedBase>>;
    transformExtension: (value: unknown) => MaybePromise<MaybeValid<TransformedExtension>>;
}): Promise<MaybeValid<TransformedBase & TransformedExtension>> {
    const extensionPropertiesSet = new Set(extensionKeys);
    const [extensionProperties, baseProperties] = partition(keys(value), (key) =>
        extensionPropertiesSet.has(key as keyof PreTransformedExtension)
    );

    const transformedBase = await transformBase(filterObject(value, baseProperties));
    const transformedExtension = await transformExtension(filterObject(value, extensionProperties));

    if (transformedBase.ok && transformedExtension.ok) {
        return {
            ok: true,
            value: {
                ...transformedBase.value,
                ...transformedExtension.value,
            },
        };
    } else {
        return {
            ok: false,
            errors: [
                ...(transformedBase.ok ? [] : transformedBase.errors),
                ...(transformedExtension.ok ? [] : transformedExtension.errors),
            ],
        };
    }
}
",
                        "name": "object.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { Schema } from \\"../../Schema\\";

export function property<RawKey extends string, RawValue, ParsedValue>(
    rawKey: RawKey,
    valueSchema: Schema<RawValue, ParsedValue>
): Property<RawKey, RawValue, ParsedValue> {
    return {
        rawKey,
        valueSchema,
        isProperty: true,
    };
}

export interface Property<RawKey extends string, RawValue, ParsedValue> {
    rawKey: RawKey;
    valueSchema: Schema<RawValue, ParsedValue>;
    isProperty: true;
}

export function isProperty<O extends Property<any, any, any>>(maybeProperty: unknown): maybeProperty is O {
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
    return (maybeProperty as O).isProperty;
}
",
                        "name": "property.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { BaseSchema, inferParsed, inferRaw, Schema } from \\"../../Schema\\";
import { addQuestionMarksToNullableProperties } from \\"../../utils/addQuestionMarksToNullableProperties\\";
import { ObjectLikeUtils } from \\"../object-like\\";
import { SchemaUtils } from \\"../schema-utils\\";
import { Property } from \\"./property\\";

export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
    ObjectLikeUtils<Raw, Parsed> &
    ObjectUtils<Raw, Parsed> &
    SchemaUtils<Raw, Parsed>;

export interface BaseObjectSchema<Raw, Parsed> extends BaseSchema<Raw, Parsed> {
    _getRawProperties: () => Promise<(keyof Raw)[]>;
    _getParsedProperties: () => Promise<(keyof Parsed)[]>;
}

export interface ObjectUtils<Raw, Parsed> {
    extend: <RawExtension, ParsedExtension>(
        schemas: ObjectSchema<RawExtension, ParsedExtension>
    ) => ObjectSchema<Raw & RawExtension, Parsed & ParsedExtension>;
}

export type inferRawObject<O extends ObjectSchema<any, any>> = O extends ObjectSchema<infer Raw, any> ? Raw : never;

export type inferParsedObject<O extends ObjectSchema<any, any>> = O extends ObjectSchema<any, infer Parsed>
    ? Parsed
    : never;

export type inferObjectSchemaFromPropertySchemas<T extends PropertySchemas<keyof T>> = ObjectSchema<
    inferRawObjectFromPropertySchemas<T>,
    inferParsedObjectFromPropertySchemas<T>
>;

export type inferRawObjectFromPropertySchemas<T extends PropertySchemas<keyof T>> =
    addQuestionMarksToNullableProperties<{
        [ParsedKey in keyof T as inferRawKey<ParsedKey, T[ParsedKey]>]: inferRawPropertySchema<T[ParsedKey]>;
    }>;

export type inferParsedObjectFromPropertySchemas<T extends PropertySchemas<keyof T>> =
    addQuestionMarksToNullableProperties<{
        [K in keyof T]: inferParsedPropertySchema<T[K]>;
    }>;

export type PropertySchemas<ParsedKeys extends string | number | symbol> = Record<
    ParsedKeys,
    Property<any, any, any> | Schema<any, any>
>;

export type inferRawPropertySchema<P extends Property<any, any, any> | Schema<any, any>> = P extends Property<
    any,
    infer Raw,
    any
>
    ? Raw
    : P extends Schema<any, any>
    ? inferRaw<P>
    : never;

export type inferParsedPropertySchema<P extends Property<any, any, any> | Schema<any, any>> = P extends Property<
    any,
    any,
    infer Parsed
>
    ? Parsed
    : P extends Schema<any, any>
    ? inferParsed<P>
    : never;

export type inferRawKey<
    ParsedKey extends string | number | symbol,
    P extends Property<any, any, any> | Schema<any, any>
> = P extends Property<infer Raw, any, any> ? Raw : ParsedKey;
",
                        "name": "types.ts",
                        "type": "file",
                      },
                    ],
                    "name": "object",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "import { BaseSchema } from \\"../../Schema\\";
import { filterObject } from \\"../../utils/filterObject\\";
import { isPlainObject, NOT_AN_OBJECT_ERROR_MESSAGE } from \\"../../utils/isPlainObject\\";
import { getSchemaUtils } from \\"../schema-utils\\";
import { ObjectLikeSchema, ObjectLikeUtils } from \\"./types\\";

export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
    return {
        withParsedProperties: (properties) => withParsedProperties(schema, properties),
    };
}

/**
 * object-like utils are defined in one file to resolve issues with circular imports
 */

export function withParsedProperties<RawObjectShape, ParsedObjectShape, Properties>(
    objectLike: BaseSchema<RawObjectShape, ParsedObjectShape>,
    properties: { [K in keyof Properties]: Properties[K] | ((parsed: ParsedObjectShape) => Properties[K]) }
): ObjectLikeSchema<RawObjectShape, ParsedObjectShape & Properties> {
    const objectSchema: BaseSchema<RawObjectShape, ParsedObjectShape & Properties> = {
        parse: async (raw, opts) => {
            const parsedObject = await objectLike.parse(raw, opts);
            if (!parsedObject.ok) {
                return parsedObject;
            }

            const additionalProperties = Object.entries(properties).reduce<Record<string, any>>(
                (processed, [key, value]) => {
                    return {
                        ...processed,
                        [key]: typeof value === \\"function\\" ? value(parsedObject.value) : value,
                    };
                },
                {}
            );

            return {
                ok: true,
                value: {
                    ...parsedObject.value,
                    ...(additionalProperties as Properties),
                },
            };
        },

        json: (parsed, opts) => {
            if (!isPlainObject(parsed)) {
                return {
                    ok: false,
                    errors: [
                        {
                            path: [],
                            message: NOT_AN_OBJECT_ERROR_MESSAGE,
                        },
                    ],
                };
            }

            // strip out added properties
            const addedPropertyKeys = new Set(Object.keys(properties));
            const parsedWithoutAddedProperties = filterObject(
                parsed,
                Object.keys(parsed).filter((key) => !addedPropertyKeys.has(key))
            );

            return objectLike.json(parsedWithoutAddedProperties as ParsedObjectShape, opts);
        },

        getType: () => objectLike.getType(),
    };

    return {
        ...objectSchema,
        ...getSchemaUtils(objectSchema),
        ...getObjectLikeUtils(objectSchema),
    };
}
",
                        "name": "getObjectLikeUtils.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { getObjectLikeUtils, withParsedProperties } from \\"./getObjectLikeUtils\\";
export { type ObjectLikeSchema, type ObjectLikeUtils } from \\"./types\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { BaseSchema, Schema } from \\"../../Schema\\";

export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
    BaseSchema<Raw, Parsed> &
    ObjectLikeUtils<Raw, Parsed>;

export interface ObjectLikeUtils<Raw, Parsed> {
    withParsedProperties: <T extends Record<string, any>>(properties: {
        [K in keyof T]: T[K] | ((parsed: Parsed) => T[K]);
    }) => ObjectLikeSchema<Raw, Parsed & T>;
}
",
                        "name": "types.ts",
                        "type": "file",
                      },
                    ],
                    "name": "object-like",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "import { SchemaType } from \\"../../Schema\\";
import { createIdentitySchemaCreator } from \\"../../utils/createIdentitySchemaCreator\\";

export const any = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({ ok: true, value }));
",
                        "name": "any.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { SchemaType } from \\"../../Schema\\";
import { createIdentitySchemaCreator } from \\"../../utils/createIdentitySchemaCreator\\";

export const boolean = createIdentitySchemaCreator<boolean>(SchemaType.BOOLEAN, (value) => {
    if (typeof value === \\"boolean\\") {
        return {
            ok: true,
            value,
        };
    } else {
        return {
            ok: false,
            errors: [
                {
                    path: [],
                    message: \\"Not a boolean\\",
                },
            ],
        };
    }
});
",
                        "name": "boolean.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { any } from \\"./any\\";
export { boolean } from \\"./boolean\\";
export { number } from \\"./number\\";
export { string } from \\"./string\\";
export { unknown } from \\"./unknown\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { SchemaType } from \\"../../Schema\\";
import { createIdentitySchemaCreator } from \\"../../utils/createIdentitySchemaCreator\\";

export const number = createIdentitySchemaCreator<number>(SchemaType.NUMBER, (value) => {
    if (typeof value === \\"number\\") {
        return {
            ok: true,
            value,
        };
    } else {
        return {
            ok: false,
            errors: [
                {
                    path: [],
                    message: \\"Not a number\\",
                },
            ],
        };
    }
});
",
                        "name": "number.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { SchemaType } from \\"../../Schema\\";
import { createIdentitySchemaCreator } from \\"../../utils/createIdentitySchemaCreator\\";

export const string = createIdentitySchemaCreator<string>(SchemaType.STRING, (value) => {
    if (typeof value === \\"string\\") {
        return {
            ok: true,
            value,
        };
    } else {
        return {
            ok: false,
            errors: [
                {
                    path: [],
                    message: \\"Not a string\\",
                },
            ],
        };
    }
});
",
                        "name": "string.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { SchemaType } from \\"../../Schema\\";
import { createIdentitySchemaCreator } from \\"../../utils/createIdentitySchemaCreator\\";

export const unknown = createIdentitySchemaCreator<unknown>(SchemaType.UNKNOWN, (value) => ({ ok: true, value }));
",
                        "name": "unknown.ts",
                        "type": "file",
                      },
                    ],
                    "name": "primitives",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export { record } from \\"./record\\";
export { type BaseRecordSchema, type RecordSchema } from \\"./types\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MaybeValid, Schema, SchemaType, ValidationError } from \\"../../Schema\\";
import { entries } from \\"../../utils/entries\\";
import { isPlainObject, NOT_AN_OBJECT_ERROR_MESSAGE } from \\"../../utils/isPlainObject\\";
import { MaybePromise } from \\"../../utils/MaybePromise\\";
import { OptionalRecord } from \\"../../utils/OptionalRecord\\";
import { getSchemaUtils } from \\"../schema-utils\\";
import { BaseRecordSchema, RecordSchema } from \\"./types\\";

export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
    keySchema: Schema<RawKey, ParsedKey>,
    valueSchema: Schema<RawValue, ParsedValue>
): RecordSchema<RawKey, RawValue, ParsedKey, ParsedValue> {
    const baseSchema: BaseRecordSchema<RawKey, RawValue, ParsedKey, ParsedValue> = {
        parse: async (raw, opts) => {
            return validateAndTransformRecord({
                value: raw,
                isKeyNumeric: (await keySchema.getType()) === SchemaType.NUMBER,
                transformKey: (key) => keySchema.parse(key, opts),
                transformValue: (value) => valueSchema.parse(value, opts),
            });
        },
        json: async (parsed, opts) => {
            return validateAndTransformRecord({
                value: parsed,
                isKeyNumeric: (await keySchema.getType()) === SchemaType.NUMBER,
                transformKey: (key) => keySchema.json(key, opts),
                transformValue: (value) => valueSchema.json(value, opts),
            });
        },
        getType: () => SchemaType.RECORD,
    };

    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
    };
}

async function validateAndTransformRecord<TransformedKey extends string | number, TransformedValue>({
    value,
    isKeyNumeric,
    transformKey,
    transformValue,
}: {
    value: unknown;
    isKeyNumeric: boolean;
    transformKey: (key: string | number) => MaybePromise<MaybeValid<TransformedKey>>;
    transformValue: (value: unknown) => MaybePromise<MaybeValid<TransformedValue>>;
}): Promise<MaybeValid<OptionalRecord<TransformedKey, TransformedValue>>> {
    if (!isPlainObject(value)) {
        return {
            ok: false,
            errors: [
                {
                    path: [],
                    message: NOT_AN_OBJECT_ERROR_MESSAGE,
                },
            ],
        };
    }

    return entries(value).reduce<Promise<MaybeValid<OptionalRecord<TransformedKey, TransformedValue>>>>(
        async (accPromise, [stringKey, value]) => {
            // skip nullish keys
            if (value == null) {
                return accPromise;
            }

            const acc = await accPromise;

            let key: string | number = stringKey;
            if (isKeyNumeric) {
                const numberKey = stringKey.length > 0 ? Number(stringKey) : NaN;
                if (!isNaN(numberKey)) {
                    key = numberKey;
                }
            }
            const transformedKey = await transformKey(key);

            const transformedValue = await transformValue(value);

            if (acc.ok && transformedKey.ok && transformedValue.ok) {
                return {
                    ok: true,
                    value: {
                        ...acc.value,
                        [transformedKey.value]: transformedValue.value,
                    },
                };
            }

            const errors: ValidationError[] = [];
            if (!acc.ok) {
                errors.push(...acc.errors);
            }
            if (!transformedKey.ok) {
                errors.push(
                    ...transformedKey.errors.map((error) => ({
                        path: [\`\${key} (key)\`, ...error.path],
                        message: error.message,
                    }))
                );
            }
            if (!transformedValue.ok) {
                errors.push(
                    ...transformedValue.errors.map((error) => ({
                        path: [stringKey, ...error.path],
                        message: error.message,
                    }))
                );
            }

            return {
                ok: false,
                errors,
            };
        },
        Promise.resolve({ ok: true, value: {} as OptionalRecord<TransformedKey, TransformedValue> })
    );
}
",
                        "name": "record.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { BaseSchema } from \\"../../Schema\\";
import { OptionalRecord } from \\"../../utils/OptionalRecord\\";
import { SchemaUtils } from \\"../schema-utils\\";

export type RecordSchema<
    RawKey extends string | number,
    RawValue,
    ParsedKey extends string | number,
    ParsedValue
> = BaseRecordSchema<RawKey, RawValue, ParsedKey, ParsedValue> &
    SchemaUtils<OptionalRecord<RawKey, RawValue>, OptionalRecord<ParsedKey, ParsedValue>>;

export type BaseRecordSchema<
    RawKey extends string | number,
    RawValue,
    ParsedKey extends string | number,
    ParsedValue
> = BaseSchema<OptionalRecord<RawKey, RawValue>, OptionalRecord<ParsedKey, ParsedValue>>;
",
                        "name": "types.ts",
                        "type": "file",
                      },
                    ],
                    "name": "record",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "import { ValidationError } from \\"../../Schema\\";
import { stringifyValidationError } from \\"./stringifyValidationErrors\\";

export class JsonError extends Error {
    constructor(public readonly errors: ValidationError[]) {
        super(errors.map(stringifyValidationError).join(\\"; \\"));
        Object.setPrototypeOf(this, JsonError.prototype);
    }
}
",
                        "name": "JsonError.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { ValidationError } from \\"../../Schema\\";
import { stringifyValidationError } from \\"./stringifyValidationErrors\\";

export class ParseError extends Error {
    constructor(public readonly errors: ValidationError[]) {
        super(errors.map(stringifyValidationError).join(\\"; \\"));
        Object.setPrototypeOf(this, ParseError.prototype);
    }
}
",
                        "name": "ParseError.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { BaseSchema, Schema, SchemaOptions, SchemaType } from \\"../../Schema\\";
import { JsonError } from \\"./JsonError\\";
import { ParseError } from \\"./ParseError\\";

export interface SchemaUtils<Raw, Parsed> {
    optional: () => Schema<Raw | null | undefined, Parsed | undefined>;
    transform: <Transformed>(transformer: SchemaTransformer<Parsed, Transformed>) => Schema<Raw, Transformed>;
    parseOrThrow: (raw: unknown, opts?: SchemaOptions) => Promise<Parsed>;
    jsonOrThrow: (raw: unknown, opts?: SchemaOptions) => Promise<Raw>;
}

export interface SchemaTransformer<Parsed, Transformed> {
    transform: (parsed: Parsed) => Transformed;
    untransform: (transformed: any) => Parsed;
}

export function getSchemaUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): SchemaUtils<Raw, Parsed> {
    return {
        optional: () => optional(schema),
        transform: (transformer) => transform(schema, transformer),
        parseOrThrow: async (raw, opts) => {
            const parsed = await schema.parse(raw, opts);
            if (parsed.ok) {
                return parsed.value;
            }
            throw new ParseError(parsed.errors);
        },
        jsonOrThrow: async (parsed, opts) => {
            const raw = await schema.json(parsed, opts);
            if (raw.ok) {
                return raw.value;
            }
            throw new JsonError(raw.errors);
        },
    };
}

/**
 * schema utils are defined in one file to resolve issues with circular imports
 */

export function optional<Raw, Parsed>(
    schema: BaseSchema<Raw, Parsed>
): Schema<Raw | null | undefined, Parsed | undefined> {
    const baseSchema: BaseSchema<Raw | null | undefined, Parsed | undefined> = {
        parse: (raw, opts) => {
            if (raw == null) {
                return {
                    ok: true,
                    value: undefined,
                };
            }
            return schema.parse(raw, opts);
        },
        json: (parsed, opts) => {
            if (parsed == null) {
                return {
                    ok: true,
                    value: null,
                };
            }
            return schema.json(parsed, opts);
        },
        getType: () => SchemaType.OPTIONAL,
    };

    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
    };
}

export function transform<Raw, Parsed, Transformed>(
    schema: BaseSchema<Raw, Parsed>,
    transformer: SchemaTransformer<Parsed, Transformed>
): Schema<Raw, Transformed> {
    const baseSchema: BaseSchema<Raw, Transformed> = {
        parse: async (raw, opts) => {
            const parsed = await schema.parse(raw, opts);
            if (!parsed.ok) {
                return parsed;
            }
            return {
                ok: true,
                value: transformer.transform(parsed.value),
            };
        },
        json: async (transformed, opts) => {
            const parsed = await transformer.untransform(transformed);
            return schema.json(parsed, opts);
        },
        getType: () => schema.getType(),
    };

    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
    };
}
",
                        "name": "getSchemaUtils.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { getSchemaUtils, optional, transform, type SchemaUtils } from \\"./getSchemaUtils\\";
export { JsonError } from \\"./JsonError\\";
export { ParseError } from \\"./ParseError\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { ValidationError } from \\"../../Schema\\";

export function stringifyValidationError(error: ValidationError): string {
    if (error.path.length === 0) {
        return error.message;
    }
    return \`\${error.path.join(\\" -> \\")}: \${error.message}\`;
}
",
                        "name": "stringifyValidationErrors.ts",
                        "type": "file",
                      },
                    ],
                    "name": "schema-utils",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export { set } from \\"./set\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { BaseSchema, Schema, SchemaType } from \\"../../Schema\\";
import { list } from \\"../list\\";
import { getSchemaUtils } from \\"../schema-utils\\";

export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
    const listSchema = list(schema);
    const baseSchema: BaseSchema<Raw[], Set<Parsed>> = {
        parse: async (raw, opts) => {
            const parsedList = await listSchema.parse(raw, opts);
            if (parsedList.ok) {
                return {
                    ok: true,
                    value: new Set(parsedList.value),
                };
            } else {
                return parsedList;
            }
        },
        json: async (parsed, opts) => {
            if (!(parsed instanceof Set)) {
                return {
                    ok: false,
                    errors: [
                        {
                            path: [],
                            message: \\"Not a Set\\",
                        },
                    ],
                };
            }
            const jsonList = await listSchema.json([...parsed], opts);
            return jsonList;
        },
        getType: () => SchemaType.SET,
    };

    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
    };
}
",
                        "name": "set.ts",
                        "type": "file",
                      },
                    ],
                    "name": "set",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export function discriminant<RawDiscriminant extends string, ParsedDiscriminant extends string>(
    parsedDiscriminant: ParsedDiscriminant,
    rawDiscriminant: RawDiscriminant
): Discriminant<RawDiscriminant, ParsedDiscriminant> {
    return {
        parsedDiscriminant,
        rawDiscriminant,
    };
}

export interface Discriminant<RawDiscriminant extends string, ParsedDiscriminant extends string> {
    parsedDiscriminant: ParsedDiscriminant;
    rawDiscriminant: RawDiscriminant;
}
",
                        "name": "discriminant.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { discriminant, type Discriminant } from \\"./discriminant\\";
export {
    type inferParsedDiscriminant,
    type inferParsedUnion,
    type inferRawDiscriminant,
    type inferRawUnion,
    type UnionSubtypes,
} from \\"./types\\";
export { union } from \\"./union\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { inferParsedObject, inferRawObject, ObjectSchema } from \\"../object\\";
import { Discriminant } from \\"./discriminant\\";

export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
    [K in DiscriminantValues]: ObjectSchema<any, any>;
};

export type inferRawUnion<D extends string | Discriminant<any, any>, U extends UnionSubtypes<keyof U>> = {
    [K in keyof U]: Record<inferRawDiscriminant<D>, K> & inferRawObject<U[K]>;
}[keyof U];

export type inferParsedUnion<D extends string | Discriminant<any, any>, U extends UnionSubtypes<keyof U>> = {
    [K in keyof U]: Record<inferParsedDiscriminant<D>, K> & inferParsedObject<U[K]>;
}[keyof U];

export type inferRawDiscriminant<D extends string | Discriminant<any, any>> = D extends string
    ? D
    : D extends Discriminant<infer Raw, any>
    ? Raw
    : never;

export type inferParsedDiscriminant<D extends string | Discriminant<any, any>> = D extends string
    ? D
    : D extends Discriminant<any, infer Parsed>
    ? Parsed
    : never;
",
                        "name": "types.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { BaseSchema, MaybeValid, SchemaType } from \\"../../Schema\\";
import { isPlainObject, NOT_AN_OBJECT_ERROR_MESSAGE } from \\"../../utils/isPlainObject\\";
import { keys } from \\"../../utils/keys\\";
import { MaybePromise } from \\"../../utils/MaybePromise\\";
import { enum_ } from \\"../enum\\";
import { ObjectSchema } from \\"../object\\";
import { getObjectLikeUtils, ObjectLikeSchema } from \\"../object-like\\";
import { getSchemaUtils } from \\"../schema-utils\\";
import { Discriminant } from \\"./discriminant\\";
import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from \\"./types\\";

export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
    discriminant: D,
    union: U
): ObjectLikeSchema<inferRawUnion<D, U>, inferParsedUnion<D, U>> {
    const rawDiscriminant =
        typeof discriminant === \\"string\\" ? discriminant : (discriminant.rawDiscriminant as inferRawDiscriminant<D>);
    const parsedDiscriminant =
        typeof discriminant === \\"string\\"
            ? discriminant
            : (discriminant.parsedDiscriminant as inferParsedDiscriminant<D>);

    const discriminantValueSchema = enum_(keys(union) as string[]);

    const baseSchema: BaseSchema<inferRawUnion<D, U>, inferParsedUnion<D, U>> = {
        parse: async (raw, opts) => {
            return transformAndValidateUnion(
                raw,
                rawDiscriminant,
                parsedDiscriminant,
                (discriminantValue) => discriminantValueSchema.parse(discriminantValue, opts),
                (discriminantValue) => union[discriminantValue],
                opts?.allowUnknownKeys ?? false,
                (additionalProperties, additionalPropertiesSchema) =>
                    additionalPropertiesSchema.parse(additionalProperties, opts)
            );
        },
        json: async (parsed, opts) => {
            return transformAndValidateUnion(
                parsed,
                parsedDiscriminant,
                rawDiscriminant,
                (discriminantValue) => discriminantValueSchema.json(discriminantValue, opts),
                (discriminantValue) => union[discriminantValue],
                opts?.allowUnknownKeys ?? false,
                (additionalProperties, additionalPropertiesSchema) =>
                    additionalPropertiesSchema.json(additionalProperties, opts)
            );
        },
        getType: () => SchemaType.UNION,
    };

    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
        ...getObjectLikeUtils(baseSchema),
    };
}

async function transformAndValidateUnion<
    TransformedDiscriminant extends string,
    TransformedDiscriminantValue extends string,
    TransformedAdditionalProperties
>(
    value: unknown,
    discriminant: string,
    transformedDiscriminant: TransformedDiscriminant,
    transformDiscriminantValue: (discriminantValue: unknown) => MaybePromise<MaybeValid<TransformedDiscriminantValue>>,
    getAdditionalPropertiesSchema: (discriminantValue: string) => ObjectSchema<any, any> | undefined,
    allowUnknownKeys: boolean,
    transformAdditionalProperties: (
        additionalProperties: unknown,
        additionalPropertiesSchema: ObjectSchema<any, any>
    ) => MaybePromise<MaybeValid<TransformedAdditionalProperties>>
): Promise<
    MaybeValid<Record<TransformedDiscriminant, TransformedDiscriminantValue> & TransformedAdditionalProperties>
> {
    if (!isPlainObject(value)) {
        return {
            ok: false,
            errors: [
                {
                    path: [],
                    message: NOT_AN_OBJECT_ERROR_MESSAGE,
                },
            ],
        };
    }

    const { [discriminant]: discriminantValue, ...additionalProperties } = value;

    if (discriminantValue == null) {
        return {
            ok: false,
            errors: [
                {
                    path: [],
                    message: \`Missing discriminant (\\"\${discriminant}\\")\`,
                },
            ],
        };
    }

    const transformedDiscriminantValue = await transformDiscriminantValue(discriminantValue);
    if (!transformedDiscriminantValue.ok) {
        return {
            ok: false,
            errors: transformedDiscriminantValue.errors.map((error) => ({
                path: [discriminant, ...error.path],
                message: error.message,
            })),
        };
    }

    const additionalPropertiesSchema = getAdditionalPropertiesSchema(transformedDiscriminantValue.value);

    if (additionalPropertiesSchema == null) {
        if (allowUnknownKeys) {
            return {
                ok: true,
                value: {
                    [transformedDiscriminant]: transformedDiscriminantValue.value,
                    ...additionalProperties,
                } as Record<TransformedDiscriminant, TransformedDiscriminantValue> & TransformedAdditionalProperties,
            };
        } else {
            return {
                ok: false,
                errors: [
                    {
                        path: [discriminant],
                        message: \\"Unrecognized discriminant value\\",
                    },
                ],
            };
        }
    }

    const transformedAdditionalProperties = await transformAdditionalProperties(
        additionalProperties,
        additionalPropertiesSchema
    );
    if (!transformedAdditionalProperties.ok) {
        return transformedAdditionalProperties;
    }

    return {
        ok: true,
        value: {
            [transformedDiscriminant]: discriminantValue,
            ...transformedAdditionalProperties.value,
        } as Record<TransformedDiscriminant, TransformedDiscriminantValue> & TransformedAdditionalProperties,
    };
}
",
                        "name": "union.ts",
                        "type": "file",
                      },
                    ],
                    "name": "union",
                    "type": "directory",
                  },
                ],
                "name": "builders",
                "type": "directory",
              },
              Object {
                "contents": "export * from \\"./builders\\";
export { type inferParsed, type inferRaw, type Schema, type SchemaOptions } from \\"./Schema\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export type MaybePromise<T> = T | Promise<T>;
",
                    "name": "MaybePromise.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type OptionalRecord<K extends string | number, V> = Record<K, V | undefined>;
",
                    "name": "OptionalRecord.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type addQuestionMarksToNullableProperties<T> = {
    [K in OptionalKeys<T>]?: T[K];
} & Pick<T, RequiredKeys<T>>;

export type OptionalKeys<T> = {
    [K in keyof T]: undefined extends T[K] ? K : null extends T[K] ? K : never;
}[keyof T];

export type RequiredKeys<T> = {
    [K in keyof T]: undefined extends T[K] ? never : null extends T[K] ? never : K;
}[keyof T];
",
                    "name": "addQuestionMarksToNullableProperties.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { getSchemaUtils } from \\"../builders/schema-utils\\";
import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from \\"../Schema\\";

export function createIdentitySchemaCreator<T>(
    schemaType: SchemaType,
    validate: (value: unknown, opts?: SchemaOptions) => MaybeValid<T>
): () => Schema<T, T> {
    return () => {
        const baseSchema: BaseSchema<T, T> = {
            parse: validate,
            json: validate,
            getType: () => schemaType,
        };

        return {
            ...baseSchema,
            ...getSchemaUtils(baseSchema),
        };
    };
}
",
                    "name": "createIdentitySchemaCreator.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export function entries<T>(object: T): [keyof T, T[keyof T]][] {
    return Object.entries(object) as [keyof T, T[keyof T]][];
}
",
                    "name": "entries.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export function filterObject<T, K extends keyof T>(obj: T, keysToInclude: K[]): Pick<T, K> {
    const keysToIncludeSet = new Set(keysToInclude);
    return Object.entries(obj).reduce((acc, [key, value]) => {
        if (keysToIncludeSet.has(key as K)) {
            acc[key as K] = value;
        }
        return acc;
        // eslint-disable-next-line @typescript-eslint/prefer-reduce-type-parameter
    }, {} as Pick<T, K>);
}
",
                    "name": "filterObject.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export const NOT_AN_OBJECT_ERROR_MESSAGE = \\"Not an object\\";

// borrowed from https://github.com/lodash/lodash/blob/master/isPlainObject.js
export function isPlainObject(value: unknown): value is Record<string, unknown> {
    if (typeof value !== \\"object\\" || value === null) {
        return false;
    }

    if (Object.getPrototypeOf(value) === null) {
        return true;
    }

    let proto = value;
    while (Object.getPrototypeOf(proto) !== null) {
        proto = Object.getPrototypeOf(proto);
    }

    return Object.getPrototypeOf(value) === proto;
}
",
                    "name": "isPlainObject.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export function keys<T>(object: T): (keyof T)[] {
    return Object.keys(object) as (keyof T)[];
}
",
                    "name": "keys.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export function partition<T>(items: readonly T[], predicate: (item: T) => boolean): [T[], T[]] {
    const trueItems: T[] = [],
        falseItems: T[] = [];
    for (const item of items) {
        if (predicate(item)) {
            trueItems.push(item);
        } else {
            falseItems.push(item);
        }
    }
    return [trueItems, falseItems];
}
",
                    "name": "partition.ts",
                    "type": "file",
                  },
                ],
                "name": "utils",
                "type": "directory",
              },
            ],
            "name": "schemas",
            "type": "directory",
          },
        ],
        "name": "core",
        "type": "directory",
      },
      Object {
        "contents": "export * as Fiddle from \\"./api\\";
export { FiddleClient } from \\"./Client\\";
",
        "name": "index.ts",
        "type": "file",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "export * from \\"./resources\\";
",
            "name": "index.ts",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * as remoteGen from \\"./remoteGen\\";
export * from \\"./remoteGen/types\\";
export * from \\"./remoteGen/client/requests\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const Error: core.serialization.Schema<
    serializers.remoteGen.createJob.Error.Raw,
    Fiddle.remoteGen.createJob.Error
> = core.serialization
    .union(\\"error\\", {
        IllegalApiNameError: core.serialization.object({}),
        GeneratorsDoNotExistError: core.serialization.object({
            content: core.serialization.lazyObject(
                async () => (await import(\\"../../..\\")).GeneratorsDoNotExistErrorBodyType
            ),
        }),
        CannotPublishToNpmScope: core.serialization.object({
            content: core.serialization.lazyObject(
                async () => (await import(\\"../../..\\")).CannotPublishToNpmScopeDetails
            ),
        }),
        CannotPublishToMavenGroup: core.serialization.object({
            content: core.serialization.lazyObject(
                async () => (await import(\\"../../..\\")).CannotPublishToMavenGroupDetails
            ),
        }),
        InsufficientPermissions: core.serialization.object({
            content: core.serialization.lazyObject(
                async () => (await import(\\"../../..\\")).InsufficientPermissionsDetails
            ),
        }),
    })
    .transform<Fiddle.remoteGen.createJob.Error>({
        transform: (value) => {
            switch (value.error) {
                case \\"IllegalApiNameError\\":
                    return Fiddle.remoteGen.createJob.Error.illegalApiNameError();
                case \\"GeneratorsDoNotExistError\\":
                    return Fiddle.remoteGen.createJob.Error.generatorsDoNotExistError(value.content);
                case \\"CannotPublishToNpmScope\\":
                    return Fiddle.remoteGen.createJob.Error.cannotPublishToNpmScope(value.content);
                case \\"CannotPublishToMavenGroup\\":
                    return Fiddle.remoteGen.createJob.Error.cannotPublishToMavenGroup(value.content);
                case \\"InsufficientPermissions\\":
                    return Fiddle.remoteGen.createJob.Error.insufficientPermissions(value.content);
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace Error {
    type Raw =
        | Error.IllegalApiNameError
        | Error.GeneratorsDoNotExistError
        | Error.CannotPublishToNpmScope
        | Error.CannotPublishToMavenGroup
        | Error.InsufficientPermissions;

    interface IllegalApiNameError {
        error: \\"IllegalApiNameError\\";
    }

    interface GeneratorsDoNotExistError {
        error: \\"GeneratorsDoNotExistError\\";
        content: serializers.GeneratorsDoNotExistErrorBodyType.Raw;
    }

    interface CannotPublishToNpmScope {
        error: \\"CannotPublishToNpmScope\\";
        content: serializers.CannotPublishToNpmScopeDetails.Raw;
    }

    interface CannotPublishToMavenGroup {
        error: \\"CannotPublishToMavenGroup\\";
        content: serializers.CannotPublishToMavenGroupDetails.Raw;
    }

    interface InsufficientPermissions {
        error: \\"InsufficientPermissions\\";
        content: serializers.InsufficientPermissionsDetails.Raw;
    }
}
",
                        "name": "createJob.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const Error: core.serialization.Schema<
    serializers.remoteGen.createJobV2.Error.Raw,
    Fiddle.remoteGen.createJobV2.Error
> = core.serialization
    .union(\\"error\\", {
        IllegalApiNameError: core.serialization.object({}),
        GeneratorsDoNotExistError: core.serialization.object({
            content: core.serialization.lazyObject(
                async () => (await import(\\"../../..\\")).GeneratorsDoNotExistErrorBodyType
            ),
        }),
        CannotPublishToNpmScope: core.serialization.object({
            content: core.serialization.lazyObject(
                async () => (await import(\\"../../..\\")).CannotPublishToNpmScopeDetails
            ),
        }),
        CannotPublishToMavenGroup: core.serialization.object({
            content: core.serialization.lazyObject(
                async () => (await import(\\"../../..\\")).CannotPublishToMavenGroupDetails
            ),
        }),
        InsufficientPermissions: core.serialization.object({
            content: core.serialization.lazyObject(
                async () => (await import(\\"../../..\\")).InsufficientPermissionsDetails
            ),
        }),
    })
    .transform<Fiddle.remoteGen.createJobV2.Error>({
        transform: (value) => {
            switch (value.error) {
                case \\"IllegalApiNameError\\":
                    return Fiddle.remoteGen.createJobV2.Error.illegalApiNameError();
                case \\"GeneratorsDoNotExistError\\":
                    return Fiddle.remoteGen.createJobV2.Error.generatorsDoNotExistError(value.content);
                case \\"CannotPublishToNpmScope\\":
                    return Fiddle.remoteGen.createJobV2.Error.cannotPublishToNpmScope(value.content);
                case \\"CannotPublishToMavenGroup\\":
                    return Fiddle.remoteGen.createJobV2.Error.cannotPublishToMavenGroup(value.content);
                case \\"InsufficientPermissions\\":
                    return Fiddle.remoteGen.createJobV2.Error.insufficientPermissions(value.content);
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace Error {
    type Raw =
        | Error.IllegalApiNameError
        | Error.GeneratorsDoNotExistError
        | Error.CannotPublishToNpmScope
        | Error.CannotPublishToMavenGroup
        | Error.InsufficientPermissions;

    interface IllegalApiNameError {
        error: \\"IllegalApiNameError\\";
    }

    interface GeneratorsDoNotExistError {
        error: \\"GeneratorsDoNotExistError\\";
        content: serializers.GeneratorsDoNotExistErrorBodyType.Raw;
    }

    interface CannotPublishToNpmScope {
        error: \\"CannotPublishToNpmScope\\";
        content: serializers.CannotPublishToNpmScopeDetails.Raw;
    }

    interface CannotPublishToMavenGroup {
        error: \\"CannotPublishToMavenGroup\\";
        content: serializers.CannotPublishToMavenGroupDetails.Raw;
    }

    interface InsufficientPermissions {
        error: \\"InsufficientPermissions\\";
        content: serializers.InsufficientPermissionsDetails.Raw;
    }
}
",
                        "name": "createJobV2.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const Response: core.serialization.Schema<
    serializers.remoteGen.getJobStatus.Response.Raw,
    Record<Fiddle.RemoteGenTaskId, Fiddle.Task | undefined>
> = core.serialization.record(
    core.serialization.lazy(async () => (await import(\\"../../..\\")).RemoteGenTaskId),
    core.serialization.lazyObject(async () => (await import(\\"../../..\\")).Task).optional()
);

export declare namespace Response {
    type Raw = Record<serializers.RemoteGenTaskId.Raw, serializers.Task.Raw | null | undefined>;
}
",
                        "name": "getJobStatus.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export * as createJob from \\"./createJob\\";
export * as createJobV2 from \\"./createJobV2\\";
export * as getJobStatus from \\"./getJobStatus\\";
export * from \\"./requests\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": Array [
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../../core\\";

export const CreateJobRequest: core.serialization.Schema<serializers.CreateJobRequest.Raw, Fiddle.CreateJobRequest> =
    core.serialization.object({
        apiName: core.serialization.string(),
        organizationName: core.serialization.string(),
        version: core.serialization.string().optional(),
        generators: core.serialization.list(
            core.serialization.lazyObject(async () => (await import(\\"../../../..\\")).GeneratorConfig)
        ),
    });

export declare namespace CreateJobRequest {
    interface Raw {
        apiName: string;
        organizationName: string;
        version?: string | null;
        generators: serializers.GeneratorConfig.Raw[];
    }
}
",
                            "name": "CreateJobRequest.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../../core\\";

export const CreateJobRequestV2: core.serialization.Schema<
    serializers.CreateJobRequestV2.Raw,
    Fiddle.CreateJobRequestV2
> = core.serialization.object({
    apiName: core.serialization.string(),
    organizationName: core.serialization.string(),
    version: core.serialization.string().optional(),
    generators: core.serialization.list(
        core.serialization.lazyObject(async () => (await import(\\"../../../..\\")).GeneratorConfigV2)
    ),
    uploadToS3: core.serialization.boolean().optional(),
});

export declare namespace CreateJobRequestV2 {
    interface Raw {
        apiName: string;
        organizationName: string;
        version?: string | null;
        generators: serializers.GeneratorConfigV2.Raw[];
        uploadToS3?: boolean | null;
    }
}
",
                            "name": "CreateJobRequestV2.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "export { CreateJobRequest } from \\"./CreateJobRequest\\";
export { CreateJobRequestV2 } from \\"./CreateJobRequestV2\\";
",
                            "name": "index.ts",
                            "type": "file",
                          },
                        ],
                        "name": "requests",
                        "type": "directory",
                      },
                    ],
                    "name": "client",
                    "type": "directory",
                  },
                  Object {
                    "contents": "export * from \\"./types\\";
export * from \\"./client\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const CannotPublishToMavenGroupDetails: core.serialization.ObjectSchema<
    serializers.CannotPublishToMavenGroupDetails.Raw,
    Fiddle.CannotPublishToMavenGroupDetails
> = core.serialization.object({
    generatorId: core.serialization.string(),
    invalidGroup: core.serialization.string(),
    validGroup: core.serialization.string(),
});

export declare namespace CannotPublishToMavenGroupDetails {
    interface Raw {
        generatorId: string;
        invalidGroup: string;
        validGroup: string;
    }
}
",
                        "name": "CannotPublishToMavenGroupDetails.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const CannotPublishToNpmScopeDetails: core.serialization.ObjectSchema<
    serializers.CannotPublishToNpmScopeDetails.Raw,
    Fiddle.CannotPublishToNpmScopeDetails
> = core.serialization.object({
    generatorId: core.serialization.string(),
    invalidScope: core.serialization.string(),
    validScope: core.serialization.string(),
});

export declare namespace CannotPublishToNpmScopeDetails {
    interface Raw {
        generatorId: string;
        invalidScope: string;
        validScope: string;
    }
}
",
                        "name": "CannotPublishToNpmScopeDetails.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const CreateJobResponse: core.serialization.ObjectSchema<
    serializers.CreateJobResponse.Raw,
    Fiddle.CreateJobResponse
> = core.serialization.object({
    jobId: core.serialization.lazy(async () => (await import(\\"../../..\\")).RemoteGenJobId),
    taskIds: core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../..\\")).RemoteGenTaskId)),
});

export declare namespace CreateJobResponse {
    interface Raw {
        jobId: serializers.RemoteGenJobId.Raw;
        taskIds: serializers.RemoteGenTaskId.Raw[];
    }
}
",
                        "name": "CreateJobResponse.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const FailedTaskStatus: core.serialization.ObjectSchema<
    serializers.FailedTaskStatus.Raw,
    Fiddle.FailedTaskStatus
> = core.serialization.object({
    message: core.serialization.string(),
    s3PreSignedReadUrl: core.serialization.string().optional(),
});

export declare namespace FailedTaskStatus {
    interface Raw {
        message: string;
        s3PreSignedReadUrl?: string | null;
    }
}
",
                        "name": "FailedTaskStatus.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const FinishedTaskStatus: core.serialization.ObjectSchema<
    serializers.FinishedTaskStatus.Raw,
    Fiddle.FinishedTaskStatus
> = core.serialization.object({
    hasFilesToDownload: core.serialization.boolean(),
    s3PreSignedReadUrl: core.serialization.string(),
    s3PreSignedReadUrlV2: core.serialization.string().optional(),
});

export declare namespace FinishedTaskStatus {
    interface Raw {
        hasFilesToDownload: boolean;
        s3PreSignedReadUrl: string;
        s3PreSignedReadUrlV2?: string | null;
    }
}
",
                        "name": "FinishedTaskStatus.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const GeneratorConfig: core.serialization.ObjectSchema<serializers.GeneratorConfig.Raw, Fiddle.GeneratorConfig> =
    core.serialization.object({
        id: core.serialization.string(),
        version: core.serialization.string(),
        customConfig: core.serialization.unknown(),
        willDownloadFiles: core.serialization.boolean(),
        outputs: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).GeneratorOutputs),
    });

export declare namespace GeneratorConfig {
    interface Raw {
        id: string;
        version: string;
        customConfig?: unknown;
        willDownloadFiles: boolean;
        outputs: serializers.GeneratorOutputs.Raw;
    }
}
",
                        "name": "GeneratorConfig.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const GeneratorConfigV2: core.serialization.ObjectSchema<
    serializers.GeneratorConfigV2.Raw,
    Fiddle.GeneratorConfigV2
> = core.serialization.object({
    id: core.serialization.string(),
    version: core.serialization.string(),
    customConfig: core.serialization.unknown(),
    outputMode: core.serialization.lazy(async () => (await import(\\"../../..\\")).OutputMode),
});

export declare namespace GeneratorConfigV2 {
    interface Raw {
        id: string;
        version: string;
        customConfig?: unknown;
        outputMode: serializers.OutputMode.Raw;
    }
}
",
                        "name": "GeneratorConfigV2.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const GeneratorIdAndVersion: core.serialization.ObjectSchema<
    serializers.GeneratorIdAndVersion.Raw,
    Fiddle.GeneratorIdAndVersion
> = core.serialization.object({
    id: core.serialization.string(),
    version: core.serialization.string(),
});

export declare namespace GeneratorIdAndVersion {
    interface Raw {
        id: string;
        version: string;
    }
}
",
                        "name": "GeneratorIdAndVersion.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const GeneratorOutputs: core.serialization.ObjectSchema<
    serializers.GeneratorOutputs.Raw,
    Fiddle.GeneratorOutputs
> = core.serialization.object({
    npm: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).NpmOutput).optional(),
    maven: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).MavenOutput).optional(),
});

export declare namespace GeneratorOutputs {
    interface Raw {
        npm?: serializers.NpmOutput.Raw | null;
        maven?: serializers.MavenOutput.Raw | null;
    }
}
",
                        "name": "GeneratorOutputs.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const GeneratorsDoNotExistErrorBodyType: core.serialization.ObjectSchema<
    serializers.GeneratorsDoNotExistErrorBodyType.Raw,
    Fiddle.GeneratorsDoNotExistErrorBodyType
> = core.serialization.object({
    nonExistentGenerators: core.serialization.list(
        core.serialization.lazyObject(async () => (await import(\\"../../..\\")).GeneratorIdAndVersion)
    ),
});

export declare namespace GeneratorsDoNotExistErrorBodyType {
    interface Raw {
        nonExistentGenerators: serializers.GeneratorIdAndVersion.Raw[];
    }
}
",
                        "name": "GeneratorsDoNotExistErrorBodyType.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const GithubOutputMode: core.serialization.ObjectSchema<
    serializers.GithubOutputMode.Raw,
    Fiddle.GithubOutputMode
> = core.serialization.object({
    owner: core.serialization.string(),
    repo: core.serialization.string(),
    publishInfo: core.serialization.lazy(async () => (await import(\\"../../..\\")).GithubPublishInfo).optional(),
});

export declare namespace GithubOutputMode {
    interface Raw {
        owner: string;
        repo: string;
        publishInfo?: serializers.GithubPublishInfo.Raw | null;
    }
}
",
                        "name": "GithubOutputMode.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const GithubPublishInfo: core.serialization.Schema<serializers.GithubPublishInfo.Raw, Fiddle.GithubPublishInfo> =
    core.serialization
        .union(\\"type\\", {
            npm: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).NpmOutputWithOptionalToken),
            maven: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).MavenOutputWithOptionalCreds),
            postman: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).PostmanOutput),
        })
        .transform<Fiddle.GithubPublishInfo>({
            transform: (value) => {
                switch (value.type) {
                    case \\"npm\\":
                        return Fiddle.GithubPublishInfo.npm(value);
                    case \\"maven\\":
                        return Fiddle.GithubPublishInfo.maven(value);
                    case \\"postman\\":
                        return Fiddle.GithubPublishInfo.postman(value);
                    default:
                        return Fiddle.GithubPublishInfo._unknown(value);
                }
            },
            untransform: ({ _visit, ...value }) => value as any,
        });

export declare namespace GithubPublishInfo {
    type Raw = GithubPublishInfo.Npm | GithubPublishInfo.Maven | GithubPublishInfo.Postman;

    interface Npm extends serializers.NpmOutputWithOptionalToken.Raw {
        type: \\"npm\\";
    }

    interface Maven extends serializers.MavenOutputWithOptionalCreds.Raw {
        type: \\"maven\\";
    }

    interface Postman extends serializers.PostmanOutput.Raw {
        type: \\"postman\\";
    }
}
",
                        "name": "GithubPublishInfo.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const InsufficientPermissionsDetails: core.serialization.ObjectSchema<
    serializers.InsufficientPermissionsDetails.Raw,
    Fiddle.InsufficientPermissionsDetails
> = core.serialization.object({
    dummy: core.serialization.string().optional(),
});

export declare namespace InsufficientPermissionsDetails {
    interface Raw {
        dummy?: string | null;
    }
}
",
                        "name": "InsufficientPermissionsDetails.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const LogLevel: core.serialization.Schema<serializers.LogLevel.Raw, Fiddle.LogLevel> = core.serialization.enum_([
    \\"DEBUG\\",
    \\"INFO\\",
    \\"WARN\\",
    \\"ERROR\\",
]);

export declare namespace LogLevel {
    type Raw = \\"DEBUG\\" | \\"INFO\\" | \\"WARN\\" | \\"ERROR\\";
}
",
                        "name": "LogLevel.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const MavenCoordinate: core.serialization.ObjectSchema<serializers.MavenCoordinate.Raw, Fiddle.MavenCoordinate> =
    core.serialization.object({
        group: core.serialization.string(),
        artifact: core.serialization.string(),
        version: core.serialization.string(),
    });

export declare namespace MavenCoordinate {
    interface Raw {
        group: string;
        artifact: string;
        version: string;
    }
}
",
                        "name": "MavenCoordinate.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const MavenOutput: core.serialization.ObjectSchema<serializers.MavenOutput.Raw, Fiddle.MavenOutput> =
    core.serialization.object({
        registryUrl: core.serialization.string(),
        username: core.serialization.string(),
        password: core.serialization.string(),
        coordinate: core.serialization.string(),
    });

export declare namespace MavenOutput {
    interface Raw {
        registryUrl: string;
        username: string;
        password: string;
        coordinate: string;
    }
}
",
                        "name": "MavenOutput.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const MavenOutputWithOptionalCreds: core.serialization.ObjectSchema<
    serializers.MavenOutputWithOptionalCreds.Raw,
    Fiddle.MavenOutputWithOptionalCreds
> = core.serialization.object({
    registryUrl: core.serialization.string(),
    coordinate: core.serialization.string(),
    credentials: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).UsernamePassword).optional(),
});

export declare namespace MavenOutputWithOptionalCreds {
    interface Raw {
        registryUrl: string;
        coordinate: string;
        credentials?: serializers.UsernamePassword.Raw | null;
    }
}
",
                        "name": "MavenOutputWithOptionalCreds.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const NpmCoordinate: core.serialization.ObjectSchema<serializers.NpmCoordinate.Raw, Fiddle.NpmCoordinate> =
    core.serialization.object({
        name: core.serialization.string(),
        version: core.serialization.string(),
    });

export declare namespace NpmCoordinate {
    interface Raw {
        name: string;
        version: string;
    }
}
",
                        "name": "NpmCoordinate.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const NpmOutput: core.serialization.ObjectSchema<serializers.NpmOutput.Raw, Fiddle.NpmOutput> =
    core.serialization.object({
        registryUrl: core.serialization.string(),
        packageName: core.serialization.string(),
        token: core.serialization.string(),
    });

export declare namespace NpmOutput {
    interface Raw {
        registryUrl: string;
        packageName: string;
        token: string;
    }
}
",
                        "name": "NpmOutput.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const NpmOutputWithOptionalToken: core.serialization.ObjectSchema<
    serializers.NpmOutputWithOptionalToken.Raw,
    Fiddle.NpmOutputWithOptionalToken
> = core.serialization.object({
    registryUrl: core.serialization.string(),
    packageName: core.serialization.string(),
    token: core.serialization.string().optional(),
});

export declare namespace NpmOutputWithOptionalToken {
    interface Raw {
        registryUrl: string;
        packageName: string;
        token?: string | null;
    }
}
",
                        "name": "NpmOutputWithOptionalToken.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const OutputMode: core.serialization.Schema<serializers.OutputMode.Raw, Fiddle.OutputMode> = core.serialization
    .union(\\"type\\", {
        publish: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).PublishOutputMode),
        publishV2: core.serialization.object({
            publishV2: core.serialization.lazy(async () => (await import(\\"../../..\\")).PublishOutputModeV2),
        }),
        downloadFiles: core.serialization.object({}),
        github: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).GithubOutputMode),
    })
    .transform<Fiddle.OutputMode>({
        transform: (value) => {
            switch (value.type) {
                case \\"publish\\":
                    return Fiddle.OutputMode.publish(value);
                case \\"publishV2\\":
                    return Fiddle.OutputMode.publishV2(value.publishV2);
                case \\"downloadFiles\\":
                    return Fiddle.OutputMode.downloadFiles();
                case \\"github\\":
                    return Fiddle.OutputMode.github(value);
                default:
                    return Fiddle.OutputMode._unknown(value);
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace OutputMode {
    type Raw = OutputMode.Publish | OutputMode.PublishV2 | OutputMode.DownloadFiles | OutputMode.Github;

    interface Publish extends serializers.PublishOutputMode.Raw {
        type: \\"publish\\";
    }

    interface PublishV2 {
        type: \\"publishV2\\";
        publishV2: serializers.PublishOutputModeV2.Raw;
    }

    interface DownloadFiles {
        type: \\"downloadFiles\\";
    }

    interface Github extends serializers.GithubOutputMode.Raw {
        type: \\"github\\";
    }
}
",
                        "name": "OutputMode.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const Package: core.serialization.ObjectSchema<serializers.Package.Raw, Fiddle.Package> =
    core.serialization.object({
        coordinate: core.serialization.lazy(async () => (await import(\\"../../..\\")).PackageCoordinate),
        status: core.serialization.lazy(async () => (await import(\\"../../..\\")).PackagePublishStatus),
    });

export declare namespace Package {
    interface Raw {
        coordinate: serializers.PackageCoordinate.Raw;
        status: serializers.PackagePublishStatus.Raw;
    }
}
",
                        "name": "Package.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const PackageCoordinate: core.serialization.Schema<serializers.PackageCoordinate.Raw, Fiddle.PackageCoordinate> =
    core.serialization
        .union(core.serialization.discriminant(\\"type\\", \\"_type\\"), {
            npm: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).NpmCoordinate),
            maven: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).MavenCoordinate),
            pypi: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).PypiCoordinate),
        })
        .transform<Fiddle.PackageCoordinate>({
            transform: (value) => {
                switch (value.type) {
                    case \\"npm\\":
                        return Fiddle.PackageCoordinate.npm(value);
                    case \\"maven\\":
                        return Fiddle.PackageCoordinate.maven(value);
                    case \\"pypi\\":
                        return Fiddle.PackageCoordinate.pypi(value);
                    default:
                        return Fiddle.PackageCoordinate._unknown(value);
                }
            },
            untransform: ({ _visit, ...value }) => value as any,
        });

export declare namespace PackageCoordinate {
    type Raw = PackageCoordinate.Npm | PackageCoordinate.Maven | PackageCoordinate.Pypi;

    interface Npm extends serializers.NpmCoordinate.Raw {
        _type: \\"npm\\";
    }

    interface Maven extends serializers.MavenCoordinate.Raw {
        _type: \\"maven\\";
    }

    interface Pypi extends serializers.PypiCoordinate.Raw {
        _type: \\"pypi\\";
    }
}
",
                        "name": "PackageCoordinate.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const PackagePublishStatus: core.serialization.Schema<
    serializers.PackagePublishStatus.Raw,
    Fiddle.PackagePublishStatus
> = core.serialization.enum_([\\"NOT_STARTED_PUBLISHING\\", \\"PUBLISHING\\", \\"PUBLISHED\\", \\"FAILED_TO_PUBLISH\\"]);

export declare namespace PackagePublishStatus {
    type Raw = \\"NOT_STARTED_PUBLISHING\\" | \\"PUBLISHING\\" | \\"PUBLISHED\\" | \\"FAILED_TO_PUBLISH\\";
}
",
                        "name": "PackagePublishStatus.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const PostmanOutput: core.serialization.ObjectSchema<serializers.PostmanOutput.Raw, Fiddle.PostmanOutput> =
    core.serialization.object({
        apiKey: core.serialization.string(),
        workspaceId: core.serialization.string(),
    });

export declare namespace PostmanOutput {
    interface Raw {
        apiKey: string;
        workspaceId: string;
    }
}
",
                        "name": "PostmanOutput.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const PublishOutputMode: core.serialization.ObjectSchema<
    serializers.PublishOutputMode.Raw,
    Fiddle.PublishOutputMode
> = core.serialization.object({
    registryOverrides: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).RegistryOverrides),
});

export declare namespace PublishOutputMode {
    interface Raw {
        registryOverrides: serializers.RegistryOverrides.Raw;
    }
}
",
                        "name": "PublishOutputMode.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const PublishOutputModeV2: core.serialization.Schema<
    serializers.PublishOutputModeV2.Raw,
    Fiddle.PublishOutputModeV2
> = core.serialization
    .union(\\"type\\", {
        npmOverride: core.serialization.object({
            npmOverride: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).NpmOutput).optional(),
        }),
        mavenOverride: core.serialization.object({
            mavenOverride: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).MavenOutput).optional(),
        }),
        postman: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).PostmanOutput),
    })
    .transform<Fiddle.PublishOutputModeV2>({
        transform: (value) => {
            switch (value.type) {
                case \\"npmOverride\\":
                    return Fiddle.PublishOutputModeV2.npmOverride(value.npmOverride);
                case \\"mavenOverride\\":
                    return Fiddle.PublishOutputModeV2.mavenOverride(value.mavenOverride);
                case \\"postman\\":
                    return Fiddle.PublishOutputModeV2.postman(value);
                default:
                    return Fiddle.PublishOutputModeV2._unknown(value);
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace PublishOutputModeV2 {
    type Raw = PublishOutputModeV2.NpmOverride | PublishOutputModeV2.MavenOverride | PublishOutputModeV2.Postman;

    interface NpmOverride {
        type: \\"npmOverride\\";
        npmOverride?: serializers.NpmOutput.Raw | null;
    }

    interface MavenOverride {
        type: \\"mavenOverride\\";
        mavenOverride?: serializers.MavenOutput.Raw | null;
    }

    interface Postman extends serializers.PostmanOutput.Raw {
        type: \\"postman\\";
    }
}
",
                        "name": "PublishOutputModeV2.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const PypiCoordinate: core.serialization.ObjectSchema<serializers.PypiCoordinate.Raw, Fiddle.PypiCoordinate> =
    core.serialization.object({
        name: core.serialization.string(),
        version: core.serialization.string(),
    });

export declare namespace PypiCoordinate {
    interface Raw {
        name: string;
        version: string;
    }
}
",
                        "name": "PypiCoordinate.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const RegistryOverrides: core.serialization.ObjectSchema<
    serializers.RegistryOverrides.Raw,
    Fiddle.RegistryOverrides
> = core.serialization.object({
    npm: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).NpmOutput).optional(),
    maven: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).MavenOutput).optional(),
});

export declare namespace RegistryOverrides {
    interface Raw {
        npm?: serializers.NpmOutput.Raw | null;
        maven?: serializers.MavenOutput.Raw | null;
    }
}
",
                        "name": "RegistryOverrides.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const RemoteGenJobId: core.serialization.Schema<serializers.RemoteGenJobId.Raw, Fiddle.RemoteGenJobId> =
    core.serialization.string().transform({
        transform: Fiddle.RemoteGenJobId,
        untransform: (value) => value,
    });

export declare namespace RemoteGenJobId {
    type Raw = string;
}
",
                        "name": "RemoteGenJobId.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const RemoteGenTaskId: core.serialization.Schema<serializers.RemoteGenTaskId.Raw, Fiddle.RemoteGenTaskId> =
    core.serialization.string().transform({
        transform: Fiddle.RemoteGenTaskId,
        untransform: (value) => value,
    });

export declare namespace RemoteGenTaskId {
    type Raw = string;
}
",
                        "name": "RemoteGenTaskId.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const Task: core.serialization.ObjectSchema<serializers.Task.Raw, Fiddle.Task> = core.serialization.object({
    status: core.serialization.lazy(async () => (await import(\\"../../..\\")).TaskStatus),
    packages: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).Package)),
    logs: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TaskLog)),
});

export declare namespace Task {
    interface Raw {
        status: serializers.TaskStatus.Raw;
        packages: serializers.Package.Raw[];
        logs: serializers.TaskLog.Raw[];
    }
}
",
                        "name": "Task.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const TaskLog: core.serialization.ObjectSchema<serializers.TaskLog.Raw, Fiddle.TaskLog> =
    core.serialization.object({
        level: core.serialization.lazy(async () => (await import(\\"../../..\\")).LogLevel),
        message: core.serialization.string(),
    });

export declare namespace TaskLog {
    interface Raw {
        level: serializers.LogLevel.Raw;
        message: string;
    }
}
",
                        "name": "TaskLog.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const TaskStatus: core.serialization.Schema<serializers.TaskStatus.Raw, Fiddle.TaskStatus> = core.serialization
    .union(core.serialization.discriminant(\\"type\\", \\"_type\\"), {
        notStarted: core.serialization.object({}),
        running: core.serialization.object({}),
        failed: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).FailedTaskStatus),
        finished: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).FinishedTaskStatus),
    })
    .transform<Fiddle.TaskStatus>({
        transform: (value) => {
            switch (value.type) {
                case \\"notStarted\\":
                    return Fiddle.TaskStatus.notStarted();
                case \\"running\\":
                    return Fiddle.TaskStatus.running();
                case \\"failed\\":
                    return Fiddle.TaskStatus.failed(value);
                case \\"finished\\":
                    return Fiddle.TaskStatus.finished(value);
                default:
                    return Fiddle.TaskStatus._unknown(value);
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace TaskStatus {
    type Raw = TaskStatus.NotStarted | TaskStatus.Running | TaskStatus.Failed | TaskStatus.Finished;

    interface NotStarted {
        _type: \\"notStarted\\";
    }

    interface Running {
        _type: \\"running\\";
    }

    interface Failed extends serializers.FailedTaskStatus.Raw {
        _type: \\"failed\\";
    }

    interface Finished extends serializers.FinishedTaskStatus.Raw {
        _type: \\"finished\\";
    }
}
",
                        "name": "TaskStatus.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { Fiddle } from \\"@fern-fern/fiddle-sdk\\";
import * as core from \\"../../../../core\\";

export const UsernamePassword: core.serialization.ObjectSchema<
    serializers.UsernamePassword.Raw,
    Fiddle.UsernamePassword
> = core.serialization.object({
    username: core.serialization.string(),
    password: core.serialization.string(),
});

export declare namespace UsernamePassword {
    interface Raw {
        username: string;
        password: string;
    }
}
",
                        "name": "UsernamePassword.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export * from \\"./RemoteGenJobId\\";
export * from \\"./RemoteGenTaskId\\";
export * from \\"./GeneratorIdAndVersion\\";
export * from \\"./GeneratorConfig\\";
export * from \\"./GeneratorConfigV2\\";
export * from \\"./OutputMode\\";
export * from \\"./PublishOutputMode\\";
export * from \\"./PublishOutputModeV2\\";
export * from \\"./RegistryOverrides\\";
export * from \\"./GeneratorOutputs\\";
export * from \\"./NpmOutput\\";
export * from \\"./MavenOutput\\";
export * from \\"./PostmanOutput\\";
export * from \\"./GithubOutputMode\\";
export * from \\"./GithubPublishInfo\\";
export * from \\"./NpmOutputWithOptionalToken\\";
export * from \\"./MavenOutputWithOptionalCreds\\";
export * from \\"./UsernamePassword\\";
export * from \\"./Task\\";
export * from \\"./TaskStatus\\";
export * from \\"./FailedTaskStatus\\";
export * from \\"./FinishedTaskStatus\\";
export * from \\"./TaskLog\\";
export * from \\"./LogLevel\\";
export * from \\"./Package\\";
export * from \\"./PackagePublishStatus\\";
export * from \\"./PackageCoordinate\\";
export * from \\"./NpmCoordinate\\";
export * from \\"./MavenCoordinate\\";
export * from \\"./PypiCoordinate\\";
export * from \\"./CreateJobResponse\\";
export * from \\"./GeneratorsDoNotExistErrorBodyType\\";
export * from \\"./CannotPublishToNpmScopeDetails\\";
export * from \\"./CannotPublishToMavenGroupDetails\\";
export * from \\"./InsufficientPermissionsDetails\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                    ],
                    "name": "types",
                    "type": "directory",
                  },
                ],
                "name": "remoteGen",
                "type": "directory",
              },
            ],
            "name": "resources",
            "type": "directory",
          },
        ],
        "name": "serialization",
        "type": "directory",
      },
    ],
    "name": "src",
    "type": "directory",
  },
  Object {
    "contents": "{
    \\"compilerOptions\\": {
        \\"strict\\": true,
        \\"target\\": \\"esnext\\",
        \\"module\\": \\"esnext\\",
        \\"moduleResolution\\": \\"node\\",
        \\"esModuleInterop\\": true,
        \\"skipLibCheck\\": true,
        \\"declaration\\": true,
        \\"emitDeclarationOnly\\": true,
        \\"sourceMap\\": true,
        \\"noUnusedLocals\\": true,
        \\"noUnusedParameters\\": true,
        \\"outDir\\": \\"types\\",
        \\"rootDir\\": \\"src\\",
        \\"baseUrl\\": \\"src\\",
        \\"paths\\": {
            \\"@fern-fern/fiddle-sdk\\": [
                \\".\\"
            ]
        }
    },
    \\"include\\": [
        \\"src\\"
    ],
    \\"exclude\\": []
}",
    "name": "tsconfig.json",
    "type": "file",
  },
]
`;

exports[`runGenerator nursery-property-discriminant 1`] = `
Array [
  Object {
    "contents": Array [
      Object {
        "contents": Array [
          Object {
            "contents": "name: ci

on: [push]

jobs:
  compile:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up node
        uses: actions/setup-node@v3

      - name: Compile
        run: yarn && yarn build
  
  publish:
    needs: [ compile ]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up node
        uses: actions/setup-node@v3

      - name: Install dependencies
        run: yarn install

      - name: Build
        run: yarn build

      - name: Publish to npm
        run: |
          npm config set //registry.npmjs.org/:_authToken \${NPM_TOKEN}
          npm publish --ignore-scripts --access restricted
        env:
          NPM_TOKEN: \${{ secrets.NPM_TOKEN }}",
            "name": "ci.yml",
            "type": "file",
          },
        ],
        "name": "workflows",
        "type": "directory",
      },
    ],
    "name": ".github",
    "type": "directory",
  },
  Object {
    "contents": "node_modules
.DS_Store
dist
Client.d.ts
Client.js
environments.d.ts
environments.js
index.d.ts
index.js
api
core
errors
serialization

# yarn berry
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/sdks
!.yarn/versions",
    "name": ".gitignore",
    "type": "file",
  },
  Object {
    "contents": "tabWidth: 4
printWidth: 120
",
    "name": ".prettierrc.yml",
    "type": "file",
  },
  Object {
    "contents": "{
    \\"name\\": \\"@fern/api\\",
    \\"version\\": \\"0.0.1\\",
    \\"private\\": true,
    \\"repository\\": \\"https://github.com/fern/api}\\",
    \\"files\\": [
        \\"./Client.d.ts\\",
        \\"./Client.js\\",
        \\"./environments.d.ts\\",
        \\"./environments.js\\",
        \\"./index.d.ts\\",
        \\"./index.js\\",
        \\"./api\\",
        \\"./core\\",
        \\"./errors\\",
        \\"./serialization\\"
    ],
    \\"main\\": \\"./index.js\\",
    \\"types\\": \\"./index.d.ts\\",
    \\"scripts\\": {
        \\"format\\": \\"prettier --write 'src/**/*.ts'\\",
        \\"build\\": \\"tsc && tsc-alias\\",
        \\"prepack\\": \\"cp -r dist/* .\\"
    },
    \\"dependencies\\": {
        \\"@types/url-join\\": \\"4.0.1\\",
        \\"axios\\": \\"^0.27.2\\",
        \\"url-join\\": \\"4.0.1\\"
    },
    \\"devDependencies\\": {
        \\"@types/node\\": \\"17.0.33\\",
        \\"prettier\\": \\"2.7.1\\",
        \\"tsc-alias\\": \\"1.7.1\\",
        \\"typescript\\": \\"4.6.4\\"
    }
}
",
    "name": "package.json",
    "type": "file",
  },
  Object {
    "contents": Array [
      Object {
        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from \\"./environments\\";
import { FernApi } from \\"@fern/api\\";
import * as core from \\"./core\\";
import * as serializers from \\"./serialization\\";
import * as errors from \\"./errors\\";
import { Client as OwnerClient } from \\"./api/resources/owner/client/Client\\";
import { Client as PackageClient } from \\"./api/resources/package/client/Client\\";
import { Client as TokenClient } from \\"./api/resources/token/client/Client\\";

export declare namespace FernApiClient {
    interface Options {
        environment?: environments.FernApiEnvironment | environments.FernApiEnvironmentUrls;
        apiVersion: string;
    }
}

export class FernApiClient {
    constructor(private readonly options: FernApiClient.Options) {}

    public async getString(): Promise<FernApi.RootString> {
        const _response = await core.fetcher({
            url: (this.options.environment ?? environments.FernApiEnvironment.Production).serverA,
            method: \\"GET\\",
            headers: {
                \\"X-API-Version\\": this.options.apiVersion,
            },
        });
        if (_response.ok) {
            return await serializers.RootString.parseOrThrow(_response.body as serializers.RootString.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === \\"status-code\\") {
            throw new errors.FernApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case \\"non-json\\":
                throw new errors.FernApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case \\"timeout\\":
                throw new errors.FernApiTimeoutError();
            case \\"unknown\\":
                throw new errors.FernApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    private _owner: OwnerClient | undefined;

    public get owner(): OwnerClient {
        return (this._owner ??= new OwnerClient(this.options));
    }

    private _package: PackageClient | undefined;

    public get package(): PackageClient {
        return (this._package ??= new PackageClient(this.options));
    }

    private _token: TokenClient | undefined;

    public get token(): TokenClient {
        return (this._token ??= new TokenClient(this.options));
    }
}
",
        "name": "Client.ts",
        "type": "file",
      },
      Object {
        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface FernApiEnvironmentUrls {
    serverA: string;
    serverB: string;
}

export const FernApiEnvironment = {
    Production: {
        serverA: \\"a.prod.com\\",
        serverB: \\"b.prod.com\\",
    },
    Staging: {
        serverA: \\"a.staging.com\\",
        serverB: \\"b.staging.com\\",
    },
} as const;

export type FernApiEnvironment = typeof FernApiEnvironment.Production | typeof FernApiEnvironment.Staging;
",
        "name": "environments.ts",
        "type": "file",
      },
      Object {
        "contents": "export * as FernApi from \\"./api\\";
export { FernApiClient } from \\"./Client\\";
export { FernApiEnvironment, FernApiEnvironmentUrls } from \\"./environments\\";
export { FernApiError, FernApiTimeoutError } from \\"./errors\\";
",
        "name": "index.ts",
        "type": "file",
      },
    ],
    "name": "src",
    "type": "directory",
  },
  Object {
    "contents": "{
    \\"compilerOptions\\": {
        \\"extendedDiagnostics\\": true,
        \\"strict\\": true,
        \\"target\\": \\"esnext\\",
        \\"module\\": \\"CommonJS\\",
        \\"moduleResolution\\": \\"node\\",
        \\"esModuleInterop\\": true,
        \\"skipLibCheck\\": true,
        \\"declaration\\": true,
        \\"noUnusedLocals\\": true,
        \\"noUnusedParameters\\": true,
        \\"outDir\\": \\"dist\\",
        \\"rootDir\\": \\"src\\",
        \\"baseUrl\\": \\"src\\",
        \\"paths\\": {
            \\"@fern/api\\": [
                \\".\\"
            ]
        }
    },
    \\"include\\": [
        \\"src\\"
    ],
    \\"exclude\\": []
}",
    "name": "tsconfig.json",
    "type": "file",
  },
]
`;

exports[`runGenerator nursery-status-code 1`] = `
Array [
  Object {
    "contents": Array [
      Object {
        "contents": Array [
          Object {
            "contents": "name: ci

on: [push]

jobs:
  compile:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up node
        uses: actions/setup-node@v3

      - name: Compile
        run: yarn && yarn build
  
  publish:
    needs: [ compile ]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up node
        uses: actions/setup-node@v3

      - name: Install dependencies
        run: yarn install

      - name: Build
        run: yarn build

      - name: Publish to npm
        run: |
          npm config set //registry.npmjs.org/:_authToken \${NPM_TOKEN}
          npm publish --ignore-scripts --access restricted
        env:
          NPM_TOKEN: \${{ secrets.NPM_TOKEN }}",
            "name": "ci.yml",
            "type": "file",
          },
        ],
        "name": "workflows",
        "type": "directory",
      },
    ],
    "name": ".github",
    "type": "directory",
  },
  Object {
    "contents": "node_modules
.DS_Store
dist
Client.d.ts
Client.js
environments.d.ts
environments.js
index.d.ts
index.js
api
core
errors
serialization

# yarn berry
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/sdks
!.yarn/versions",
    "name": ".gitignore",
    "type": "file",
  },
  Object {
    "contents": "tabWidth: 4
printWidth: 120
",
    "name": ".prettierrc.yml",
    "type": "file",
  },
  Object {
    "contents": "{
    \\"name\\": \\"@fern/api\\",
    \\"version\\": \\"0.0.1\\",
    \\"private\\": true,
    \\"repository\\": \\"https://github.com/fern/api}\\",
    \\"files\\": [
        \\"./Client.d.ts\\",
        \\"./Client.js\\",
        \\"./environments.d.ts\\",
        \\"./environments.js\\",
        \\"./index.d.ts\\",
        \\"./index.js\\",
        \\"./api\\",
        \\"./core\\",
        \\"./errors\\",
        \\"./serialization\\"
    ],
    \\"main\\": \\"./index.js\\",
    \\"types\\": \\"./index.d.ts\\",
    \\"scripts\\": {
        \\"format\\": \\"prettier --write 'src/**/*.ts'\\",
        \\"build\\": \\"tsc && tsc-alias\\",
        \\"prepack\\": \\"cp -r dist/* .\\"
    },
    \\"dependencies\\": {
        \\"@types/url-join\\": \\"4.0.1\\",
        \\"axios\\": \\"^0.27.2\\",
        \\"url-join\\": \\"4.0.1\\"
    },
    \\"devDependencies\\": {
        \\"@types/node\\": \\"17.0.33\\",
        \\"prettier\\": \\"2.7.1\\",
        \\"tsc-alias\\": \\"1.7.1\\",
        \\"typescript\\": \\"4.6.4\\"
    }
}
",
    "name": "package.json",
    "type": "file",
  },
  Object {
    "contents": Array [
      Object {
        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from \\"./environments\\";
import { FernApi } from \\"@fern/api\\";
import * as core from \\"./core\\";
import * as serializers from \\"./serialization\\";
import * as errors from \\"./errors\\";
import { Client as OwnerClient } from \\"./api/resources/owner/client/Client\\";
import { Client as PackageClient } from \\"./api/resources/package/client/Client\\";
import { Client as TokenClient } from \\"./api/resources/token/client/Client\\";

export declare namespace FernApiClient {
    interface Options {
        environment?: environments.FernApiEnvironment | environments.FernApiEnvironmentUrls;
        apiVersion: string;
    }
}

export class FernApiClient {
    constructor(private readonly options: FernApiClient.Options) {}

    public async getString(): Promise<FernApi.RootString> {
        const _response = await core.fetcher({
            url: (this.options.environment ?? environments.FernApiEnvironment.Production).serverA,
            method: \\"GET\\",
            headers: {
                \\"X-API-Version\\": this.options.apiVersion,
            },
        });
        if (_response.ok) {
            return await serializers.RootString.parseOrThrow(_response.body as serializers.RootString.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === \\"status-code\\") {
            throw new errors.FernApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case \\"non-json\\":
                throw new errors.FernApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case \\"timeout\\":
                throw new errors.FernApiTimeoutError();
            case \\"unknown\\":
                throw new errors.FernApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    private _owner: OwnerClient | undefined;

    public get owner(): OwnerClient {
        return (this._owner ??= new OwnerClient(this.options));
    }

    private _package: PackageClient | undefined;

    public get package(): PackageClient {
        return (this._package ??= new PackageClient(this.options));
    }

    private _token: TokenClient | undefined;

    public get token(): TokenClient {
        return (this._token ??= new TokenClient(this.options));
    }
}
",
        "name": "Client.ts",
        "type": "file",
      },
      Object {
        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface FernApiEnvironmentUrls {
    serverA: string;
    serverB: string;
}

export const FernApiEnvironment = {
    Production: {
        serverA: \\"a.prod.com\\",
        serverB: \\"b.prod.com\\",
    },
    Staging: {
        serverA: \\"a.staging.com\\",
        serverB: \\"b.staging.com\\",
    },
} as const;

export type FernApiEnvironment = typeof FernApiEnvironment.Production | typeof FernApiEnvironment.Staging;
",
        "name": "environments.ts",
        "type": "file",
      },
      Object {
        "contents": "export * as FernApi from \\"./api\\";
export { FernApiClient } from \\"./Client\\";
export { FernApiEnvironment, FernApiEnvironmentUrls } from \\"./environments\\";
export { FernApiError, FernApiTimeoutError } from \\"./errors\\";
",
        "name": "index.ts",
        "type": "file",
      },
    ],
    "name": "src",
    "type": "directory",
  },
  Object {
    "contents": "{
    \\"compilerOptions\\": {
        \\"extendedDiagnostics\\": true,
        \\"strict\\": true,
        \\"target\\": \\"esnext\\",
        \\"module\\": \\"CommonJS\\",
        \\"moduleResolution\\": \\"node\\",
        \\"esModuleInterop\\": true,
        \\"skipLibCheck\\": true,
        \\"declaration\\": true,
        \\"noUnusedLocals\\": true,
        \\"noUnusedParameters\\": true,
        \\"outDir\\": \\"dist\\",
        \\"rootDir\\": \\"src\\",
        \\"baseUrl\\": \\"src\\",
        \\"paths\\": {
            \\"@fern/api\\": [
                \\".\\"
            ]
        }
    },
    \\"include\\": [
        \\"src\\"
    ],
    \\"exclude\\": []
}",
    "name": "tsconfig.json",
    "type": "file",
  },
]
`;

exports[`runGenerator reserved-keywords 1`] = `
Array [
  Object {
    "contents": Array [
      Object {
        "contents": "export * from \\"./resources\\";
",
        "name": "index.d.ts",
        "type": "file",
      },
      Object {
        "contents": "\\"use strict\\";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || (\\"get\\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== \\"default\\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
__exportStar(require(\\"./resources\\"), exports);
",
        "name": "index.js",
        "type": "file",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "export * as package_ from \\"./package\\";
export * from \\"./package/types\\";
",
            "name": "index.d.ts",
            "type": "file",
          },
          Object {
            "contents": "\\"use strict\\";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || (\\"get\\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, \\"default\\", { enumerable: true, value: v });
}) : function(o, v) {
    o[\\"default\\"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== \\"default\\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== \\"default\\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.package_ = void 0;
exports.package_ = __importStar(require(\\"./package\\"));
__exportStar(require(\\"./package/types\\"), exports);
",
            "name": "index.js",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./types\\";
",
                "name": "index.d.ts",
                "type": "file",
              },
              Object {
                "contents": "\\"use strict\\";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || (\\"get\\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== \\"default\\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
__exportStar(require(\\"./types\\"), exports);
",
                "name": "index.js",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface Package {
    name: string;
}
",
                    "name": "Package.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
Object.defineProperty(exports, \\"__esModule\\", { value: true });
",
                    "name": "Package.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./Package\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || (\\"get\\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== \\"default\\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
__exportStar(require(\\"./Package\\"), exports);
",
                    "name": "index.js",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "package",
            "type": "directory",
          },
        ],
        "name": "resources",
        "type": "directory",
      },
    ],
    "name": "api",
    "type": "directory",
  },
  Object {
    "contents": Array [
      Object {
        "contents": "export * as serialization from \\"./schemas\\";
",
        "name": "index.d.ts",
        "type": "file",
      },
      Object {
        "contents": "\\"use strict\\";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || (\\"get\\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, \\"default\\", { enumerable: true, value: v });
}) : function(o, v) {
    o[\\"default\\"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== \\"default\\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.serialization = void 0;
exports.serialization = __importStar(require(\\"./schemas\\"));
",
        "name": "index.js",
        "type": "file",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "import { SchemaUtils } from \\"./builders\\";
import { MaybePromise } from \\"./utils/MaybePromise\\";
export declare type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
export declare type inferRaw<S extends Schema> = S extends Schema<infer Raw, any> ? Raw : never;
export declare type inferParsed<S extends Schema> = S extends Schema<any, infer Parsed> ? Parsed : never;
export interface BaseSchema<Raw, Parsed> {
    parse: (raw: unknown, opts?: SchemaOptions) => MaybePromise<MaybeValid<Parsed>>;
    json: (parsed: unknown, opts?: SchemaOptions) => MaybePromise<MaybeValid<Raw>>;
    getType: () => SchemaType | Promise<SchemaType>;
}
export declare const SchemaType: {
    readonly DATE: \\"date\\";
    readonly ENUM: \\"enum\\";
    readonly LIST: \\"list\\";
    readonly STRING_LITERAL: \\"stringLiteral\\";
    readonly OBJECT: \\"object\\";
    readonly ANY: \\"any\\";
    readonly BOOLEAN: \\"boolean\\";
    readonly NUMBER: \\"number\\";
    readonly STRING: \\"string\\";
    readonly UNKNOWN: \\"unknown\\";
    readonly RECORD: \\"record\\";
    readonly SET: \\"set\\";
    readonly UNION: \\"union\\";
    readonly OPTIONAL: \\"optional\\";
};
export declare type SchemaType = typeof SchemaType[keyof typeof SchemaType];
export declare type MaybeValid<T> = Valid<T> | Invalid;
export interface Valid<T> {
    ok: true;
    value: T;
}
export interface Invalid {
    ok: false;
    errors: ValidationError[];
}
export interface ValidationError {
    path: string[];
    message: string;
}
export interface SchemaOptions {
    /**
     * @default false
     */
    allowUnknownKeys?: boolean;
}
",
            "name": "Schema.d.ts",
            "type": "file",
          },
          Object {
            "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.SchemaType = void 0;
exports.SchemaType = {
    DATE: \\"date\\",
    ENUM: \\"enum\\",
    LIST: \\"list\\",
    STRING_LITERAL: \\"stringLiteral\\",
    OBJECT: \\"object\\",
    ANY: \\"any\\",
    BOOLEAN: \\"boolean\\",
    NUMBER: \\"number\\",
    STRING: \\"string\\",
    UNKNOWN: \\"unknown\\",
    RECORD: \\"record\\",
    SET: \\"set\\",
    UNION: \\"union\\",
    OPTIONAL: \\"optional\\",
};
",
            "name": "Schema.js",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": Array [
                  Object {
                    "contents": "import { Schema } from \\"../../Schema\\";
export declare function date(): Schema<string, Date>;
",
                    "name": "date.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.date = void 0;
const Schema_1 = require(\\"../../Schema\\");
const schema_utils_1 = require(\\"../schema-utils\\");
// https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
const ISO_8601_REGEX = /^([+-]?\\\\d{4}(?!\\\\d{2}\\\\b))((-?)((0[1-9]|1[0-2])(\\\\3([12]\\\\d|0[1-9]|3[01]))?|W([0-4]\\\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\\\d|[12]\\\\d{2}|3([0-5]\\\\d|6[1-6])))([T\\\\s]((([01]\\\\d|2[0-3])((:?)[0-5]\\\\d)?|24:?00)([.,]\\\\d+(?!:))?)?(\\\\17[0-5]\\\\d([.,]\\\\d+)?)?([zZ]|([+-])([01]\\\\d|2[0-3]):?([0-5]\\\\d)?)?)?)?$/;
function date() {
    const baseSchema = {
        parse: (raw) => {
            if (typeof raw === \\"string\\" && ISO_8601_REGEX.test(raw)) {
                return {
                    ok: true,
                    value: new Date(raw),
                };
            }
            else {
                return {
                    ok: false,
                    errors: [
                        {
                            path: [],
                            message: \\"Not an ISO 8601 date string\\",
                        },
                    ],
                };
            }
        },
        json: (date) => {
            if (date instanceof Date) {
                return {
                    ok: true,
                    value: date.toISOString(),
                };
            }
            else {
                return {
                    ok: false,
                    errors: [
                        {
                            path: [],
                            message: \\"Not a Date object\\",
                        },
                    ],
                };
            }
        },
        getType: () => Schema_1.SchemaType.DATE,
    };
    return {
        ...baseSchema,
        ...(0, schema_utils_1.getSchemaUtils)(baseSchema),
    };
}
exports.date = date;
",
                    "name": "date.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { date } from \\"./date\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.date = void 0;
var date_1 = require(\\"./date\\");
Object.defineProperty(exports, \\"date\\", { enumerable: true, get: function () { return date_1.date; } });
",
                    "name": "index.js",
                    "type": "file",
                  },
                ],
                "name": "date",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "import { Schema } from \\"../../Schema\\";
export declare function enum_<U extends string, E extends U[]>(values: E): Schema<E[number], E[number]>;
",
                    "name": "enum.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.enum_ = void 0;
const Schema_1 = require(\\"../../Schema\\");
const createIdentitySchemaCreator_1 = require(\\"../../utils/createIdentitySchemaCreator\\");
function enum_(values) {
    const validValues = new Set(values);
    const schemaCreator = (0, createIdentitySchemaCreator_1.createIdentitySchemaCreator)(Schema_1.SchemaType.ENUM, (value, { allowUnknownKeys = false } = {}) => {
        if (typeof value === \\"string\\" && (validValues.has(value) || allowUnknownKeys)) {
            return {
                ok: true,
                value: value,
            };
        }
        else {
            return {
                ok: false,
                errors: [
                    {
                        path: [],
                        message: \\"Not one of the allowed values\\",
                    },
                ],
            };
        }
    });
    return schemaCreator();
}
exports.enum_ = enum_;
",
                    "name": "enum.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { enum_ } from \\"./enum\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.enum_ = void 0;
var enum_1 = require(\\"./enum\\");
Object.defineProperty(exports, \\"enum_\\", { enumerable: true, get: function () { return enum_1.enum_; } });
",
                    "name": "index.js",
                    "type": "file",
                  },
                ],
                "name": "enum",
                "type": "directory",
              },
              Object {
                "contents": "export * from \\"./date\\";
export * from \\"./enum\\";
export * from \\"./lazy\\";
export * from \\"./list\\";
export * from \\"./literals\\";
export * from \\"./object\\";
export * from \\"./object-like\\";
export * from \\"./primitives\\";
export * from \\"./record\\";
export * from \\"./schema-utils\\";
export * from \\"./set\\";
export * from \\"./union\\";
",
                "name": "index.d.ts",
                "type": "file",
              },
              Object {
                "contents": "\\"use strict\\";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || (\\"get\\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== \\"default\\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
__exportStar(require(\\"./date\\"), exports);
__exportStar(require(\\"./enum\\"), exports);
__exportStar(require(\\"./lazy\\"), exports);
__exportStar(require(\\"./list\\"), exports);
__exportStar(require(\\"./literals\\"), exports);
__exportStar(require(\\"./object\\"), exports);
__exportStar(require(\\"./object-like\\"), exports);
__exportStar(require(\\"./primitives\\"), exports);
__exportStar(require(\\"./record\\"), exports);
__exportStar(require(\\"./schema-utils\\"), exports);
__exportStar(require(\\"./set\\"), exports);
__exportStar(require(\\"./union\\"), exports);
",
                "name": "index.js",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export { lazy, type SchemaGetter } from \\"./lazy\\";
export { lazyObject } from \\"./lazyObject\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.lazyObject = exports.lazy = void 0;
var lazy_1 = require(\\"./lazy\\");
Object.defineProperty(exports, \\"lazy\\", { enumerable: true, get: function () { return lazy_1.lazy; } });
var lazyObject_1 = require(\\"./lazyObject\\");
Object.defineProperty(exports, \\"lazyObject\\", { enumerable: true, get: function () { return lazyObject_1.lazyObject; } });
",
                    "name": "index.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { BaseSchema, Schema } from \\"../../Schema\\";
export declare type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType | Promise<SchemaType>;
export declare function lazy<Raw, Parsed>(getter: SchemaGetter<Schema<Raw, Parsed>>): Schema<Raw, Parsed>;
export declare function constructLazyBaseSchema<Raw, Parsed>(getter: SchemaGetter<Schema<Raw, Parsed>>): BaseSchema<Raw, Parsed>;
export declare function getMemoizedSchema<SchemaType extends Schema<any, any>>(getter: SchemaGetter<SchemaType>): Promise<SchemaType>;
",
                    "name": "lazy.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.getMemoizedSchema = exports.constructLazyBaseSchema = exports.lazy = void 0;
const schema_utils_1 = require(\\"../schema-utils\\");
function lazy(getter) {
    const baseSchema = constructLazyBaseSchema(getter);
    return {
        ...baseSchema,
        ...(0, schema_utils_1.getSchemaUtils)(baseSchema),
    };
}
exports.lazy = lazy;
function constructLazyBaseSchema(getter) {
    return {
        parse: async (raw, opts) => (await getMemoizedSchema(getter)).parse(raw, opts),
        json: async (parsed, opts) => (await getMemoizedSchema(getter)).json(parsed, opts),
        getType: async () => (await getMemoizedSchema(getter)).getType(),
    };
}
exports.constructLazyBaseSchema = constructLazyBaseSchema;
async function getMemoizedSchema(getter) {
    const castedGetter = getter;
    if (castedGetter.__zurg_memoized == null) {
        castedGetter.__zurg_memoized = await getter();
    }
    return castedGetter.__zurg_memoized;
}
exports.getMemoizedSchema = getMemoizedSchema;
",
                    "name": "lazy.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { ObjectSchema } from \\"../object/types\\";
import { SchemaGetter } from \\"./lazy\\";
export declare function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed>;
",
                    "name": "lazyObject.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.lazyObject = void 0;
const object_1 = require(\\"../object\\");
const object_like_1 = require(\\"../object-like\\");
const schema_utils_1 = require(\\"../schema-utils\\");
const lazy_1 = require(\\"./lazy\\");
function lazyObject(getter) {
    const baseSchema = {
        ...(0, lazy_1.constructLazyBaseSchema)(getter),
        _getRawProperties: async () => (await (0, lazy_1.getMemoizedSchema)(getter))._getRawProperties(),
        _getParsedProperties: async () => (await (0, lazy_1.getMemoizedSchema)(getter))._getParsedProperties(),
    };
    return {
        ...baseSchema,
        ...(0, schema_utils_1.getSchemaUtils)(baseSchema),
        ...(0, object_like_1.getObjectLikeUtils)(baseSchema),
        ...(0, object_1.getObjectUtils)(baseSchema),
    };
}
exports.lazyObject = lazyObject;
",
                    "name": "lazyObject.js",
                    "type": "file",
                  },
                ],
                "name": "lazy",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export { list } from \\"./list\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.list = void 0;
var list_1 = require(\\"./list\\");
Object.defineProperty(exports, \\"list\\", { enumerable: true, get: function () { return list_1.list; } });
",
                    "name": "index.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { Schema } from \\"../../Schema\\";
export declare function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]>;
",
                    "name": "list.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.list = void 0;
const Schema_1 = require(\\"../../Schema\\");
const schema_utils_1 = require(\\"../schema-utils\\");
function list(schema) {
    const baseSchema = {
        parse: async (raw, opts) => validateAndTransformArray(raw, (item) => schema.parse(item, opts)),
        json: (parsed, opts) => validateAndTransformArray(parsed, (item) => schema.json(item, opts)),
        getType: () => Schema_1.SchemaType.LIST,
    };
    return {
        ...baseSchema,
        ...(0, schema_utils_1.getSchemaUtils)(baseSchema),
    };
}
exports.list = list;
async function validateAndTransformArray(value, transformItem) {
    if (!Array.isArray(value)) {
        return {
            ok: false,
            errors: [
                {
                    message: \\"Not a list\\",
                    path: [],
                },
            ],
        };
    }
    const maybeValidItems = await Promise.all(value.map((item) => transformItem(item)));
    return maybeValidItems.reduce((acc, item, index) => {
        if (acc.ok && item.ok) {
            return {
                ok: true,
                value: [...acc.value, item.value],
            };
        }
        const errors = [];
        if (!acc.ok) {
            errors.push(...acc.errors);
        }
        if (!item.ok) {
            errors.push(...item.errors.map((error) => ({
                path: [\`[\${index}]\`, ...error.path],
                message: error.message,
            })));
        }
        return {
            ok: false,
            errors,
        };
    }, { ok: true, value: [] });
}
",
                    "name": "list.js",
                    "type": "file",
                  },
                ],
                "name": "list",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export { stringLiteral } from \\"./stringLiteral\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.stringLiteral = void 0;
var stringLiteral_1 = require(\\"./stringLiteral\\");
Object.defineProperty(exports, \\"stringLiteral\\", { enumerable: true, get: function () { return stringLiteral_1.stringLiteral; } });
",
                    "name": "index.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { Schema } from \\"../../Schema\\";
export declare function stringLiteral<V extends string>(literal: V): Schema<V, V>;
",
                    "name": "stringLiteral.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.stringLiteral = void 0;
const Schema_1 = require(\\"../../Schema\\");
const createIdentitySchemaCreator_1 = require(\\"../../utils/createIdentitySchemaCreator\\");
function stringLiteral(literal) {
    const schemaCreator = (0, createIdentitySchemaCreator_1.createIdentitySchemaCreator)(Schema_1.SchemaType.STRING_LITERAL, (value) => {
        if (value === literal) {
            return {
                ok: true,
                value: literal,
            };
        }
        else {
            return {
                ok: false,
                errors: [
                    {
                        path: [],
                        message: \`Not equal to \\"\${literal}\\"\`,
                    },
                ],
            };
        }
    });
    return schemaCreator();
}
exports.stringLiteral = stringLiteral;
",
                    "name": "stringLiteral.js",
                    "type": "file",
                  },
                ],
                "name": "literals",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export { getObjectUtils, object } from \\"./object\\";
export { isProperty, property, type Property } from \\"./property\\";
export { type BaseObjectSchema, type inferObjectSchemaFromPropertySchemas, type inferParsedObject, type inferParsedObjectFromPropertySchemas, type inferParsedPropertySchema, type inferRawKey, type inferRawObject, type inferRawObjectFromPropertySchemas, type inferRawPropertySchema, type ObjectSchema, type ObjectUtils, type PropertySchemas, } from \\"./types\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.property = exports.isProperty = exports.object = exports.getObjectUtils = void 0;
var object_1 = require(\\"./object\\");
Object.defineProperty(exports, \\"getObjectUtils\\", { enumerable: true, get: function () { return object_1.getObjectUtils; } });
Object.defineProperty(exports, \\"object\\", { enumerable: true, get: function () { return object_1.object; } });
var property_1 = require(\\"./property\\");
Object.defineProperty(exports, \\"isProperty\\", { enumerable: true, get: function () { return property_1.isProperty; } });
Object.defineProperty(exports, \\"property\\", { enumerable: true, get: function () { return property_1.property; } });
",
                    "name": "index.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { BaseObjectSchema, inferObjectSchemaFromPropertySchemas, ObjectUtils, PropertySchemas } from \\"./types\\";
export declare function object<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(schemas: T): inferObjectSchemaFromPropertySchemas<T>;
export declare function getObjectUtils<Raw, Parsed>(schema: BaseObjectSchema<Raw, Parsed>): ObjectUtils<Raw, Parsed>;
",
                    "name": "object.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.getObjectUtils = exports.object = void 0;
const Schema_1 = require(\\"../../Schema\\");
const entries_1 = require(\\"../../utils/entries\\");
const filterObject_1 = require(\\"../../utils/filterObject\\");
const isPlainObject_1 = require(\\"../../utils/isPlainObject\\");
const keys_1 = require(\\"../../utils/keys\\");
const partition_1 = require(\\"../../utils/partition\\");
const object_like_1 = require(\\"../object-like\\");
const schema_utils_1 = require(\\"../schema-utils\\");
const property_1 = require(\\"./property\\");
function object(schemas) {
    const baseSchema = {
        _getRawProperties: () => Promise.resolve(Object.entries(schemas).map(([parsedKey, propertySchema]) => (0, property_1.isProperty)(propertySchema) ? propertySchema.rawKey : parsedKey)),
        _getParsedProperties: () => Promise.resolve((0, keys_1.keys)(schemas)),
        parse: async (raw, opts) => {
            const rawKeyToProperty = {};
            const requiredKeys = [];
            for (const [parsedKey, schemaOrObjectProperty] of (0, entries_1.entries)(schemas)) {
                const rawKey = (0, property_1.isProperty)(schemaOrObjectProperty) ? schemaOrObjectProperty.rawKey : parsedKey;
                const valueSchema = (0, property_1.isProperty)(schemaOrObjectProperty)
                    ? schemaOrObjectProperty.valueSchema
                    : schemaOrObjectProperty;
                const property = {
                    rawKey,
                    parsedKey: parsedKey,
                    valueSchema,
                };
                rawKeyToProperty[rawKey] = property;
                if ((await valueSchema.getType()) !== \\"optional\\") {
                    requiredKeys.push(rawKey);
                }
            }
            return validateAndTransformObject({
                value: raw,
                requiredKeys,
                getProperty: (rawKey) => {
                    const property = rawKeyToProperty[rawKey];
                    if (property == null) {
                        return undefined;
                    }
                    return {
                        transformedKey: property.parsedKey,
                        transform: (propertyValue) => property.valueSchema.parse(propertyValue, opts),
                    };
                },
                allowUnknownKeys: opts?.allowUnknownKeys ?? false,
            });
        },
        json: async (parsed, opts) => {
            const requiredKeys = [];
            for (const [parsedKey, schemaOrObjectProperty] of (0, entries_1.entries)(schemas)) {
                const valueSchema = (0, property_1.isProperty)(schemaOrObjectProperty)
                    ? schemaOrObjectProperty.valueSchema
                    : schemaOrObjectProperty;
                if ((await valueSchema.getType()) !== \\"optional\\") {
                    requiredKeys.push(parsedKey);
                }
            }
            return validateAndTransformObject({
                value: parsed,
                requiredKeys,
                getProperty: (parsedKey) => {
                    const property = schemas[parsedKey];
                    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
                    if (property == null) {
                        return undefined;
                    }
                    if ((0, property_1.isProperty)(property)) {
                        return {
                            transformedKey: property.rawKey,
                            transform: (propertyValue) => property.valueSchema.json(propertyValue, opts),
                        };
                    }
                    else {
                        return {
                            transformedKey: parsedKey,
                            transform: (propertyValue) => property.json(propertyValue, opts),
                        };
                    }
                },
                allowUnknownKeys: opts?.allowUnknownKeys ?? false,
            });
        },
        getType: () => Schema_1.SchemaType.OBJECT,
    };
    return {
        ...baseSchema,
        ...(0, schema_utils_1.getSchemaUtils)(baseSchema),
        ...(0, object_like_1.getObjectLikeUtils)(baseSchema),
        ...getObjectUtils(baseSchema),
    };
}
exports.object = object;
async function validateAndTransformObject({ value, requiredKeys, getProperty, allowUnknownKeys, }) {
    if (!(0, isPlainObject_1.isPlainObject)(value)) {
        return {
            ok: false,
            errors: [
                {
                    path: [],
                    message: isPlainObject_1.NOT_AN_OBJECT_ERROR_MESSAGE,
                },
            ],
        };
    }
    const missingRequiredKeys = new Set(requiredKeys);
    const errors = [];
    const transformed = {};
    for (const [preTransformedKey, preTransformedItemValue] of Object.entries(value)) {
        const property = getProperty(preTransformedKey);
        if (property != null) {
            missingRequiredKeys.delete(preTransformedKey);
            const value = await property.transform(preTransformedItemValue);
            if (value.ok) {
                transformed[property.transformedKey] = value.value;
            }
            else {
                errors.push(...value.errors.map((error) => ({
                    path: [preTransformedKey, ...error.path],
                    message: error.message,
                })));
            }
        }
        else if (allowUnknownKeys) {
            transformed[preTransformedKey] = preTransformedItemValue;
        }
        else {
            errors.push({
                path: [preTransformedKey],
                message: \`Unrecognized key \\"\${preTransformedKey}\\"\`,
            });
        }
    }
    errors.push(...requiredKeys
        .filter((key) => missingRequiredKeys.has(key))
        .map((key) => ({
        path: [],
        message: \`Missing required key \\"\${key}\\"\`,
    })));
    if (errors.length === 0) {
        return {
            ok: true,
            value: transformed,
        };
    }
    else {
        return {
            ok: false,
            errors,
        };
    }
}
function getObjectUtils(schema) {
    return {
        extend: (extension) => {
            const baseSchema = {
                _getParsedProperties: async () => [
                    ...(await schema._getParsedProperties()),
                    ...(await extension._getParsedProperties()),
                ],
                _getRawProperties: async () => [
                    ...(await schema._getRawProperties()),
                    ...(await extension._getRawProperties()),
                ],
                parse: async (raw, opts) => {
                    return validateAndTransformExtendedObject({
                        extensionKeys: await extension._getRawProperties(),
                        value: raw,
                        transformBase: (rawBase) => schema.parse(rawBase, opts),
                        transformExtension: (rawExtension) => extension.parse(rawExtension, opts),
                    });
                },
                json: async (parsed, opts) => {
                    return validateAndTransformExtendedObject({
                        extensionKeys: await extension._getParsedProperties(),
                        value: parsed,
                        transformBase: (parsedBase) => schema.json(parsedBase, opts),
                        transformExtension: (parsedExtension) => extension.json(parsedExtension, opts),
                    });
                },
                getType: () => Schema_1.SchemaType.OBJECT,
            };
            return {
                ...baseSchema,
                ...(0, schema_utils_1.getSchemaUtils)(baseSchema),
                ...(0, object_like_1.getObjectLikeUtils)(baseSchema),
                ...getObjectUtils(baseSchema),
            };
        },
    };
}
exports.getObjectUtils = getObjectUtils;
async function validateAndTransformExtendedObject({ extensionKeys, value, transformBase, transformExtension, }) {
    const extensionPropertiesSet = new Set(extensionKeys);
    const [extensionProperties, baseProperties] = (0, partition_1.partition)((0, keys_1.keys)(value), (key) => extensionPropertiesSet.has(key));
    const transformedBase = await transformBase((0, filterObject_1.filterObject)(value, baseProperties));
    const transformedExtension = await transformExtension((0, filterObject_1.filterObject)(value, extensionProperties));
    if (transformedBase.ok && transformedExtension.ok) {
        return {
            ok: true,
            value: {
                ...transformedBase.value,
                ...transformedExtension.value,
            },
        };
    }
    else {
        return {
            ok: false,
            errors: [
                ...(transformedBase.ok ? [] : transformedBase.errors),
                ...(transformedExtension.ok ? [] : transformedExtension.errors),
            ],
        };
    }
}
",
                    "name": "object.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { Schema } from \\"../../Schema\\";
export declare function property<RawKey extends string, RawValue, ParsedValue>(rawKey: RawKey, valueSchema: Schema<RawValue, ParsedValue>): Property<RawKey, RawValue, ParsedValue>;
export interface Property<RawKey extends string, RawValue, ParsedValue> {
    rawKey: RawKey;
    valueSchema: Schema<RawValue, ParsedValue>;
    isProperty: true;
}
export declare function isProperty<O extends Property<any, any, any>>(maybeProperty: unknown): maybeProperty is O;
",
                    "name": "property.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.isProperty = exports.property = void 0;
function property(rawKey, valueSchema) {
    return {
        rawKey,
        valueSchema,
        isProperty: true,
    };
}
exports.property = property;
function isProperty(maybeProperty) {
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
    return maybeProperty.isProperty;
}
exports.isProperty = isProperty;
",
                    "name": "property.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { BaseSchema, inferParsed, inferRaw, Schema } from \\"../../Schema\\";
import { addQuestionMarksToNullableProperties } from \\"../../utils/addQuestionMarksToNullableProperties\\";
import { ObjectLikeUtils } from \\"../object-like\\";
import { SchemaUtils } from \\"../schema-utils\\";
import { Property } from \\"./property\\";
export declare type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> & ObjectLikeUtils<Raw, Parsed> & ObjectUtils<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
export interface BaseObjectSchema<Raw, Parsed> extends BaseSchema<Raw, Parsed> {
    _getRawProperties: () => Promise<(keyof Raw)[]>;
    _getParsedProperties: () => Promise<(keyof Parsed)[]>;
}
export interface ObjectUtils<Raw, Parsed> {
    extend: <RawExtension, ParsedExtension>(schemas: ObjectSchema<RawExtension, ParsedExtension>) => ObjectSchema<Raw & RawExtension, Parsed & ParsedExtension>;
}
export declare type inferRawObject<O extends ObjectSchema<any, any>> = O extends ObjectSchema<infer Raw, any> ? Raw : never;
export declare type inferParsedObject<O extends ObjectSchema<any, any>> = O extends ObjectSchema<any, infer Parsed> ? Parsed : never;
export declare type inferObjectSchemaFromPropertySchemas<T extends PropertySchemas<keyof T>> = ObjectSchema<inferRawObjectFromPropertySchemas<T>, inferParsedObjectFromPropertySchemas<T>>;
export declare type inferRawObjectFromPropertySchemas<T extends PropertySchemas<keyof T>> = addQuestionMarksToNullableProperties<{
    [ParsedKey in keyof T as inferRawKey<ParsedKey, T[ParsedKey]>]: inferRawPropertySchema<T[ParsedKey]>;
}>;
export declare type inferParsedObjectFromPropertySchemas<T extends PropertySchemas<keyof T>> = addQuestionMarksToNullableProperties<{
    [K in keyof T]: inferParsedPropertySchema<T[K]>;
}>;
export declare type PropertySchemas<ParsedKeys extends string | number | symbol> = Record<ParsedKeys, Property<any, any, any> | Schema<any, any>>;
export declare type inferRawPropertySchema<P extends Property<any, any, any> | Schema<any, any>> = P extends Property<any, infer Raw, any> ? Raw : P extends Schema<any, any> ? inferRaw<P> : never;
export declare type inferParsedPropertySchema<P extends Property<any, any, any> | Schema<any, any>> = P extends Property<any, any, infer Parsed> ? Parsed : P extends Schema<any, any> ? inferParsed<P> : never;
export declare type inferRawKey<ParsedKey extends string | number | symbol, P extends Property<any, any, any> | Schema<any, any>> = P extends Property<infer Raw, any, any> ? Raw : ParsedKey;
",
                    "name": "types.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
",
                    "name": "types.js",
                    "type": "file",
                  },
                ],
                "name": "object",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "import { BaseSchema } from \\"../../Schema\\";
import { ObjectLikeSchema, ObjectLikeUtils } from \\"./types\\";
export declare function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed>;
/**
 * object-like utils are defined in one file to resolve issues with circular imports
 */
export declare function withParsedProperties<RawObjectShape, ParsedObjectShape, Properties>(objectLike: BaseSchema<RawObjectShape, ParsedObjectShape>, properties: {
    [K in keyof Properties]: Properties[K] | ((parsed: ParsedObjectShape) => Properties[K]);
}): ObjectLikeSchema<RawObjectShape, ParsedObjectShape & Properties>;
",
                    "name": "getObjectLikeUtils.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.withParsedProperties = exports.getObjectLikeUtils = void 0;
const filterObject_1 = require(\\"../../utils/filterObject\\");
const isPlainObject_1 = require(\\"../../utils/isPlainObject\\");
const schema_utils_1 = require(\\"../schema-utils\\");
function getObjectLikeUtils(schema) {
    return {
        withParsedProperties: (properties) => withParsedProperties(schema, properties),
    };
}
exports.getObjectLikeUtils = getObjectLikeUtils;
/**
 * object-like utils are defined in one file to resolve issues with circular imports
 */
function withParsedProperties(objectLike, properties) {
    const objectSchema = {
        parse: async (raw, opts) => {
            const parsedObject = await objectLike.parse(raw, opts);
            if (!parsedObject.ok) {
                return parsedObject;
            }
            const additionalProperties = Object.entries(properties).reduce((processed, [key, value]) => {
                return {
                    ...processed,
                    [key]: typeof value === \\"function\\" ? value(parsedObject.value) : value,
                };
            }, {});
            return {
                ok: true,
                value: {
                    ...parsedObject.value,
                    ...additionalProperties,
                },
            };
        },
        json: (parsed, opts) => {
            if (!(0, isPlainObject_1.isPlainObject)(parsed)) {
                return {
                    ok: false,
                    errors: [
                        {
                            path: [],
                            message: isPlainObject_1.NOT_AN_OBJECT_ERROR_MESSAGE,
                        },
                    ],
                };
            }
            // strip out added properties
            const addedPropertyKeys = new Set(Object.keys(properties));
            const parsedWithoutAddedProperties = (0, filterObject_1.filterObject)(parsed, Object.keys(parsed).filter((key) => !addedPropertyKeys.has(key)));
            return objectLike.json(parsedWithoutAddedProperties, opts);
        },
        getType: () => objectLike.getType(),
    };
    return {
        ...objectSchema,
        ...(0, schema_utils_1.getSchemaUtils)(objectSchema),
        ...getObjectLikeUtils(objectSchema),
    };
}
exports.withParsedProperties = withParsedProperties;
",
                    "name": "getObjectLikeUtils.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { getObjectLikeUtils, withParsedProperties } from \\"./getObjectLikeUtils\\";
export { type ObjectLikeSchema, type ObjectLikeUtils } from \\"./types\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.withParsedProperties = exports.getObjectLikeUtils = void 0;
var getObjectLikeUtils_1 = require(\\"./getObjectLikeUtils\\");
Object.defineProperty(exports, \\"getObjectLikeUtils\\", { enumerable: true, get: function () { return getObjectLikeUtils_1.getObjectLikeUtils; } });
Object.defineProperty(exports, \\"withParsedProperties\\", { enumerable: true, get: function () { return getObjectLikeUtils_1.withParsedProperties; } });
",
                    "name": "index.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { BaseSchema, Schema } from \\"../../Schema\\";
export declare type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> & BaseSchema<Raw, Parsed> & ObjectLikeUtils<Raw, Parsed>;
export interface ObjectLikeUtils<Raw, Parsed> {
    withParsedProperties: <T extends Record<string, any>>(properties: {
        [K in keyof T]: T[K] | ((parsed: Parsed) => T[K]);
    }) => ObjectLikeSchema<Raw, Parsed & T>;
}
",
                    "name": "types.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
",
                    "name": "types.js",
                    "type": "file",
                  },
                ],
                "name": "object-like",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export declare const any: () => import(\\"../../Schema\\").Schema<any, any>;
",
                    "name": "any.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.any = void 0;
const Schema_1 = require(\\"../../Schema\\");
const createIdentitySchemaCreator_1 = require(\\"../../utils/createIdentitySchemaCreator\\");
exports.any = (0, createIdentitySchemaCreator_1.createIdentitySchemaCreator)(Schema_1.SchemaType.ANY, (value) => ({ ok: true, value }));
",
                    "name": "any.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export declare const boolean: () => import(\\"../../Schema\\").Schema<boolean, boolean>;
",
                    "name": "boolean.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.boolean = void 0;
const Schema_1 = require(\\"../../Schema\\");
const createIdentitySchemaCreator_1 = require(\\"../../utils/createIdentitySchemaCreator\\");
exports.boolean = (0, createIdentitySchemaCreator_1.createIdentitySchemaCreator)(Schema_1.SchemaType.BOOLEAN, (value) => {
    if (typeof value === \\"boolean\\") {
        return {
            ok: true,
            value,
        };
    }
    else {
        return {
            ok: false,
            errors: [
                {
                    path: [],
                    message: \\"Not a boolean\\",
                },
            ],
        };
    }
});
",
                    "name": "boolean.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { any } from \\"./any\\";
export { boolean } from \\"./boolean\\";
export { number } from \\"./number\\";
export { string } from \\"./string\\";
export { unknown } from \\"./unknown\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.unknown = exports.string = exports.number = exports.boolean = exports.any = void 0;
var any_1 = require(\\"./any\\");
Object.defineProperty(exports, \\"any\\", { enumerable: true, get: function () { return any_1.any; } });
var boolean_1 = require(\\"./boolean\\");
Object.defineProperty(exports, \\"boolean\\", { enumerable: true, get: function () { return boolean_1.boolean; } });
var number_1 = require(\\"./number\\");
Object.defineProperty(exports, \\"number\\", { enumerable: true, get: function () { return number_1.number; } });
var string_1 = require(\\"./string\\");
Object.defineProperty(exports, \\"string\\", { enumerable: true, get: function () { return string_1.string; } });
var unknown_1 = require(\\"./unknown\\");
Object.defineProperty(exports, \\"unknown\\", { enumerable: true, get: function () { return unknown_1.unknown; } });
",
                    "name": "index.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export declare const number: () => import(\\"../../Schema\\").Schema<number, number>;
",
                    "name": "number.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.number = void 0;
const Schema_1 = require(\\"../../Schema\\");
const createIdentitySchemaCreator_1 = require(\\"../../utils/createIdentitySchemaCreator\\");
exports.number = (0, createIdentitySchemaCreator_1.createIdentitySchemaCreator)(Schema_1.SchemaType.NUMBER, (value) => {
    if (typeof value === \\"number\\") {
        return {
            ok: true,
            value,
        };
    }
    else {
        return {
            ok: false,
            errors: [
                {
                    path: [],
                    message: \\"Not a number\\",
                },
            ],
        };
    }
});
",
                    "name": "number.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export declare const string: () => import(\\"../../Schema\\").Schema<string, string>;
",
                    "name": "string.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.string = void 0;
const Schema_1 = require(\\"../../Schema\\");
const createIdentitySchemaCreator_1 = require(\\"../../utils/createIdentitySchemaCreator\\");
exports.string = (0, createIdentitySchemaCreator_1.createIdentitySchemaCreator)(Schema_1.SchemaType.STRING, (value) => {
    if (typeof value === \\"string\\") {
        return {
            ok: true,
            value,
        };
    }
    else {
        return {
            ok: false,
            errors: [
                {
                    path: [],
                    message: \\"Not a string\\",
                },
            ],
        };
    }
});
",
                    "name": "string.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export declare const unknown: () => import(\\"../../Schema\\").Schema<unknown, unknown>;
",
                    "name": "unknown.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.unknown = void 0;
const Schema_1 = require(\\"../../Schema\\");
const createIdentitySchemaCreator_1 = require(\\"../../utils/createIdentitySchemaCreator\\");
exports.unknown = (0, createIdentitySchemaCreator_1.createIdentitySchemaCreator)(Schema_1.SchemaType.UNKNOWN, (value) => ({ ok: true, value }));
",
                    "name": "unknown.js",
                    "type": "file",
                  },
                ],
                "name": "primitives",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export { record } from \\"./record\\";
export { type BaseRecordSchema, type RecordSchema } from \\"./types\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.record = void 0;
var record_1 = require(\\"./record\\");
Object.defineProperty(exports, \\"record\\", { enumerable: true, get: function () { return record_1.record; } });
",
                    "name": "index.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { Schema } from \\"../../Schema\\";
import { RecordSchema } from \\"./types\\";
export declare function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(keySchema: Schema<RawKey, ParsedKey>, valueSchema: Schema<RawValue, ParsedValue>): RecordSchema<RawKey, RawValue, ParsedKey, ParsedValue>;
",
                    "name": "record.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.record = void 0;
const Schema_1 = require(\\"../../Schema\\");
const entries_1 = require(\\"../../utils/entries\\");
const isPlainObject_1 = require(\\"../../utils/isPlainObject\\");
const schema_utils_1 = require(\\"../schema-utils\\");
function record(keySchema, valueSchema) {
    const baseSchema = {
        parse: async (raw, opts) => {
            return validateAndTransformRecord({
                value: raw,
                isKeyNumeric: (await keySchema.getType()) === Schema_1.SchemaType.NUMBER,
                transformKey: (key) => keySchema.parse(key, opts),
                transformValue: (value) => valueSchema.parse(value, opts),
            });
        },
        json: async (parsed, opts) => {
            return validateAndTransformRecord({
                value: parsed,
                isKeyNumeric: (await keySchema.getType()) === Schema_1.SchemaType.NUMBER,
                transformKey: (key) => keySchema.json(key, opts),
                transformValue: (value) => valueSchema.json(value, opts),
            });
        },
        getType: () => Schema_1.SchemaType.RECORD,
    };
    return {
        ...baseSchema,
        ...(0, schema_utils_1.getSchemaUtils)(baseSchema),
    };
}
exports.record = record;
async function validateAndTransformRecord({ value, isKeyNumeric, transformKey, transformValue, }) {
    if (!(0, isPlainObject_1.isPlainObject)(value)) {
        return {
            ok: false,
            errors: [
                {
                    path: [],
                    message: isPlainObject_1.NOT_AN_OBJECT_ERROR_MESSAGE,
                },
            ],
        };
    }
    return (0, entries_1.entries)(value).reduce(async (accPromise, [stringKey, value]) => {
        // skip nullish keys
        if (value == null) {
            return accPromise;
        }
        const acc = await accPromise;
        let key = stringKey;
        if (isKeyNumeric) {
            const numberKey = stringKey.length > 0 ? Number(stringKey) : NaN;
            if (!isNaN(numberKey)) {
                key = numberKey;
            }
        }
        const transformedKey = await transformKey(key);
        const transformedValue = await transformValue(value);
        if (acc.ok && transformedKey.ok && transformedValue.ok) {
            return {
                ok: true,
                value: {
                    ...acc.value,
                    [transformedKey.value]: transformedValue.value,
                },
            };
        }
        const errors = [];
        if (!acc.ok) {
            errors.push(...acc.errors);
        }
        if (!transformedKey.ok) {
            errors.push(...transformedKey.errors.map((error) => ({
                path: [\`\${key} (key)\`, ...error.path],
                message: error.message,
            })));
        }
        if (!transformedValue.ok) {
            errors.push(...transformedValue.errors.map((error) => ({
                path: [stringKey, ...error.path],
                message: error.message,
            })));
        }
        return {
            ok: false,
            errors,
        };
    }, Promise.resolve({ ok: true, value: {} }));
}
",
                    "name": "record.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { BaseSchema } from \\"../../Schema\\";
import { OptionalRecord } from \\"../../utils/OptionalRecord\\";
import { SchemaUtils } from \\"../schema-utils\\";
export declare type RecordSchema<RawKey extends string | number, RawValue, ParsedKey extends string | number, ParsedValue> = BaseRecordSchema<RawKey, RawValue, ParsedKey, ParsedValue> & SchemaUtils<OptionalRecord<RawKey, RawValue>, OptionalRecord<ParsedKey, ParsedValue>>;
export declare type BaseRecordSchema<RawKey extends string | number, RawValue, ParsedKey extends string | number, ParsedValue> = BaseSchema<OptionalRecord<RawKey, RawValue>, OptionalRecord<ParsedKey, ParsedValue>>;
",
                    "name": "types.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
",
                    "name": "types.js",
                    "type": "file",
                  },
                ],
                "name": "record",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "import { ValidationError } from \\"../../Schema\\";
export declare class JsonError extends Error {
    readonly errors: ValidationError[];
    constructor(errors: ValidationError[]);
}
",
                    "name": "JsonError.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.JsonError = void 0;
const stringifyValidationErrors_1 = require(\\"./stringifyValidationErrors\\");
class JsonError extends Error {
    errors;
    constructor(errors) {
        super(errors.map(stringifyValidationErrors_1.stringifyValidationError).join(\\"; \\"));
        this.errors = errors;
        Object.setPrototypeOf(this, JsonError.prototype);
    }
}
exports.JsonError = JsonError;
",
                    "name": "JsonError.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { ValidationError } from \\"../../Schema\\";
export declare class ParseError extends Error {
    readonly errors: ValidationError[];
    constructor(errors: ValidationError[]);
}
",
                    "name": "ParseError.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.ParseError = void 0;
const stringifyValidationErrors_1 = require(\\"./stringifyValidationErrors\\");
class ParseError extends Error {
    errors;
    constructor(errors) {
        super(errors.map(stringifyValidationErrors_1.stringifyValidationError).join(\\"; \\"));
        this.errors = errors;
        Object.setPrototypeOf(this, ParseError.prototype);
    }
}
exports.ParseError = ParseError;
",
                    "name": "ParseError.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { BaseSchema, Schema, SchemaOptions } from \\"../../Schema\\";
export interface SchemaUtils<Raw, Parsed> {
    optional: () => Schema<Raw | null | undefined, Parsed | undefined>;
    transform: <Transformed>(transformer: SchemaTransformer<Parsed, Transformed>) => Schema<Raw, Transformed>;
    parseOrThrow: (raw: unknown, opts?: SchemaOptions) => Promise<Parsed>;
    jsonOrThrow: (raw: unknown, opts?: SchemaOptions) => Promise<Raw>;
}
export interface SchemaTransformer<Parsed, Transformed> {
    transform: (parsed: Parsed) => Transformed;
    untransform: (transformed: any) => Parsed;
}
export declare function getSchemaUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): SchemaUtils<Raw, Parsed>;
/**
 * schema utils are defined in one file to resolve issues with circular imports
 */
export declare function optional<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): Schema<Raw | null | undefined, Parsed | undefined>;
export declare function transform<Raw, Parsed, Transformed>(schema: BaseSchema<Raw, Parsed>, transformer: SchemaTransformer<Parsed, Transformed>): Schema<Raw, Transformed>;
",
                    "name": "getSchemaUtils.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.transform = exports.optional = exports.getSchemaUtils = void 0;
const Schema_1 = require(\\"../../Schema\\");
const JsonError_1 = require(\\"./JsonError\\");
const ParseError_1 = require(\\"./ParseError\\");
function getSchemaUtils(schema) {
    return {
        optional: () => optional(schema),
        transform: (transformer) => transform(schema, transformer),
        parseOrThrow: async (raw, opts) => {
            const parsed = await schema.parse(raw, opts);
            if (parsed.ok) {
                return parsed.value;
            }
            throw new ParseError_1.ParseError(parsed.errors);
        },
        jsonOrThrow: async (parsed, opts) => {
            const raw = await schema.json(parsed, opts);
            if (raw.ok) {
                return raw.value;
            }
            throw new JsonError_1.JsonError(raw.errors);
        },
    };
}
exports.getSchemaUtils = getSchemaUtils;
/**
 * schema utils are defined in one file to resolve issues with circular imports
 */
function optional(schema) {
    const baseSchema = {
        parse: (raw, opts) => {
            if (raw == null) {
                return {
                    ok: true,
                    value: undefined,
                };
            }
            return schema.parse(raw, opts);
        },
        json: (parsed, opts) => {
            if (parsed == null) {
                return {
                    ok: true,
                    value: null,
                };
            }
            return schema.json(parsed, opts);
        },
        getType: () => Schema_1.SchemaType.OPTIONAL,
    };
    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
    };
}
exports.optional = optional;
function transform(schema, transformer) {
    const baseSchema = {
        parse: async (raw, opts) => {
            const parsed = await schema.parse(raw, opts);
            if (!parsed.ok) {
                return parsed;
            }
            return {
                ok: true,
                value: transformer.transform(parsed.value),
            };
        },
        json: async (transformed, opts) => {
            const parsed = await transformer.untransform(transformed);
            return schema.json(parsed, opts);
        },
        getType: () => schema.getType(),
    };
    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
    };
}
exports.transform = transform;
",
                    "name": "getSchemaUtils.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { getSchemaUtils, optional, transform, type SchemaUtils } from \\"./getSchemaUtils\\";
export { JsonError } from \\"./JsonError\\";
export { ParseError } from \\"./ParseError\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.ParseError = exports.JsonError = exports.transform = exports.optional = exports.getSchemaUtils = void 0;
var getSchemaUtils_1 = require(\\"./getSchemaUtils\\");
Object.defineProperty(exports, \\"getSchemaUtils\\", { enumerable: true, get: function () { return getSchemaUtils_1.getSchemaUtils; } });
Object.defineProperty(exports, \\"optional\\", { enumerable: true, get: function () { return getSchemaUtils_1.optional; } });
Object.defineProperty(exports, \\"transform\\", { enumerable: true, get: function () { return getSchemaUtils_1.transform; } });
var JsonError_1 = require(\\"./JsonError\\");
Object.defineProperty(exports, \\"JsonError\\", { enumerable: true, get: function () { return JsonError_1.JsonError; } });
var ParseError_1 = require(\\"./ParseError\\");
Object.defineProperty(exports, \\"ParseError\\", { enumerable: true, get: function () { return ParseError_1.ParseError; } });
",
                    "name": "index.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { ValidationError } from \\"../../Schema\\";
export declare function stringifyValidationError(error: ValidationError): string;
",
                    "name": "stringifyValidationErrors.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.stringifyValidationError = void 0;
function stringifyValidationError(error) {
    if (error.path.length === 0) {
        return error.message;
    }
    return \`\${error.path.join(\\" -> \\")}: \${error.message}\`;
}
exports.stringifyValidationError = stringifyValidationError;
",
                    "name": "stringifyValidationErrors.js",
                    "type": "file",
                  },
                ],
                "name": "schema-utils",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export { set } from \\"./set\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.set = void 0;
var set_1 = require(\\"./set\\");
Object.defineProperty(exports, \\"set\\", { enumerable: true, get: function () { return set_1.set; } });
",
                    "name": "index.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { Schema } from \\"../../Schema\\";
export declare function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>>;
",
                    "name": "set.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.set = void 0;
const Schema_1 = require(\\"../../Schema\\");
const list_1 = require(\\"../list\\");
const schema_utils_1 = require(\\"../schema-utils\\");
function set(schema) {
    const listSchema = (0, list_1.list)(schema);
    const baseSchema = {
        parse: async (raw, opts) => {
            const parsedList = await listSchema.parse(raw, opts);
            if (parsedList.ok) {
                return {
                    ok: true,
                    value: new Set(parsedList.value),
                };
            }
            else {
                return parsedList;
            }
        },
        json: async (parsed, opts) => {
            if (!(parsed instanceof Set)) {
                return {
                    ok: false,
                    errors: [
                        {
                            path: [],
                            message: \\"Not a Set\\",
                        },
                    ],
                };
            }
            const jsonList = await listSchema.json([...parsed], opts);
            return jsonList;
        },
        getType: () => Schema_1.SchemaType.SET,
    };
    return {
        ...baseSchema,
        ...(0, schema_utils_1.getSchemaUtils)(baseSchema),
    };
}
exports.set = set;
",
                    "name": "set.js",
                    "type": "file",
                  },
                ],
                "name": "set",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export declare function discriminant<RawDiscriminant extends string, ParsedDiscriminant extends string>(parsedDiscriminant: ParsedDiscriminant, rawDiscriminant: RawDiscriminant): Discriminant<RawDiscriminant, ParsedDiscriminant>;
export interface Discriminant<RawDiscriminant extends string, ParsedDiscriminant extends string> {
    parsedDiscriminant: ParsedDiscriminant;
    rawDiscriminant: RawDiscriminant;
}
",
                    "name": "discriminant.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.discriminant = void 0;
function discriminant(parsedDiscriminant, rawDiscriminant) {
    return {
        parsedDiscriminant,
        rawDiscriminant,
    };
}
exports.discriminant = discriminant;
",
                    "name": "discriminant.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { discriminant, type Discriminant } from \\"./discriminant\\";
export { type inferParsedDiscriminant, type inferParsedUnion, type inferRawDiscriminant, type inferRawUnion, type UnionSubtypes, } from \\"./types\\";
export { union } from \\"./union\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.union = exports.discriminant = void 0;
var discriminant_1 = require(\\"./discriminant\\");
Object.defineProperty(exports, \\"discriminant\\", { enumerable: true, get: function () { return discriminant_1.discriminant; } });
var union_1 = require(\\"./union\\");
Object.defineProperty(exports, \\"union\\", { enumerable: true, get: function () { return union_1.union; } });
",
                    "name": "index.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { inferParsedObject, inferRawObject, ObjectSchema } from \\"../object\\";
import { Discriminant } from \\"./discriminant\\";
export declare type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
    [K in DiscriminantValues]: ObjectSchema<any, any>;
};
export declare type inferRawUnion<D extends string | Discriminant<any, any>, U extends UnionSubtypes<keyof U>> = {
    [K in keyof U]: Record<inferRawDiscriminant<D>, K> & inferRawObject<U[K]>;
}[keyof U];
export declare type inferParsedUnion<D extends string | Discriminant<any, any>, U extends UnionSubtypes<keyof U>> = {
    [K in keyof U]: Record<inferParsedDiscriminant<D>, K> & inferParsedObject<U[K]>;
}[keyof U];
export declare type inferRawDiscriminant<D extends string | Discriminant<any, any>> = D extends string ? D : D extends Discriminant<infer Raw, any> ? Raw : never;
export declare type inferParsedDiscriminant<D extends string | Discriminant<any, any>> = D extends string ? D : D extends Discriminant<any, infer Parsed> ? Parsed : never;
",
                    "name": "types.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
",
                    "name": "types.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { ObjectLikeSchema } from \\"../object-like\\";
import { Discriminant } from \\"./discriminant\\";
import { inferParsedUnion, inferRawUnion, UnionSubtypes } from \\"./types\\";
export declare function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(discriminant: D, union: U): ObjectLikeSchema<inferRawUnion<D, U>, inferParsedUnion<D, U>>;
",
                    "name": "union.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.union = void 0;
const Schema_1 = require(\\"../../Schema\\");
const isPlainObject_1 = require(\\"../../utils/isPlainObject\\");
const keys_1 = require(\\"../../utils/keys\\");
const enum_1 = require(\\"../enum\\");
const object_like_1 = require(\\"../object-like\\");
const schema_utils_1 = require(\\"../schema-utils\\");
function union(discriminant, union) {
    const rawDiscriminant = typeof discriminant === \\"string\\" ? discriminant : discriminant.rawDiscriminant;
    const parsedDiscriminant = typeof discriminant === \\"string\\"
        ? discriminant
        : discriminant.parsedDiscriminant;
    const discriminantValueSchema = (0, enum_1.enum_)((0, keys_1.keys)(union));
    const baseSchema = {
        parse: async (raw, opts) => {
            return transformAndValidateUnion(raw, rawDiscriminant, parsedDiscriminant, (discriminantValue) => discriminantValueSchema.parse(discriminantValue, opts), (discriminantValue) => union[discriminantValue], opts?.allowUnknownKeys ?? false, (additionalProperties, additionalPropertiesSchema) => additionalPropertiesSchema.parse(additionalProperties, opts));
        },
        json: async (parsed, opts) => {
            return transformAndValidateUnion(parsed, parsedDiscriminant, rawDiscriminant, (discriminantValue) => discriminantValueSchema.json(discriminantValue, opts), (discriminantValue) => union[discriminantValue], opts?.allowUnknownKeys ?? false, (additionalProperties, additionalPropertiesSchema) => additionalPropertiesSchema.json(additionalProperties, opts));
        },
        getType: () => Schema_1.SchemaType.UNION,
    };
    return {
        ...baseSchema,
        ...(0, schema_utils_1.getSchemaUtils)(baseSchema),
        ...(0, object_like_1.getObjectLikeUtils)(baseSchema),
    };
}
exports.union = union;
async function transformAndValidateUnion(value, discriminant, transformedDiscriminant, transformDiscriminantValue, getAdditionalPropertiesSchema, allowUnknownKeys, transformAdditionalProperties) {
    if (!(0, isPlainObject_1.isPlainObject)(value)) {
        return {
            ok: false,
            errors: [
                {
                    path: [],
                    message: isPlainObject_1.NOT_AN_OBJECT_ERROR_MESSAGE,
                },
            ],
        };
    }
    const { [discriminant]: discriminantValue, ...additionalProperties } = value;
    if (discriminantValue == null) {
        return {
            ok: false,
            errors: [
                {
                    path: [],
                    message: \`Missing discriminant (\\"\${discriminant}\\")\`,
                },
            ],
        };
    }
    const transformedDiscriminantValue = await transformDiscriminantValue(discriminantValue);
    if (!transformedDiscriminantValue.ok) {
        return {
            ok: false,
            errors: transformedDiscriminantValue.errors.map((error) => ({
                path: [discriminant, ...error.path],
                message: error.message,
            })),
        };
    }
    const additionalPropertiesSchema = getAdditionalPropertiesSchema(transformedDiscriminantValue.value);
    if (additionalPropertiesSchema == null) {
        if (allowUnknownKeys) {
            return {
                ok: true,
                value: {
                    [transformedDiscriminant]: transformedDiscriminantValue.value,
                    ...additionalProperties,
                },
            };
        }
        else {
            return {
                ok: false,
                errors: [
                    {
                        path: [discriminant],
                        message: \\"Unrecognized discriminant value\\",
                    },
                ],
            };
        }
    }
    const transformedAdditionalProperties = await transformAdditionalProperties(additionalProperties, additionalPropertiesSchema);
    if (!transformedAdditionalProperties.ok) {
        return transformedAdditionalProperties;
    }
    return {
        ok: true,
        value: {
            [transformedDiscriminant]: discriminantValue,
            ...transformedAdditionalProperties.value,
        },
    };
}
",
                    "name": "union.js",
                    "type": "file",
                  },
                ],
                "name": "union",
                "type": "directory",
              },
            ],
            "name": "builders",
            "type": "directory",
          },
          Object {
            "contents": "export * from \\"./builders\\";
export { type inferParsed, type inferRaw, type Schema, type SchemaOptions } from \\"./Schema\\";
",
            "name": "index.d.ts",
            "type": "file",
          },
          Object {
            "contents": "\\"use strict\\";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || (\\"get\\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== \\"default\\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
__exportStar(require(\\"./builders\\"), exports);
",
            "name": "index.js",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export declare type MaybePromise<T> = T | Promise<T>;
",
                "name": "MaybePromise.d.ts",
                "type": "file",
              },
              Object {
                "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
",
                "name": "MaybePromise.js",
                "type": "file",
              },
              Object {
                "contents": "export declare type OptionalRecord<K extends string | number, V> = Record<K, V | undefined>;
",
                "name": "OptionalRecord.d.ts",
                "type": "file",
              },
              Object {
                "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
",
                "name": "OptionalRecord.js",
                "type": "file",
              },
              Object {
                "contents": "export declare type addQuestionMarksToNullableProperties<T> = {
    [K in OptionalKeys<T>]?: T[K];
} & Pick<T, RequiredKeys<T>>;
export declare type OptionalKeys<T> = {
    [K in keyof T]: undefined extends T[K] ? K : null extends T[K] ? K : never;
}[keyof T];
export declare type RequiredKeys<T> = {
    [K in keyof T]: undefined extends T[K] ? never : null extends T[K] ? never : K;
}[keyof T];
",
                "name": "addQuestionMarksToNullableProperties.d.ts",
                "type": "file",
              },
              Object {
                "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
",
                "name": "addQuestionMarksToNullableProperties.js",
                "type": "file",
              },
              Object {
                "contents": "import { MaybeValid, Schema, SchemaOptions, SchemaType } from \\"../Schema\\";
export declare function createIdentitySchemaCreator<T>(schemaType: SchemaType, validate: (value: unknown, opts?: SchemaOptions) => MaybeValid<T>): () => Schema<T, T>;
",
                "name": "createIdentitySchemaCreator.d.ts",
                "type": "file",
              },
              Object {
                "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.createIdentitySchemaCreator = void 0;
const schema_utils_1 = require(\\"../builders/schema-utils\\");
function createIdentitySchemaCreator(schemaType, validate) {
    return () => {
        const baseSchema = {
            parse: validate,
            json: validate,
            getType: () => schemaType,
        };
        return {
            ...baseSchema,
            ...(0, schema_utils_1.getSchemaUtils)(baseSchema),
        };
    };
}
exports.createIdentitySchemaCreator = createIdentitySchemaCreator;
",
                "name": "createIdentitySchemaCreator.js",
                "type": "file",
              },
              Object {
                "contents": "export declare function entries<T>(object: T): [keyof T, T[keyof T]][];
",
                "name": "entries.d.ts",
                "type": "file",
              },
              Object {
                "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.entries = void 0;
function entries(object) {
    return Object.entries(object);
}
exports.entries = entries;
",
                "name": "entries.js",
                "type": "file",
              },
              Object {
                "contents": "export declare function filterObject<T, K extends keyof T>(obj: T, keysToInclude: K[]): Pick<T, K>;
",
                "name": "filterObject.d.ts",
                "type": "file",
              },
              Object {
                "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.filterObject = void 0;
function filterObject(obj, keysToInclude) {
    const keysToIncludeSet = new Set(keysToInclude);
    return Object.entries(obj).reduce((acc, [key, value]) => {
        if (keysToIncludeSet.has(key)) {
            acc[key] = value;
        }
        return acc;
        // eslint-disable-next-line @typescript-eslint/prefer-reduce-type-parameter
    }, {});
}
exports.filterObject = filterObject;
",
                "name": "filterObject.js",
                "type": "file",
              },
              Object {
                "contents": "export declare const NOT_AN_OBJECT_ERROR_MESSAGE = \\"Not an object\\";
export declare function isPlainObject(value: unknown): value is Record<string, unknown>;
",
                "name": "isPlainObject.d.ts",
                "type": "file",
              },
              Object {
                "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.isPlainObject = exports.NOT_AN_OBJECT_ERROR_MESSAGE = void 0;
exports.NOT_AN_OBJECT_ERROR_MESSAGE = \\"Not an object\\";
// borrowed from https://github.com/lodash/lodash/blob/master/isPlainObject.js
function isPlainObject(value) {
    if (typeof value !== \\"object\\" || value === null) {
        return false;
    }
    if (Object.getPrototypeOf(value) === null) {
        return true;
    }
    let proto = value;
    while (Object.getPrototypeOf(proto) !== null) {
        proto = Object.getPrototypeOf(proto);
    }
    return Object.getPrototypeOf(value) === proto;
}
exports.isPlainObject = isPlainObject;
",
                "name": "isPlainObject.js",
                "type": "file",
              },
              Object {
                "contents": "export declare function keys<T>(object: T): (keyof T)[];
",
                "name": "keys.d.ts",
                "type": "file",
              },
              Object {
                "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.keys = void 0;
function keys(object) {
    return Object.keys(object);
}
exports.keys = keys;
",
                "name": "keys.js",
                "type": "file",
              },
              Object {
                "contents": "export declare function partition<T>(items: readonly T[], predicate: (item: T) => boolean): [T[], T[]];
",
                "name": "partition.d.ts",
                "type": "file",
              },
              Object {
                "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.partition = void 0;
function partition(items, predicate) {
    const trueItems = [], falseItems = [];
    for (const item of items) {
        if (predicate(item)) {
            trueItems.push(item);
        }
        else {
            falseItems.push(item);
        }
    }
    return [trueItems, falseItems];
}
exports.partition = partition;
",
                "name": "partition.js",
                "type": "file",
              },
            ],
            "name": "utils",
            "type": "directory",
          },
        ],
        "name": "schemas",
        "type": "directory",
      },
    ],
    "name": "core",
    "type": "directory",
  },
  Object {
    "contents": "export * as FernApi from \\"./api\\";
",
    "name": "index.d.ts",
    "type": "file",
  },
  Object {
    "contents": "\\"use strict\\";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || (\\"get\\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, \\"default\\", { enumerable: true, value: v });
}) : function(o, v) {
    o[\\"default\\"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== \\"default\\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.FernApi = void 0;
exports.FernApi = __importStar(require(\\"./api\\"));
",
    "name": "index.js",
    "type": "file",
  },
  Object {
    "contents": Array [
      Object {
        "contents": "export * from \\"./resources\\";
",
        "name": "index.d.ts",
        "type": "file",
      },
      Object {
        "contents": "\\"use strict\\";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || (\\"get\\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== \\"default\\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
__exportStar(require(\\"./resources\\"), exports);
",
        "name": "index.js",
        "type": "file",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "export * as package_ from \\"./package\\";
export * from \\"./package/types\\";
",
            "name": "index.d.ts",
            "type": "file",
          },
          Object {
            "contents": "\\"use strict\\";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || (\\"get\\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, \\"default\\", { enumerable: true, value: v });
}) : function(o, v) {
    o[\\"default\\"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== \\"default\\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== \\"default\\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.package_ = void 0;
exports.package_ = __importStar(require(\\"./package\\"));
__exportStar(require(\\"./package/types\\"), exports);
",
            "name": "index.js",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./types\\";
",
                "name": "index.d.ts",
                "type": "file",
              },
              Object {
                "contents": "\\"use strict\\";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || (\\"get\\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== \\"default\\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
__exportStar(require(\\"./types\\"), exports);
",
                "name": "index.js",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { FernApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const Package: core.serialization.ObjectSchema<serializers.Package.Raw, FernApi.Package>;
export declare namespace Package {
    interface Raw {
        name: string;
    }
}
",
                    "name": "Package.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || (\\"get\\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, \\"default\\", { enumerable: true, value: v });
}) : function(o, v) {
    o[\\"default\\"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== \\"default\\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.Package = void 0;
const core = __importStar(require(\\"../../../../core\\"));
exports.Package = core.serialization.object({
    name: core.serialization.string(),
});
",
                    "name": "Package.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./Package\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || (\\"get\\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== \\"default\\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
__exportStar(require(\\"./Package\\"), exports);
",
                    "name": "index.js",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "package",
            "type": "directory",
          },
        ],
        "name": "resources",
        "type": "directory",
      },
    ],
    "name": "serialization",
    "type": "directory",
  },
]
`;

exports[`runGenerator trace 1`] = `
Array [
  Object {
    "contents": "node_modules
.DS_Store
dist
Client.d.ts
Client.js
environments.d.ts
environments.js
index.d.ts
index.js
api
core
serialization

# yarn berry
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/sdks
!.yarn/versions",
    "name": ".gitignore",
    "type": "file",
  },
  Object {
    "contents": "tabWidth: 4
printWidth: 120
",
    "name": ".prettierrc.yml",
    "type": "file",
  },
  Object {
    "contents": "{
    \\"name\\": \\"@fern-trace/api-sdk\\",
    \\"version\\": \\"\\",
    \\"files\\": [
        \\"./Client.d.ts\\",
        \\"./Client.js\\",
        \\"./environments.d.ts\\",
        \\"./environments.js\\",
        \\"./index.d.ts\\",
        \\"./index.js\\",
        \\"./api\\",
        \\"./core\\",
        \\"./serialization\\"
    ],
    \\"main\\": \\"./index.js\\",
    \\"types\\": \\"./index.d.ts\\",
    \\"scripts\\": {
        \\"format\\": \\"prettier --write 'src/**/*.ts'\\",
        \\"build\\": \\"tsc && tsc-alias\\",
        \\"prepack\\": \\"cp -r dist/* .\\"
    },
    \\"dependencies\\": {
        \\"@types/basic-auth\\": \\"^1.1.3\\",
        \\"@types/url-join\\": \\"4.0.1\\",
        \\"axios\\": \\"^0.27.2\\",
        \\"basic-auth\\": \\"^2.0.1\\",
        \\"buffer\\": \\"^6.0.3\\",
        \\"js-base64\\": \\"^3.7.2\\",
        \\"url-join\\": \\"4.0.1\\"
    },
    \\"devDependencies\\": {
        \\"@types/node\\": \\"17.0.33\\",
        \\"prettier\\": \\"2.7.1\\",
        \\"tsc-alias\\": \\"1.7.1\\",
        \\"typescript\\": \\"4.6.4\\"
    }
}
",
    "name": "package.json",
    "type": "file",
  },
  Object {
    "contents": Array [
      Object {
        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from \\"./environments\\";
import * as core from \\"./core\\";
import { Client as AdminClient } from \\"./api/resources/admin/client/Client\\";
import { Client as HomepageClient } from \\"./api/resources/homepage/client/Client\\";
import { Client as MigrationClient } from \\"./api/resources/migration/client/Client\\";
import { Client as PlaylistClient } from \\"./api/resources/playlist/client/Client\\";
import { Client as ProblemClient } from \\"./api/resources/problem/client/Client\\";
import { Client as SubmissionClient } from \\"./api/resources/submission/client/Client\\";
import { Client as SyspropClient } from \\"./api/resources/sysprop/client/Client\\";
import { Client as V2Client } from \\"./api/resources/v2/client/Client\\";

export declare namespace TraceApiClient {
    interface Options {
        environment?: environments.TraceApiEnvironment | string;
        token?: core.Supplier<core.BearerToken>;
    }
}

export class TraceApiClient {
    constructor(private readonly options: TraceApiClient.Options) {}

    private _admin: AdminClient | undefined;

    public get admin(): AdminClient {
        return (this._admin ??= new AdminClient(this.options));
    }

    private _homepage: HomepageClient | undefined;

    public get homepage(): HomepageClient {
        return (this._homepage ??= new HomepageClient(this.options));
    }

    private _migration: MigrationClient | undefined;

    public get migration(): MigrationClient {
        return (this._migration ??= new MigrationClient(this.options));
    }

    private _playlist: PlaylistClient | undefined;

    public get playlist(): PlaylistClient {
        return (this._playlist ??= new PlaylistClient(this.options));
    }

    private _problem: ProblemClient | undefined;

    public get problem(): ProblemClient {
        return (this._problem ??= new ProblemClient(this.options));
    }

    private _submission: SubmissionClient | undefined;

    public get submission(): SubmissionClient {
        return (this._submission ??= new SubmissionClient(this.options));
    }

    private _sysprop: SyspropClient | undefined;

    public get sysprop(): SyspropClient {
        return (this._sysprop ??= new SyspropClient(this.options));
    }

    private _v2: V2Client | undefined;

    public get v2(): V2Client {
        return (this._v2 ??= new V2Client(this.options));
    }
}
",
        "name": "Client.ts",
        "type": "file",
      },
      Object {
        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export const TraceApiEnvironment = {
    Prod: \\"prod.trace.com\\",
    /**
     * i'm staging
     */
    Staging: \\"staging.trace.com\\",
} as const;

export type TraceApiEnvironment = typeof TraceApiEnvironment.Prod | typeof TraceApiEnvironment.Staging;
",
        "name": "environments.ts",
        "type": "file",
      },
      Object {
        "contents": "export * as TraceApi from \\"./api\\";
export { TraceApiClient } from \\"./Client\\";
export { TraceApiEnvironment } from \\"./environments\\";
",
        "name": "index.ts",
        "type": "file",
      },
    ],
    "name": "src",
    "type": "directory",
  },
  Object {
    "contents": "{
    \\"compilerOptions\\": {
        \\"extendedDiagnostics\\": true,
        \\"strict\\": true,
        \\"target\\": \\"esnext\\",
        \\"module\\": \\"CommonJS\\",
        \\"moduleResolution\\": \\"node\\",
        \\"esModuleInterop\\": true,
        \\"skipLibCheck\\": true,
        \\"declaration\\": true,
        \\"noUnusedLocals\\": true,
        \\"noUnusedParameters\\": true,
        \\"outDir\\": \\"dist\\",
        \\"rootDir\\": \\"src\\",
        \\"baseUrl\\": \\"src\\",
        \\"paths\\": {
            \\"@fern-trace/api-sdk\\": [
                \\".\\"
            ]
        }
    },
    \\"include\\": [
        \\"src\\"
    ],
    \\"exclude\\": []
}",
    "name": "tsconfig.json",
    "type": "file",
  },
]
`;
