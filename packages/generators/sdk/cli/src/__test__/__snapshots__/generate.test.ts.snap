// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`runGenerator trace 1`] = `
Array [
  Object {
    "contents": "tsconfig.json
.pnp.*
.yarn
yarn.lock
*.ts
!*.d.ts",
    "name": ".npmignore",
    "type": "file",
  },
  Object {
    "contents": Array [
      Object {
        "contents": "import { BearerToken, BasicAuth } from \\"@fern-typescript/service-utils\\";
import { Client as AdminServiceClient } from \\"./admin/client/Client\\";
import urlJoin from \\"url-join\\";
import { Client as HomepageProblemServiceClient } from \\"./homepage/client/Client\\";
import { Client as MigrationInfoServiceClient } from \\"./migration/client/Client\\";
import { Client as PlaylistCrudServiceClient } from \\"./playlist/client/Client\\";
import { Client as ProblemCrudServiceClient } from \\"./problem/client/Client\\";
import { Client as ExecutionSesssionManagementServiceClient } from \\"./submission/client/Client\\";
import { Client as SysPropCrudServiceClient } from \\"./sysprop/client/Client\\";
import { Wrapper as V2Wrapper } from \\"./v2/Wrapper\\";

export namespace Client {
    export interface Options {
        _origin: string;
        _token?: BearerToken;
        _credentials?: BasicAuth;
        xApiKey?: string;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {
    }

    #admin: AdminServiceClient | undefined;

    public get admin(): AdminServiceClient {
        return (this.#admin ??= new AdminServiceClient({
            _basePath: urlJoin(this.options._origin, \\"/admin\\"),
            _token: this.options._token,
            _credentials: this.options._credentials,
            xApiKey: this.options.xApiKey
        }));
    }

    #homepage: HomepageProblemServiceClient | undefined;

    public get homepage(): HomepageProblemServiceClient {
        return (this.#homepage ??= new HomepageProblemServiceClient({
            _basePath: urlJoin(this.options._origin, \\"/homepage-problems\\"),
            _token: this.options._token,
            _credentials: this.options._credentials,
            xApiKey: this.options.xApiKey
        }));
    }

    #migration: MigrationInfoServiceClient | undefined;

    public get migration(): MigrationInfoServiceClient {
        return (this.#migration ??= new MigrationInfoServiceClient({
            _basePath: urlJoin(this.options._origin, \\"/migration-info\\"),
            _token: this.options._token,
            _credentials: this.options._credentials,
            xApiKey: this.options.xApiKey
        }));
    }

    #playlist: PlaylistCrudServiceClient | undefined;

    public get playlist(): PlaylistCrudServiceClient {
        return (this.#playlist ??= new PlaylistCrudServiceClient({
            _basePath: urlJoin(this.options._origin, \\"/v2/playlist\\"),
            _token: this.options._token,
            _credentials: this.options._credentials,
            xApiKey: this.options.xApiKey
        }));
    }

    #problem: ProblemCrudServiceClient | undefined;

    public get problem(): ProblemCrudServiceClient {
        return (this.#problem ??= new ProblemCrudServiceClient({
            _basePath: urlJoin(this.options._origin, \\"/problem-crud\\"),
            _token: this.options._token,
            _credentials: this.options._credentials,
            xApiKey: this.options.xApiKey
        }));
    }

    #submission: ExecutionSesssionManagementServiceClient | undefined;

    public get submission(): ExecutionSesssionManagementServiceClient {
        return (this.#submission ??= new ExecutionSesssionManagementServiceClient({
            _basePath: urlJoin(this.options._origin, \\"/sessions\\"),
            _token: this.options._token,
            _credentials: this.options._credentials,
            xApiKey: this.options.xApiKey
        }));
    }

    #sysprop: SysPropCrudServiceClient | undefined;

    public get sysprop(): SysPropCrudServiceClient {
        return (this.#sysprop ??= new SysPropCrudServiceClient({
            _basePath: urlJoin(this.options._origin, \\"/sysprop\\"),
            _token: this.options._token,
            _credentials: this.options._credentials,
            xApiKey: this.options.xApiKey
        }));
    }

    #v2: V2Wrapper | undefined;

    public get v2(): V2Wrapper {
        return (this.#v2 ??= new V2Wrapper(this.options));
    }
}
",
        "name": "Client.ts",
        "type": "file",
      },
      Object {
        "contents": Array [
          Object {
            "contents": Array [
              Object {
                "contents": "import { BearerToken, BasicAuth, _NetworkError, _UnknownError, ErrorDetails, _Response, defaultFetcherV2 } from \\"@fern-typescript/service-utils\\";
import { MyApi } from \\"../../..\\";
import urlJoin from \\"url-join\\";

export interface Client {
    updateTestSubmissionStatus(request: MyApi.admin.updateTestSubmissionStatus.Request): Promise<_Response<void, MyApi.admin.updateTestSubmissionStatus.Error>>;
    sendTestSubmissionUpdate(request: MyApi.admin.sendTestSubmissionUpdate.Request): Promise<_Response<void, MyApi.admin.sendTestSubmissionUpdate.Error>>;
    updateWorkspaceSubmissionStatus(request: MyApi.admin.updateWorkspaceSubmissionStatus.Request): Promise<_Response<void, MyApi.admin.updateWorkspaceSubmissionStatus.Error>>;
    sendWorkspaceSubmissionUpdate(request: MyApi.admin.sendWorkspaceSubmissionUpdate.Request): Promise<_Response<void, MyApi.admin.sendWorkspaceSubmissionUpdate.Error>>;
    storeTracedTestCase(request: MyApi.admin.storeTracedTestCase.Request): Promise<_Response<void, MyApi.admin.storeTracedTestCase.Error>>;
    storeTracedTestCaseV2(request: MyApi.admin.storeTracedTestCaseV2.Request): Promise<_Response<void, MyApi.admin.storeTracedTestCaseV2.Error>>;
    storeTracedWorkspace(request: MyApi.admin.storeTracedWorkspace.Request): Promise<_Response<void, MyApi.admin.storeTracedWorkspace.Error>>;
    storeTracedWorkspaceV2(request: MyApi.admin.storeTracedWorkspaceV2.Request): Promise<_Response<void, MyApi.admin.storeTracedWorkspaceV2.Error>>;
}

export declare namespace Client {
    interface Options {
        _basePath: string;
        _token?: BearerToken;
        _credentials?: BasicAuth;
        xApiKey?: string;
    }
}

export class Client implements Client {
    constructor(private readonly options: Client.Options) {
    }

    public async updateTestSubmissionStatus(request: MyApi.admin.updateTestSubmissionStatus.Request): Promise<_Response<void, MyApi.admin.updateTestSubmissionStatus.Error>> {
        const response = await defaultFetcherV2({
                url: urlJoin(this.options._basePath, \`/store-test-submission-status/\${request.submissionId}\`),
                method: \\"POST\\",
                headers: {
                    \\"Authorization\\": this.options._token != null ? BearerToken.toAuthorizationHeader(this.options._token) : this.options._credentials != null ? BasicAuth.toAuthorizationHeader(this.options._credentials) : undefined,
                    \\"X-API-Key\\": this.options.xApiKey
                },
                body: request.body
            });

        if (response.ok) {
            return {
                ok: true,
                body: undefined
            };
        }

        if (response.type === \\"networkError\\") {
            return {
                ok: false,
                error: {
                    body: { _error: \\"_NetworkError\\" },
                    _visit: visitor => visitor._network()
                }
            };
        }

        return {
            ok: false,
            error: {
                body: response.body as _UnknownError,
                _visit: visitor => visitor._unknown({ statusCode: response.statusCode })
            }
        };
    }

    public async sendTestSubmissionUpdate(request: MyApi.admin.sendTestSubmissionUpdate.Request): Promise<_Response<void, MyApi.admin.sendTestSubmissionUpdate.Error>> {
        const response = await defaultFetcherV2({
                url: urlJoin(this.options._basePath, \`/store-test-submission-status-v2/\${request.submissionId}\`),
                method: \\"POST\\",
                headers: {
                    \\"Authorization\\": this.options._token != null ? BearerToken.toAuthorizationHeader(this.options._token) : this.options._credentials != null ? BasicAuth.toAuthorizationHeader(this.options._credentials) : undefined,
                    \\"X-API-Key\\": this.options.xApiKey
                },
                body: request.body
            });

        if (response.ok) {
            return {
                ok: true,
                body: undefined
            };
        }

        if (response.type === \\"networkError\\") {
            return {
                ok: false,
                error: {
                    body: { _error: \\"_NetworkError\\" },
                    _visit: visitor => visitor._network()
                }
            };
        }

        return {
            ok: false,
            error: {
                body: response.body as _UnknownError,
                _visit: visitor => visitor._unknown({ statusCode: response.statusCode })
            }
        };
    }

    public async updateWorkspaceSubmissionStatus(request: MyApi.admin.updateWorkspaceSubmissionStatus.Request): Promise<_Response<void, MyApi.admin.updateWorkspaceSubmissionStatus.Error>> {
        const response = await defaultFetcherV2({
                url: urlJoin(this.options._basePath, \`/store-workspace-submission-status/\${request.submissionId}\`),
                method: \\"POST\\",
                headers: {
                    \\"Authorization\\": this.options._token != null ? BearerToken.toAuthorizationHeader(this.options._token) : this.options._credentials != null ? BasicAuth.toAuthorizationHeader(this.options._credentials) : undefined,
                    \\"X-API-Key\\": this.options.xApiKey
                },
                body: request.body
            });

        if (response.ok) {
            return {
                ok: true,
                body: undefined
            };
        }

        if (response.type === \\"networkError\\") {
            return {
                ok: false,
                error: {
                    body: { _error: \\"_NetworkError\\" },
                    _visit: visitor => visitor._network()
                }
            };
        }

        return {
            ok: false,
            error: {
                body: response.body as _UnknownError,
                _visit: visitor => visitor._unknown({ statusCode: response.statusCode })
            }
        };
    }

    public async sendWorkspaceSubmissionUpdate(request: MyApi.admin.sendWorkspaceSubmissionUpdate.Request): Promise<_Response<void, MyApi.admin.sendWorkspaceSubmissionUpdate.Error>> {
        const response = await defaultFetcherV2({
                url: urlJoin(this.options._basePath, \`/store-workspace-submission-status-v2/\${request.submissionId}\`),
                method: \\"POST\\",
                headers: {
                    \\"Authorization\\": this.options._token != null ? BearerToken.toAuthorizationHeader(this.options._token) : this.options._credentials != null ? BasicAuth.toAuthorizationHeader(this.options._credentials) : undefined,
                    \\"X-API-Key\\": this.options.xApiKey
                },
                body: request.body
            });

        if (response.ok) {
            return {
                ok: true,
                body: undefined
            };
        }

        if (response.type === \\"networkError\\") {
            return {
                ok: false,
                error: {
                    body: { _error: \\"_NetworkError\\" },
                    _visit: visitor => visitor._network()
                }
            };
        }

        return {
            ok: false,
            error: {
                body: response.body as _UnknownError,
                _visit: visitor => visitor._unknown({ statusCode: response.statusCode })
            }
        };
    }

    public async storeTracedTestCase(request: MyApi.admin.storeTracedTestCase.Request): Promise<_Response<void, MyApi.admin.storeTracedTestCase.Error>> {
        const response = await defaultFetcherV2({
                url: urlJoin(this.options._basePath, \`/store-test-trace/submission/\${request.submissionId}/testCase/\${request.testCaseId}\`),
                method: \\"POST\\",
                headers: {
                    \\"Authorization\\": this.options._token != null ? BearerToken.toAuthorizationHeader(this.options._token) : this.options._credentials != null ? BasicAuth.toAuthorizationHeader(this.options._credentials) : undefined,
                    \\"X-API-Key\\": this.options.xApiKey
                },
                body: request.body
            });

        if (response.ok) {
            return {
                ok: true,
                body: undefined
            };
        }

        if (response.type === \\"networkError\\") {
            return {
                ok: false,
                error: {
                    body: { _error: \\"_NetworkError\\" },
                    _visit: visitor => visitor._network()
                }
            };
        }

        return {
            ok: false,
            error: {
                body: response.body as _UnknownError,
                _visit: visitor => visitor._unknown({ statusCode: response.statusCode })
            }
        };
    }

    public async storeTracedTestCaseV2(request: MyApi.admin.storeTracedTestCaseV2.Request): Promise<_Response<void, MyApi.admin.storeTracedTestCaseV2.Error>> {
        const response = await defaultFetcherV2({
                url: urlJoin(this.options._basePath, \`/store-test-trace-v2/submission/\${request.submissionId}/testCase/\${request.testCaseId}\`),
                method: \\"POST\\",
                headers: {
                    \\"Authorization\\": this.options._token != null ? BearerToken.toAuthorizationHeader(this.options._token) : this.options._credentials != null ? BasicAuth.toAuthorizationHeader(this.options._credentials) : undefined,
                    \\"X-API-Key\\": this.options.xApiKey
                },
                body: request.body
            });

        if (response.ok) {
            return {
                ok: true,
                body: undefined
            };
        }

        if (response.type === \\"networkError\\") {
            return {
                ok: false,
                error: {
                    body: { _error: \\"_NetworkError\\" },
                    _visit: visitor => visitor._network()
                }
            };
        }

        return {
            ok: false,
            error: {
                body: response.body as _UnknownError,
                _visit: visitor => visitor._unknown({ statusCode: response.statusCode })
            }
        };
    }

    public async storeTracedWorkspace(request: MyApi.admin.storeTracedWorkspace.Request): Promise<_Response<void, MyApi.admin.storeTracedWorkspace.Error>> {
        const response = await defaultFetcherV2({
                url: urlJoin(this.options._basePath, \`/store-workspace-trace/submission/\${request.submissionId}\`),
                method: \\"POST\\",
                headers: {
                    \\"Authorization\\": this.options._token != null ? BearerToken.toAuthorizationHeader(this.options._token) : this.options._credentials != null ? BasicAuth.toAuthorizationHeader(this.options._credentials) : undefined,
                    \\"X-API-Key\\": this.options.xApiKey
                },
                body: request.body
            });

        if (response.ok) {
            return {
                ok: true,
                body: undefined
            };
        }

        if (response.type === \\"networkError\\") {
            return {
                ok: false,
                error: {
                    body: { _error: \\"_NetworkError\\" },
                    _visit: visitor => visitor._network()
                }
            };
        }

        return {
            ok: false,
            error: {
                body: response.body as _UnknownError,
                _visit: visitor => visitor._unknown({ statusCode: response.statusCode })
            }
        };
    }

    public async storeTracedWorkspaceV2(request: MyApi.admin.storeTracedWorkspaceV2.Request): Promise<_Response<void, MyApi.admin.storeTracedWorkspaceV2.Error>> {
        const response = await defaultFetcherV2({
                url: urlJoin(this.options._basePath, \`/store-workspace-trace-v2/submission/\${request.submissionId}\`),
                method: \\"POST\\",
                headers: {
                    \\"Authorization\\": this.options._token != null ? BearerToken.toAuthorizationHeader(this.options._token) : this.options._credentials != null ? BasicAuth.toAuthorizationHeader(this.options._credentials) : undefined,
                    \\"X-API-Key\\": this.options.xApiKey
                },
                body: request.body
            });

        if (response.ok) {
            return {
                ok: true,
                body: undefined
            };
        }

        if (response.type === \\"networkError\\") {
            return {
                ok: false,
                error: {
                    body: { _error: \\"_NetworkError\\" },
                    _visit: visitor => visitor._network()
                }
            };
        }

        return {
            ok: false,
            error: {
                body: response.body as _UnknownError,
                _visit: visitor => visitor._unknown({ statusCode: response.statusCode })
            }
        };
    }
}

export namespace updateTestSubmissionStatus {
    export interface Request {
        submissionId: MyApi.submission.SubmissionId;
        body: MyApi.submission.TestSubmissionStatus;
    }

    export interface Error {
        body: 
            | _NetworkError
            | _UnknownError;
        _visit: <Result>(visitor: MyApi.admin.updateTestSubmissionStatus.ErrorVisitor<Result>) => Result;
    }

    export interface ErrorVisitor<Result> {
        _network: () => Result;
        _unknown: (details: ErrorDetails) => Result;
    }
}

export namespace sendTestSubmissionUpdate {
    export interface Request {
        submissionId: MyApi.submission.SubmissionId;
        body: MyApi.submission.TestSubmissionUpdate;
    }

    export interface Error {
        body: 
            | _NetworkError
            | _UnknownError;
        _visit: <Result>(visitor: MyApi.admin.sendTestSubmissionUpdate.ErrorVisitor<Result>) => Result;
    }

    export interface ErrorVisitor<Result> {
        _network: () => Result;
        _unknown: (details: ErrorDetails) => Result;
    }
}

export namespace updateWorkspaceSubmissionStatus {
    export interface Request {
        submissionId: MyApi.submission.SubmissionId;
        body: MyApi.submission.WorkspaceSubmissionStatus;
    }

    export interface Error {
        body: 
            | _NetworkError
            | _UnknownError;
        _visit: <Result>(visitor: MyApi.admin.updateWorkspaceSubmissionStatus.ErrorVisitor<Result>) => Result;
    }

    export interface ErrorVisitor<Result> {
        _network: () => Result;
        _unknown: (details: ErrorDetails) => Result;
    }
}

export namespace sendWorkspaceSubmissionUpdate {
    export interface Request {
        submissionId: MyApi.submission.SubmissionId;
        body: MyApi.submission.WorkspaceSubmissionUpdate;
    }

    export interface Error {
        body: 
            | _NetworkError
            | _UnknownError;
        _visit: <Result>(visitor: MyApi.admin.sendWorkspaceSubmissionUpdate.ErrorVisitor<Result>) => Result;
    }

    export interface ErrorVisitor<Result> {
        _network: () => Result;
        _unknown: (details: ErrorDetails) => Result;
    }
}

export namespace storeTracedTestCase {
    export interface Request {
        submissionId: MyApi.submission.SubmissionId;
        testCaseId: string;
        body: MyApi.admin.StoreTracedTestCaseRequest;
    }

    export interface Error {
        body: 
            | _NetworkError
            | _UnknownError;
        _visit: <Result>(visitor: MyApi.admin.storeTracedTestCase.ErrorVisitor<Result>) => Result;
    }

    export interface ErrorVisitor<Result> {
        _network: () => Result;
        _unknown: (details: ErrorDetails) => Result;
    }
}

export namespace storeTracedTestCaseV2 {
    export interface Request {
        submissionId: MyApi.submission.SubmissionId;
        testCaseId: MyApi.v2.problem.TestCaseId;
        body: MyApi.submission.TraceResponseV2[];
    }

    export interface Error {
        body: 
            | _NetworkError
            | _UnknownError;
        _visit: <Result>(visitor: MyApi.admin.storeTracedTestCaseV2.ErrorVisitor<Result>) => Result;
    }

    export interface ErrorVisitor<Result> {
        _network: () => Result;
        _unknown: (details: ErrorDetails) => Result;
    }
}

export namespace storeTracedWorkspace {
    export interface Request {
        submissionId: MyApi.submission.SubmissionId;
        body: MyApi.admin.StoreTracedWorkspaceRequest;
    }

    export interface Error {
        body: 
            | _NetworkError
            | _UnknownError;
        _visit: <Result>(visitor: MyApi.admin.storeTracedWorkspace.ErrorVisitor<Result>) => Result;
    }

    export interface ErrorVisitor<Result> {
        _network: () => Result;
        _unknown: (details: ErrorDetails) => Result;
    }
}

export namespace storeTracedWorkspaceV2 {
    export interface Request {
        submissionId: MyApi.submission.SubmissionId;
        body: MyApi.submission.TraceResponseV2[];
    }

    export interface Error {
        body: 
            | _NetworkError
            | _UnknownError;
        _visit: <Result>(visitor: MyApi.admin.storeTracedWorkspaceV2.ErrorVisitor<Result>) => Result;
    }

    export interface ErrorVisitor<Result> {
        _network: () => Result;
        _unknown: (details: ErrorDetails) => Result;
    }
}
",
                "name": "Client.ts",
                "type": "file",
              },
              Object {
                "contents": "export { updateTestSubmissionStatus, sendTestSubmissionUpdate, updateWorkspaceSubmissionStatus, sendWorkspaceSubmissionUpdate, storeTracedTestCase, storeTracedTestCaseV2, storeTracedWorkspace, storeTracedWorkspaceV2 } from \\"./Client\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "client",
            "type": "directory",
          },
          Object {
            "contents": "export * from \\"./types\\";
export * from \\"./client\\";
",
            "name": "index.ts",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface StoreTracedTestCaseRequest {
    result: MyApi.submission.TestCaseResultWithStdout;
    traceResponses: MyApi.submission.TraceResponse[];
}
",
                "name": "StoreTracedTestCaseRequest.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface StoreTracedWorkspaceRequest {
    workspaceRunDetails: MyApi.submission.WorkspaceRunDetails;
    traceResponses: MyApi.submission.TraceResponse[];
}
",
                "name": "StoreTracedWorkspaceRequest.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./StoreTracedTestCaseRequest\\";
export * from \\"./StoreTracedWorkspaceRequest\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "types",
            "type": "directory",
          },
        ],
        "name": "admin",
        "type": "directory",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "export * from \\"./types\\";
",
            "name": "index.ts",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface BinaryTreeNodeAndTreeValue {
    nodeId: MyApi.commons.NodeId;
    fullTree: MyApi.commons.BinaryTreeValue;
}
",
                "name": "BinaryTreeNodeAndTreeValue.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface BinaryTreeNodeValue {
    nodeId: MyApi.commons.NodeId;
    val: number;
    right?: MyApi.commons.NodeId;
    left?: MyApi.commons.NodeId;
}
",
                "name": "BinaryTreeNodeValue.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface BinaryTreeValue {
    root?: MyApi.commons.NodeId;
    nodes: Record<MyApi.commons.NodeId, MyApi.commons.BinaryTreeNodeValue>;
}
",
                "name": "BinaryTreeValue.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface DebugKeyValuePairs {
    key: MyApi.commons.DebugVariableValue;
    value: MyApi.commons.DebugVariableValue;
}
",
                "name": "DebugKeyValuePairs.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface DebugMapValue {
    keyValuePairs: MyApi.commons.DebugKeyValuePairs[];
}
",
                "name": "DebugMapValue.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export type DebugVariableValue = 
    | DebugVariableValue.IntegerValue
    | DebugVariableValue.BooleanValue
    | DebugVariableValue.DoubleValue
    | DebugVariableValue.StringValue
    | DebugVariableValue.CharValue
    | DebugVariableValue.MapValue
    | DebugVariableValue.ListValue
    | DebugVariableValue.BinaryTreeNodeValue
    | DebugVariableValue.SinglyLinkedListNodeValue
    | DebugVariableValue.DoublyLinkedListNodeValue
    | DebugVariableValue.UndefinedValue
    | DebugVariableValue.NullValue
    | DebugVariableValue.GenericValue;

export declare namespace DebugVariableValue {
    interface IntegerValue {
        type: \\"integerValue\\";
        integerValue: number;
    }

    interface BooleanValue {
        type: \\"booleanValue\\";
        booleanValue: boolean;
    }

    interface DoubleValue {
        type: \\"doubleValue\\";
        doubleValue: number;
    }

    interface StringValue {
        type: \\"stringValue\\";
        stringValue: string;
    }

    interface CharValue {
        type: \\"charValue\\";
        charValue: string;
    }

    interface MapValue extends MyApi.commons.DebugMapValue {
        type: \\"mapValue\\";
    }

    interface ListValue {
        type: \\"listValue\\";
        listValue: MyApi.commons.DebugVariableValue[];
    }

    interface BinaryTreeNodeValue extends MyApi.commons.BinaryTreeNodeAndTreeValue {
        type: \\"binaryTreeNodeValue\\";
    }

    interface SinglyLinkedListNodeValue extends MyApi.commons.SinglyLinkedListNodeAndListValue {
        type: \\"singlyLinkedListNodeValue\\";
    }

    interface DoublyLinkedListNodeValue extends MyApi.commons.DoublyLinkedListNodeAndListValue {
        type: \\"doublyLinkedListNodeValue\\";
    }

    interface UndefinedValue {
        type: \\"undefinedValue\\";
    }

    interface NullValue {
        type: \\"nullValue\\";
    }

    interface GenericValue extends MyApi.commons.GenericValue {
        type: \\"genericValue\\";
    }

    export interface _Visitor<Result> {
        integerValue: (value: number) => Result;
        booleanValue: (value: boolean) => Result;
        doubleValue: (value: number) => Result;
        stringValue: (value: string) => Result;
        charValue: (value: string) => Result;
        mapValue: (value: MyApi.commons.DebugMapValue) => Result;
        listValue: (value: MyApi.commons.DebugVariableValue[]) => Result;
        binaryTreeNodeValue: (value: MyApi.commons.BinaryTreeNodeAndTreeValue) => Result;
        singlyLinkedListNodeValue: (value: MyApi.commons.SinglyLinkedListNodeAndListValue) => Result;
        doublyLinkedListNodeValue: (value: MyApi.commons.DoublyLinkedListNodeAndListValue) => Result;
        undefinedValue: () => Result;
        nullValue: () => Result;
        genericValue: (value: MyApi.commons.GenericValue) => Result;
        _unknown: () => Result;
    }
}

export const DebugVariableValue = {
        integerValue: (value: number): DebugVariableValue.IntegerValue => ({
            integerValue: value,
            type: \\"integerValue\\"
        }),

        booleanValue: (value: boolean): DebugVariableValue.BooleanValue => ({
            booleanValue: value,
            type: \\"booleanValue\\"
        }),

        doubleValue: (value: number): DebugVariableValue.DoubleValue => ({
            doubleValue: value,
            type: \\"doubleValue\\"
        }),

        stringValue: (value: string): DebugVariableValue.StringValue => ({
            stringValue: value,
            type: \\"stringValue\\"
        }),

        charValue: (value: string): DebugVariableValue.CharValue => ({
            charValue: value,
            type: \\"charValue\\"
        }),

        mapValue: (value: MyApi.commons.DebugMapValue): DebugVariableValue.MapValue => ({
            ...value,
            type: \\"mapValue\\"
        }),

        listValue: (value: MyApi.commons.DebugVariableValue[]): DebugVariableValue.ListValue => ({
            listValue: value,
            type: \\"listValue\\"
        }),

        binaryTreeNodeValue: (value: MyApi.commons.BinaryTreeNodeAndTreeValue): DebugVariableValue.BinaryTreeNodeValue => ({
            ...value,
            type: \\"binaryTreeNodeValue\\"
        }),

        singlyLinkedListNodeValue: (value: MyApi.commons.SinglyLinkedListNodeAndListValue): DebugVariableValue.SinglyLinkedListNodeValue => ({
            ...value,
            type: \\"singlyLinkedListNodeValue\\"
        }),

        doublyLinkedListNodeValue: (value: MyApi.commons.DoublyLinkedListNodeAndListValue): DebugVariableValue.DoublyLinkedListNodeValue => ({
            ...value,
            type: \\"doublyLinkedListNodeValue\\"
        }),

        undefinedValue: (): DebugVariableValue.UndefinedValue => ({
            type: \\"undefinedValue\\"
        }),

        nullValue: (): DebugVariableValue.NullValue => ({
            type: \\"nullValue\\"
        }),

        genericValue: (value: MyApi.commons.GenericValue): DebugVariableValue.GenericValue => ({
            ...value,
            type: \\"genericValue\\"
        }),

        _visit: <Result>(value: DebugVariableValue, visitor: DebugVariableValue._Visitor<Result>): Result => {
            switch (value.type) {
                case \\"integerValue\\": return visitor.integerValue(value.integerValue);
                case \\"booleanValue\\": return visitor.booleanValue(value.booleanValue);
                case \\"doubleValue\\": return visitor.doubleValue(value.doubleValue);
                case \\"stringValue\\": return visitor.stringValue(value.stringValue);
                case \\"charValue\\": return visitor.charValue(value.charValue);
                case \\"mapValue\\": return visitor.mapValue(value);
                case \\"listValue\\": return visitor.listValue(value.listValue);
                case \\"binaryTreeNodeValue\\": return visitor.binaryTreeNodeValue(value);
                case \\"singlyLinkedListNodeValue\\": return visitor.singlyLinkedListNodeValue(value);
                case \\"doublyLinkedListNodeValue\\": return visitor.doublyLinkedListNodeValue(value);
                case \\"undefinedValue\\": return visitor.undefinedValue();
                case \\"nullValue\\": return visitor.nullValue();
                case \\"genericValue\\": return visitor.genericValue(value);
                default: return visitor._unknown();
            }
        },

        _types: (): DebugVariableValue[\\"type\\"][] => [\\"integerValue\\", \\"booleanValue\\", \\"doubleValue\\", \\"stringValue\\", \\"charValue\\", \\"mapValue\\", \\"listValue\\", \\"binaryTreeNodeValue\\", \\"singlyLinkedListNodeValue\\", \\"doublyLinkedListNodeValue\\", \\"undefinedValue\\", \\"nullValue\\", \\"genericValue\\"],
    } as const;
",
                "name": "DebugVariableValue.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface DoublyLinkedListNodeAndListValue {
    nodeId: MyApi.commons.NodeId;
    fullList: MyApi.commons.DoublyLinkedListValue;
}
",
                "name": "DoublyLinkedListNodeAndListValue.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface DoublyLinkedListNodeValue {
    nodeId: MyApi.commons.NodeId;
    val: number;
    next?: MyApi.commons.NodeId;
    prev?: MyApi.commons.NodeId;
}
",
                "name": "DoublyLinkedListNodeValue.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface DoublyLinkedListValue {
    head?: MyApi.commons.NodeId;
    nodes: Record<MyApi.commons.NodeId, MyApi.commons.DoublyLinkedListNodeValue>;
}
",
                "name": "DoublyLinkedListValue.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface FileInfo {
    filename: string;
    contents: string;
}
",
                "name": "FileInfo.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface GenericValue {
    stringifiedType?: string;
    stringifiedValue: string;
}
",
                "name": "GenericValue.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface KeyValuePair {
    key: MyApi.commons.VariableValue;
    value: MyApi.commons.VariableValue;
}
",
                "name": "KeyValuePair.ts",
                "type": "file",
              },
              Object {
                "contents": "export type Language = 
    | \\"JAVA\\"
    | \\"JAVASCRIPT\\"
    | \\"PYTHON\\";

export const Language = {
        Java: \\"JAVA\\",
        Javascript: \\"JAVASCRIPT\\",
        Python: \\"PYTHON\\",

        _visit: <Result>(value: Language, visitor: Language._Visitor<Result>): Result => {
            switch (value) {
                case Language.Java: return visitor.java();
                case Language.Javascript: return visitor.javascript();
                case Language.Python: return visitor.python();
                default: return visitor._unknown();
            }
        },

        _values: (): Language[] => [Language.Java, Language.Javascript, Language.Python],
    } as const;

export declare namespace Language {
    type Java = \\"JAVA\\";
    type Javascript = \\"JAVASCRIPT\\";
    type Python = \\"PYTHON\\";

    export interface _Visitor<Result> {
        java: () => Result;
        javascript: () => Result;
        python: () => Result;
        _unknown: () => Result;
    }
}
",
                "name": "Language.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface ListType {
    valueType: MyApi.commons.VariableType;
    /** Whether this list is fixed-size (for languages that supports fixed-size lists). Defaults to false. */
    isFixedLength?: boolean;
}
",
                "name": "ListType.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface MapType {
    keyType: MyApi.commons.VariableType;
    valueType: MyApi.commons.VariableType;
}
",
                "name": "MapType.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface MapValue {
    keyValuePairs: MyApi.commons.KeyValuePair[];
}
",
                "name": "MapValue.ts",
                "type": "file",
              },
              Object {
                "contents": "export type NodeId = string;
",
                "name": "NodeId.ts",
                "type": "file",
              },
              Object {
                "contents": "export type ProblemId = string;
",
                "name": "ProblemId.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface SinglyLinkedListNodeAndListValue {
    nodeId: MyApi.commons.NodeId;
    fullList: MyApi.commons.SinglyLinkedListValue;
}
",
                "name": "SinglyLinkedListNodeAndListValue.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface SinglyLinkedListNodeValue {
    nodeId: MyApi.commons.NodeId;
    val: number;
    next?: MyApi.commons.NodeId;
}
",
                "name": "SinglyLinkedListNodeValue.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface SinglyLinkedListValue {
    head?: MyApi.commons.NodeId;
    nodes: Record<MyApi.commons.NodeId, MyApi.commons.SinglyLinkedListNodeValue>;
}
",
                "name": "SinglyLinkedListValue.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface TestCase {
    id: string;
    params: MyApi.commons.VariableValue[];
}
",
                "name": "TestCase.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface TestCaseWithExpectedResult {
    testCase: MyApi.commons.TestCase;
    expectedResult: MyApi.commons.VariableValue;
}
",
                "name": "TestCaseWithExpectedResult.ts",
                "type": "file",
              },
              Object {
                "contents": "export type UserId = string;
",
                "name": "UserId.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export type VariableType = 
    | VariableType.IntegerType
    | VariableType.DoubleType
    | VariableType.BooleanType
    | VariableType.StringType
    | VariableType.CharType
    | VariableType.ListType
    | VariableType.MapType
    | VariableType.BinaryTreeType
    | VariableType.SinglyLinkedListType
    | VariableType.DoublyLinkedListType;

export declare namespace VariableType {
    interface IntegerType {
        type: \\"integerType\\";
    }

    interface DoubleType {
        type: \\"doubleType\\";
    }

    interface BooleanType {
        type: \\"booleanType\\";
    }

    interface StringType {
        type: \\"stringType\\";
    }

    interface CharType {
        type: \\"charType\\";
    }

    interface ListType extends MyApi.commons.ListType {
        type: \\"listType\\";
    }

    interface MapType extends MyApi.commons.MapType {
        type: \\"mapType\\";
    }

    interface BinaryTreeType {
        type: \\"binaryTreeType\\";
    }

    interface SinglyLinkedListType {
        type: \\"singlyLinkedListType\\";
    }

    interface DoublyLinkedListType {
        type: \\"doublyLinkedListType\\";
    }

    export interface _Visitor<Result> {
        integerType: () => Result;
        doubleType: () => Result;
        booleanType: () => Result;
        stringType: () => Result;
        charType: () => Result;
        listType: (value: MyApi.commons.ListType) => Result;
        mapType: (value: MyApi.commons.MapType) => Result;
        binaryTreeType: () => Result;
        singlyLinkedListType: () => Result;
        doublyLinkedListType: () => Result;
        _unknown: () => Result;
    }
}

export const VariableType = {
        integerType: (): VariableType.IntegerType => ({
            type: \\"integerType\\"
        }),

        doubleType: (): VariableType.DoubleType => ({
            type: \\"doubleType\\"
        }),

        booleanType: (): VariableType.BooleanType => ({
            type: \\"booleanType\\"
        }),

        stringType: (): VariableType.StringType => ({
            type: \\"stringType\\"
        }),

        charType: (): VariableType.CharType => ({
            type: \\"charType\\"
        }),

        listType: (value: MyApi.commons.ListType): VariableType.ListType => ({
            ...value,
            type: \\"listType\\"
        }),

        mapType: (value: MyApi.commons.MapType): VariableType.MapType => ({
            ...value,
            type: \\"mapType\\"
        }),

        binaryTreeType: (): VariableType.BinaryTreeType => ({
            type: \\"binaryTreeType\\"
        }),

        singlyLinkedListType: (): VariableType.SinglyLinkedListType => ({
            type: \\"singlyLinkedListType\\"
        }),

        doublyLinkedListType: (): VariableType.DoublyLinkedListType => ({
            type: \\"doublyLinkedListType\\"
        }),

        _visit: <Result>(value: VariableType, visitor: VariableType._Visitor<Result>): Result => {
            switch (value.type) {
                case \\"integerType\\": return visitor.integerType();
                case \\"doubleType\\": return visitor.doubleType();
                case \\"booleanType\\": return visitor.booleanType();
                case \\"stringType\\": return visitor.stringType();
                case \\"charType\\": return visitor.charType();
                case \\"listType\\": return visitor.listType(value);
                case \\"mapType\\": return visitor.mapType(value);
                case \\"binaryTreeType\\": return visitor.binaryTreeType();
                case \\"singlyLinkedListType\\": return visitor.singlyLinkedListType();
                case \\"doublyLinkedListType\\": return visitor.doublyLinkedListType();
                default: return visitor._unknown();
            }
        },

        _types: (): VariableType[\\"type\\"][] => [\\"integerType\\", \\"doubleType\\", \\"booleanType\\", \\"stringType\\", \\"charType\\", \\"listType\\", \\"mapType\\", \\"binaryTreeType\\", \\"singlyLinkedListType\\", \\"doublyLinkedListType\\"],
    } as const;
",
                "name": "VariableType.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export type VariableValue = 
    | VariableValue.IntegerValue
    | VariableValue.BooleanValue
    | VariableValue.DoubleValue
    | VariableValue.StringValue
    | VariableValue.CharValue
    | VariableValue.MapValue
    | VariableValue.ListValue
    | VariableValue.BinaryTreeValue
    | VariableValue.SinglyLinkedListValue
    | VariableValue.DoublyLinkedListValue
    | VariableValue.NullValue;

export declare namespace VariableValue {
    interface IntegerValue {
        type: \\"integerValue\\";
        integerValue: number;
    }

    interface BooleanValue {
        type: \\"booleanValue\\";
        booleanValue: boolean;
    }

    interface DoubleValue {
        type: \\"doubleValue\\";
        doubleValue: number;
    }

    interface StringValue {
        type: \\"stringValue\\";
        stringValue: string;
    }

    interface CharValue {
        type: \\"charValue\\";
        charValue: string;
    }

    interface MapValue extends MyApi.commons.MapValue {
        type: \\"mapValue\\";
    }

    interface ListValue {
        type: \\"listValue\\";
        listValue: MyApi.commons.VariableValue[];
    }

    interface BinaryTreeValue extends MyApi.commons.BinaryTreeValue {
        type: \\"binaryTreeValue\\";
    }

    interface SinglyLinkedListValue extends MyApi.commons.SinglyLinkedListValue {
        type: \\"singlyLinkedListValue\\";
    }

    interface DoublyLinkedListValue extends MyApi.commons.DoublyLinkedListValue {
        type: \\"doublyLinkedListValue\\";
    }

    interface NullValue {
        type: \\"nullValue\\";
    }

    export interface _Visitor<Result> {
        integerValue: (value: number) => Result;
        booleanValue: (value: boolean) => Result;
        doubleValue: (value: number) => Result;
        stringValue: (value: string) => Result;
        charValue: (value: string) => Result;
        mapValue: (value: MyApi.commons.MapValue) => Result;
        listValue: (value: MyApi.commons.VariableValue[]) => Result;
        binaryTreeValue: (value: MyApi.commons.BinaryTreeValue) => Result;
        singlyLinkedListValue: (value: MyApi.commons.SinglyLinkedListValue) => Result;
        doublyLinkedListValue: (value: MyApi.commons.DoublyLinkedListValue) => Result;
        nullValue: () => Result;
        _unknown: () => Result;
    }
}

export const VariableValue = {
        integerValue: (value: number): VariableValue.IntegerValue => ({
            integerValue: value,
            type: \\"integerValue\\"
        }),

        booleanValue: (value: boolean): VariableValue.BooleanValue => ({
            booleanValue: value,
            type: \\"booleanValue\\"
        }),

        doubleValue: (value: number): VariableValue.DoubleValue => ({
            doubleValue: value,
            type: \\"doubleValue\\"
        }),

        stringValue: (value: string): VariableValue.StringValue => ({
            stringValue: value,
            type: \\"stringValue\\"
        }),

        charValue: (value: string): VariableValue.CharValue => ({
            charValue: value,
            type: \\"charValue\\"
        }),

        mapValue: (value: MyApi.commons.MapValue): VariableValue.MapValue => ({
            ...value,
            type: \\"mapValue\\"
        }),

        listValue: (value: MyApi.commons.VariableValue[]): VariableValue.ListValue => ({
            listValue: value,
            type: \\"listValue\\"
        }),

        binaryTreeValue: (value: MyApi.commons.BinaryTreeValue): VariableValue.BinaryTreeValue => ({
            ...value,
            type: \\"binaryTreeValue\\"
        }),

        singlyLinkedListValue: (value: MyApi.commons.SinglyLinkedListValue): VariableValue.SinglyLinkedListValue => ({
            ...value,
            type: \\"singlyLinkedListValue\\"
        }),

        doublyLinkedListValue: (value: MyApi.commons.DoublyLinkedListValue): VariableValue.DoublyLinkedListValue => ({
            ...value,
            type: \\"doublyLinkedListValue\\"
        }),

        nullValue: (): VariableValue.NullValue => ({
            type: \\"nullValue\\"
        }),

        _visit: <Result>(value: VariableValue, visitor: VariableValue._Visitor<Result>): Result => {
            switch (value.type) {
                case \\"integerValue\\": return visitor.integerValue(value.integerValue);
                case \\"booleanValue\\": return visitor.booleanValue(value.booleanValue);
                case \\"doubleValue\\": return visitor.doubleValue(value.doubleValue);
                case \\"stringValue\\": return visitor.stringValue(value.stringValue);
                case \\"charValue\\": return visitor.charValue(value.charValue);
                case \\"mapValue\\": return visitor.mapValue(value);
                case \\"listValue\\": return visitor.listValue(value.listValue);
                case \\"binaryTreeValue\\": return visitor.binaryTreeValue(value);
                case \\"singlyLinkedListValue\\": return visitor.singlyLinkedListValue(value);
                case \\"doublyLinkedListValue\\": return visitor.doublyLinkedListValue(value);
                case \\"nullValue\\": return visitor.nullValue();
                default: return visitor._unknown();
            }
        },

        _types: (): VariableValue[\\"type\\"][] => [\\"integerValue\\", \\"booleanValue\\", \\"doubleValue\\", \\"stringValue\\", \\"charValue\\", \\"mapValue\\", \\"listValue\\", \\"binaryTreeValue\\", \\"singlyLinkedListValue\\", \\"doublyLinkedListValue\\", \\"nullValue\\"],
    } as const;
",
                "name": "VariableValue.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./UserId\\";
export * from \\"./ProblemId\\";
export * from \\"./NodeId\\";
export * from \\"./VariableType\\";
export * from \\"./ListType\\";
export * from \\"./MapType\\";
export * from \\"./VariableValue\\";
export * from \\"./DebugVariableValue\\";
export * from \\"./GenericValue\\";
export * from \\"./MapValue\\";
export * from \\"./KeyValuePair\\";
export * from \\"./BinaryTreeValue\\";
export * from \\"./BinaryTreeNodeValue\\";
export * from \\"./BinaryTreeNodeAndTreeValue\\";
export * from \\"./SinglyLinkedListValue\\";
export * from \\"./SinglyLinkedListNodeValue\\";
export * from \\"./SinglyLinkedListNodeAndListValue\\";
export * from \\"./DoublyLinkedListValue\\";
export * from \\"./DoublyLinkedListNodeValue\\";
export * from \\"./DoublyLinkedListNodeAndListValue\\";
export * from \\"./DebugMapValue\\";
export * from \\"./DebugKeyValuePairs\\";
export * from \\"./TestCase\\";
export * from \\"./TestCaseWithExpectedResult\\";
export * from \\"./FileInfo\\";
export * from \\"./Language\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "types",
            "type": "directory",
          },
        ],
        "name": "commons",
        "type": "directory",
      },
      Object {
        "contents": Array [
          Object {
            "contents": Array [
              Object {
                "contents": "import { BearerToken, BasicAuth, _NetworkError, _UnknownError, ErrorDetails, _Response, defaultFetcherV2 } from \\"@fern-typescript/service-utils\\";
import { MyApi } from \\"../../..\\";
import urlJoin from \\"url-join\\";

export interface Client {
    getHomepageProblems(): Promise<_Response<MyApi.commons.ProblemId[], MyApi.homepage.getHomepageProblems.Error>>;
    setHomepageProblems(request: MyApi.commons.ProblemId[]): Promise<_Response<void, MyApi.homepage.setHomepageProblems.Error>>;
}

export declare namespace Client {
    interface Options {
        _basePath: string;
        _token?: BearerToken;
        _credentials?: BasicAuth;
        xApiKey?: string;
    }
}

export class Client implements Client {
    constructor(private readonly options: Client.Options) {
    }

    public async getHomepageProblems(): Promise<_Response<MyApi.commons.ProblemId[], MyApi.homepage.getHomepageProblems.Error>> {
        const response = await defaultFetcherV2({
                url: urlJoin(this.options._basePath, \\"/\\"),
                method: \\"GET\\",
                headers: {
                    \\"Authorization\\": this.options._token != null ? BearerToken.toAuthorizationHeader(this.options._token) : this.options._credentials != null ? BasicAuth.toAuthorizationHeader(this.options._credentials) : undefined,
                    \\"X-API-Key\\": this.options.xApiKey
                }
            });

        if (response.ok) {
            return {
                ok: true,
                body: response.body as MyApi.commons.ProblemId[]
            };
        }

        if (response.type === \\"networkError\\") {
            return {
                ok: false,
                error: {
                    body: { _error: \\"_NetworkError\\" },
                    _visit: visitor => visitor._network()
                }
            };
        }

        return {
            ok: false,
            error: {
                body: response.body as _UnknownError,
                _visit: visitor => visitor._unknown({ statusCode: response.statusCode })
            }
        };
    }

    public async setHomepageProblems(request: MyApi.commons.ProblemId[]): Promise<_Response<void, MyApi.homepage.setHomepageProblems.Error>> {
        const response = await defaultFetcherV2({
                url: urlJoin(this.options._basePath, \\"/\\"),
                method: \\"POST\\",
                headers: {
                    \\"Authorization\\": this.options._token != null ? BearerToken.toAuthorizationHeader(this.options._token) : this.options._credentials != null ? BasicAuth.toAuthorizationHeader(this.options._credentials) : undefined,
                    \\"X-API-Key\\": this.options.xApiKey
                },
                body: request
            });

        if (response.ok) {
            return {
                ok: true,
                body: undefined
            };
        }

        if (response.type === \\"networkError\\") {
            return {
                ok: false,
                error: {
                    body: { _error: \\"_NetworkError\\" },
                    _visit: visitor => visitor._network()
                }
            };
        }

        return {
            ok: false,
            error: {
                body: response.body as _UnknownError,
                _visit: visitor => visitor._unknown({ statusCode: response.statusCode })
            }
        };
    }
}

export namespace getHomepageProblems {
    export interface Error {
        body: 
            | _NetworkError
            | _UnknownError;
        _visit: <Result>(visitor: MyApi.homepage.getHomepageProblems.ErrorVisitor<Result>) => Result;
    }

    export interface ErrorVisitor<Result> {
        _network: () => Result;
        _unknown: (details: ErrorDetails) => Result;
    }
}

export namespace setHomepageProblems {
    export interface Error {
        body: 
            | _NetworkError
            | _UnknownError;
        _visit: <Result>(visitor: MyApi.homepage.setHomepageProblems.ErrorVisitor<Result>) => Result;
    }

    export interface ErrorVisitor<Result> {
        _network: () => Result;
        _unknown: (details: ErrorDetails) => Result;
    }
}
",
                "name": "Client.ts",
                "type": "file",
              },
              Object {
                "contents": "export { getHomepageProblems, setHomepageProblems } from \\"./Client\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "client",
            "type": "directory",
          },
          Object {
            "contents": "export * from \\"./client\\";
",
            "name": "index.ts",
            "type": "file",
          },
        ],
        "name": "homepage",
        "type": "directory",
      },
      Object {
        "contents": "export * as admin from \\"./admin\\";
export * from \\"./admin/types\\";
export * as commons from \\"./commons\\";
export * from \\"./commons/types\\";
export * as langServer from \\"./lang-server\\";
export * from \\"./lang-server/types\\";
export * as migration from \\"./migration\\";
export * from \\"./migration/types\\";
export * as playlist from \\"./playlist\\";
export * from \\"./playlist/types\\";
export * as problem from \\"./problem\\";
export * from \\"./problem/types\\";
export * as submission from \\"./submission\\";
export * from \\"./submission/types\\";
export * as v2 from \\"./v2\\";
export * from \\"./playlist/errors\\";
export * as homepage from \\"./homepage\\";
export * as sysprop from \\"./sysprop\\";
export * from \\"./Client\\";
",
        "name": "index.ts",
        "type": "file",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "export * from \\"./types\\";
",
            "name": "index.ts",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export interface LangServerRequest {
    request: unknown;
}
",
                "name": "LangServerRequest.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface LangServerResponse {
    response: unknown;
}
",
                "name": "LangServerResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./LangServerRequest\\";
export * from \\"./LangServerResponse\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "types",
            "type": "directory",
          },
        ],
        "name": "lang-server",
        "type": "directory",
      },
      Object {
        "contents": Array [
          Object {
            "contents": Array [
              Object {
                "contents": "import { BearerToken, BasicAuth, _NetworkError, _UnknownError, ErrorDetails, _Response, defaultFetcherV2 } from \\"@fern-typescript/service-utils\\";
import { MyApi } from \\"../../..\\";
import urlJoin from \\"url-join\\";

export interface Client {
    getAttemptedMigrations(): Promise<_Response<MyApi.migration.Migration[], MyApi.migration.getAttemptedMigrations.Error>>;
}

export declare namespace Client {
    interface Options {
        _basePath: string;
        _token?: BearerToken;
        _credentials?: BasicAuth;
        xApiKey?: string;
    }
}

export class Client implements Client {
    constructor(private readonly options: Client.Options) {
    }

    public async getAttemptedMigrations(): Promise<_Response<MyApi.migration.Migration[], MyApi.migration.getAttemptedMigrations.Error>> {
        const response = await defaultFetcherV2({
                url: urlJoin(this.options._basePath, \\"/all\\"),
                method: \\"GET\\",
                headers: {
                    \\"Authorization\\": this.options._token != null ? BearerToken.toAuthorizationHeader(this.options._token) : this.options._credentials != null ? BasicAuth.toAuthorizationHeader(this.options._credentials) : undefined,
                    \\"X-API-Key\\": this.options.xApiKey
                }
            });

        if (response.ok) {
            return {
                ok: true,
                body: response.body as MyApi.migration.Migration[]
            };
        }

        if (response.type === \\"networkError\\") {
            return {
                ok: false,
                error: {
                    body: { _error: \\"_NetworkError\\" },
                    _visit: visitor => visitor._network()
                }
            };
        }

        return {
            ok: false,
            error: {
                body: response.body as _UnknownError,
                _visit: visitor => visitor._unknown({ statusCode: response.statusCode })
            }
        };
    }
}

export namespace getAttemptedMigrations {
    export interface Error {
        body: 
            | _NetworkError
            | _UnknownError;
        _visit: <Result>(visitor: MyApi.migration.getAttemptedMigrations.ErrorVisitor<Result>) => Result;
    }

    export interface ErrorVisitor<Result> {
        _network: () => Result;
        _unknown: (details: ErrorDetails) => Result;
    }
}
",
                "name": "Client.ts",
                "type": "file",
              },
              Object {
                "contents": "export { getAttemptedMigrations } from \\"./Client\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "client",
            "type": "directory",
          },
          Object {
            "contents": "export * from \\"./types\\";
export * from \\"./client\\";
",
            "name": "index.ts",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface Migration {
    name: string;
    status: MyApi.migration.MigrationStatus;
}
",
                "name": "Migration.ts",
                "type": "file",
              },
              Object {
                "contents": "export type MigrationStatus = 
    | \\"RUNNING\\"
    | \\"FAILED\\"
    | \\"FINISHED\\";

export const MigrationStatus = {
        Running: \\"RUNNING\\",
        Failed: \\"FAILED\\",
        Finished: \\"FINISHED\\",

        _visit: <Result>(value: MigrationStatus, visitor: MigrationStatus._Visitor<Result>): Result => {
            switch (value) {
                case MigrationStatus.Running: return visitor.running();
                case MigrationStatus.Failed: return visitor.failed();
                case MigrationStatus.Finished: return visitor.finished();
                default: return visitor._unknown();
            }
        },

        _values: (): MigrationStatus[] => [MigrationStatus.Running, MigrationStatus.Failed, MigrationStatus.Finished],
    } as const;

export declare namespace MigrationStatus {
    type Running = \\"RUNNING\\";
    type Failed = \\"FAILED\\";
    type Finished = \\"FINISHED\\";

    export interface _Visitor<Result> {
        running: () => Result;
        failed: () => Result;
        finished: () => Result;
        _unknown: () => Result;
    }
}
",
                "name": "MigrationStatus.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./MigrationStatus\\";
export * from \\"./Migration\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "types",
            "type": "directory",
          },
        ],
        "name": "migration",
        "type": "directory",
      },
      Object {
        "contents": Array [
          Object {
            "contents": Array [
              Object {
                "contents": "import { BearerToken, BasicAuth, _NetworkError, _UnknownError, ErrorDetails, _Response, defaultFetcherV2 } from \\"@fern-typescript/service-utils\\";
import { MyApi } from \\"../../..\\";
import urlJoin from \\"url-join\\";

export interface Client {
    createPlaylist(request: MyApi.playlist.PlaylistCreateRequest): Promise<_Response<MyApi.playlist.Playlist, MyApi.playlist.createPlaylist.Error>>;
    getPlaylists(request: MyApi.playlist.getPlaylists.Request): Promise<_Response<MyApi.playlist.Playlist[], MyApi.playlist.getPlaylists.Error>>;
    getPlaylist(request: MyApi.playlist.getPlaylist.Request): Promise<_Response<MyApi.playlist.Playlist, MyApi.playlist.getPlaylist.Error>>;
    updatePlaylist(request: MyApi.playlist.updatePlaylist.Request): Promise<_Response<MyApi.playlist.Playlist | undefined, MyApi.playlist.updatePlaylist.Error>>;
    deletePlaylist(request: MyApi.playlist.deletePlaylist.Request): Promise<_Response<void, MyApi.playlist.deletePlaylist.Error>>;
}

export declare namespace Client {
    interface Options {
        _basePath: string;
        _token?: BearerToken;
        _credentials?: BasicAuth;
        xApiKey?: string;
    }
}

export class Client implements Client {
    constructor(private readonly options: Client.Options) {
    }

    public async createPlaylist(request: MyApi.playlist.PlaylistCreateRequest): Promise<_Response<MyApi.playlist.Playlist, MyApi.playlist.createPlaylist.Error>> {
        const response = await defaultFetcherV2({
                url: urlJoin(this.options._basePath, \\"/create\\"),
                method: \\"POST\\",
                headers: {
                    \\"Authorization\\": this.options._token != null ? BearerToken.toAuthorizationHeader(this.options._token) : this.options._credentials != null ? BasicAuth.toAuthorizationHeader(this.options._credentials) : undefined,
                    \\"X-API-Key\\": this.options.xApiKey
                },
                body: request
            });

        if (response.ok) {
            return {
                ok: true,
                body: response.body as MyApi.playlist.Playlist
            };
        }

        if (response.type === \\"networkError\\") {
            return {
                ok: false,
                error: {
                    body: { _error: \\"_NetworkError\\" },
                    _visit: visitor => visitor._network()
                }
            };
        }

        return {
            ok: false,
            error: {
                body: response.body as _UnknownError,
                _visit: visitor => visitor._unknown({ statusCode: response.statusCode })
            }
        };
    }

    public async getPlaylists(request: MyApi.playlist.getPlaylists.Request): Promise<_Response<MyApi.playlist.Playlist[], MyApi.playlist.getPlaylists.Error>> {
        const queryParameters = new URLSearchParams();
        if (request.limit != null) {
            queryParameters.append(\\"limit\\", request.limit.toString());
        }

        const response = await defaultFetcherV2({
                url: urlJoin(this.options._basePath, \\"/all\\"),
                method: \\"GET\\",
                headers: {
                    \\"Authorization\\": this.options._token != null ? BearerToken.toAuthorizationHeader(this.options._token) : this.options._credentials != null ? BasicAuth.toAuthorizationHeader(this.options._credentials) : undefined,
                    \\"X-API-Key\\": this.options.xApiKey
                },
                queryParameters
            });

        if (response.ok) {
            return {
                ok: true,
                body: response.body as MyApi.playlist.Playlist[]
            };
        }

        if (response.type === \\"networkError\\") {
            return {
                ok: false,
                error: {
                    body: { _error: \\"_NetworkError\\" },
                    _visit: visitor => visitor._network()
                }
            };
        }

        return {
            ok: false,
            error: {
                body: response.body as _UnknownError,
                _visit: visitor => visitor._unknown({ statusCode: response.statusCode })
            }
        };
    }

    public async getPlaylist(request: MyApi.playlist.getPlaylist.Request): Promise<_Response<MyApi.playlist.Playlist, MyApi.playlist.getPlaylist.Error>> {
        const response = await defaultFetcherV2({
                url: urlJoin(this.options._basePath, \`/\${request.playlistId}\`),
                method: \\"GET\\",
                headers: {
                    \\"Authorization\\": this.options._token != null ? BearerToken.toAuthorizationHeader(this.options._token) : this.options._credentials != null ? BasicAuth.toAuthorizationHeader(this.options._credentials) : undefined,
                    \\"X-API-Key\\": this.options.xApiKey
                }
            });

        if (response.ok) {
            return {
                ok: true,
                body: response.body as MyApi.playlist.Playlist
            };
        }

        if (response.type === \\"networkError\\") {
            return {
                ok: false,
                error: {
                    body: { _error: \\"_NetworkError\\" },
                    _visit: visitor => visitor._network()
                }
            };
        }

        switch ((response.body as MyApi.playlist.getPlaylist.ErrorBody)?._error) {
            case \\"PlaylistIdNotFoundError\\":
            case \\"UnauthorizedError\\": return {
                ok: false,
                error: MyApi.playlist.getPlaylist.Error(response.body as MyApi.playlist.getPlaylist.ErrorBody)
            };
            default: return {
                ok: false,
                error: {
                    body: response.body as _UnknownError,
                    _visit: visitor => visitor._unknown({ statusCode: response.statusCode })
                }
            };
        }
    }

    public async updatePlaylist(request: MyApi.playlist.updatePlaylist.Request): Promise<_Response<MyApi.playlist.Playlist | undefined, MyApi.playlist.updatePlaylist.Error>> {
        const response = await defaultFetcherV2({
                url: urlJoin(this.options._basePath, \`/\${request.playlistId}\`),
                method: \\"PUT\\",
                headers: {
                    \\"Authorization\\": this.options._token != null ? BearerToken.toAuthorizationHeader(this.options._token) : this.options._credentials != null ? BasicAuth.toAuthorizationHeader(this.options._credentials) : undefined,
                    \\"X-API-Key\\": this.options.xApiKey
                },
                body: request.body
            });

        if (response.ok) {
            return {
                ok: true,
                body: response.body as MyApi.playlist.Playlist | undefined
            };
        }

        if (response.type === \\"networkError\\") {
            return {
                ok: false,
                error: {
                    body: { _error: \\"_NetworkError\\" },
                    _visit: visitor => visitor._network()
                }
            };
        }

        switch ((response.body as MyApi.playlist.updatePlaylist.ErrorBody)?._error) {
            case \\"PlaylistIdNotFoundError\\": return {
                ok: false,
                error: MyApi.playlist.updatePlaylist.Error(response.body as MyApi.playlist.updatePlaylist.ErrorBody)
            };
            default: return {
                ok: false,
                error: {
                    body: response.body as _UnknownError,
                    _visit: visitor => visitor._unknown({ statusCode: response.statusCode })
                }
            };
        }
    }

    public async deletePlaylist(request: MyApi.playlist.deletePlaylist.Request): Promise<_Response<void, MyApi.playlist.deletePlaylist.Error>> {
        const response = await defaultFetcherV2({
                url: urlJoin(this.options._basePath, \`/\${request.playlistId}\`),
                method: \\"DELETE\\",
                headers: {
                    \\"Authorization\\": this.options._token != null ? BearerToken.toAuthorizationHeader(this.options._token) : this.options._credentials != null ? BasicAuth.toAuthorizationHeader(this.options._credentials) : undefined,
                    \\"X-API-Key\\": this.options.xApiKey
                }
            });

        if (response.ok) {
            return {
                ok: true,
                body: undefined
            };
        }

        if (response.type === \\"networkError\\") {
            return {
                ok: false,
                error: {
                    body: { _error: \\"_NetworkError\\" },
                    _visit: visitor => visitor._network()
                }
            };
        }

        return {
            ok: false,
            error: {
                body: response.body as _UnknownError,
                _visit: visitor => visitor._unknown({ statusCode: response.statusCode })
            }
        };
    }
}

export namespace createPlaylist {
    export interface Error {
        body: 
            | _NetworkError
            | _UnknownError;
        _visit: <Result>(visitor: MyApi.playlist.createPlaylist.ErrorVisitor<Result>) => Result;
    }

    export interface ErrorVisitor<Result> {
        _network: () => Result;
        _unknown: (details: ErrorDetails) => Result;
    }
}

export namespace getPlaylists {
    export interface Request {
        limit?: number;
    }

    export interface Error {
        body: 
            | _NetworkError
            | _UnknownError;
        _visit: <Result>(visitor: MyApi.playlist.getPlaylists.ErrorVisitor<Result>) => Result;
    }

    export interface ErrorVisitor<Result> {
        _network: () => Result;
        _unknown: (details: ErrorDetails) => Result;
    }
}

export namespace getPlaylist {
    export interface Request {
        playlistId: MyApi.playlist.PlaylistId;
    }

    export interface Error {
        body: 
            | MyApi.playlist.getPlaylist.ErrorBody
            | _NetworkError
            | _UnknownError;
        _visit: <Result>(visitor: MyApi.playlist.getPlaylist.ErrorVisitor<Result>) => Result;
    }

    export type ErrorBody = 
        | MyApi.playlist.PlaylistIdNotFoundError
        | MyApi.playlist.UnauthorizedError;

    export interface ErrorVisitor<Result> {
        playlistIdNotFoundError: (value: MyApi.playlist.PlaylistIdNotFoundError) => Result;
        unauthorizedError: (value: MyApi.playlist.UnauthorizedError) => Result;
        _network: () => Result;
        _unknown: (details: ErrorDetails) => Result;
    }
}

export const getPlaylist = {
        Error: (value: MyApi.playlist.getPlaylist.ErrorBody): MyApi.playlist.getPlaylist.Error => ({
            body: value,
            _visit: visitor => {
                switch (value._error) {
                    case \\"PlaylistIdNotFoundError\\": return visitor.playlistIdNotFoundError(value as MyApi.playlist.PlaylistIdNotFoundError);
                    case \\"UnauthorizedError\\": return visitor.unauthorizedError(value as MyApi.playlist.UnauthorizedError);
                }
            }
        })
    };

export namespace updatePlaylist {
    export interface Request {
        playlistId: MyApi.playlist.PlaylistId;
        body?: MyApi.playlist.UpdatePlaylistRequest;
    }

    export interface Error {
        body: 
            | MyApi.playlist.updatePlaylist.ErrorBody
            | _NetworkError
            | _UnknownError;
        _visit: <Result>(visitor: MyApi.playlist.updatePlaylist.ErrorVisitor<Result>) => Result;
    }

    export type ErrorBody = 
        | MyApi.playlist.PlaylistIdNotFoundError;

    export interface ErrorVisitor<Result> {
        playlistIdNotFoundError: (value: MyApi.playlist.PlaylistIdNotFoundError) => Result;
        _network: () => Result;
        _unknown: (details: ErrorDetails) => Result;
    }
}

export const updatePlaylist = {
        Error: (value: MyApi.playlist.updatePlaylist.ErrorBody): MyApi.playlist.updatePlaylist.Error => ({
            body: value,
            _visit: visitor => {
                switch (value._error) {
                    case \\"PlaylistIdNotFoundError\\": return visitor.playlistIdNotFoundError(value as MyApi.playlist.PlaylistIdNotFoundError);
                }
            }
        })
    };

export namespace deletePlaylist {
    export interface Request {
        playlistId: MyApi.playlist.PlaylistId;
    }

    export interface Error {
        body: 
            | _NetworkError
            | _UnknownError;
        _visit: <Result>(visitor: MyApi.playlist.deletePlaylist.ErrorVisitor<Result>) => Result;
    }

    export interface ErrorVisitor<Result> {
        _network: () => Result;
        _unknown: (details: ErrorDetails) => Result;
    }
}
",
                "name": "Client.ts",
                "type": "file",
              },
              Object {
                "contents": "export { createPlaylist, getPlaylists, getPlaylist, updatePlaylist, deletePlaylist } from \\"./Client\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "client",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface PlaylistIdNotFoundError {
    _error: \\"PlaylistIdNotFoundError\\";
    playlistId: MyApi.playlist.PlaylistId;
}
",
                "name": "PlaylistIdNotFoundError.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface UnauthorizedError {
    _error: \\"UnauthorizedError\\";
}
",
                "name": "UnauthorizedError.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./PlaylistIdNotFoundError\\";
export * from \\"./UnauthorizedError\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "errors",
            "type": "directory",
          },
          Object {
            "contents": "export * from \\"./types\\";
export * from \\"./errors\\";
export * from \\"./client\\";
",
            "name": "index.ts",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface Playlist {
    playlist_id: MyApi.playlist.PlaylistId;
    name: string;
    problems: MyApi.commons.ProblemId[];
    \\"owner-id\\": MyApi.commons.UserId;
}
",
                "name": "Playlist.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface PlaylistCreateRequest {
    name: string;
    problems: MyApi.commons.ProblemId[];
}
",
                "name": "PlaylistCreateRequest.ts",
                "type": "file",
              },
              Object {
                "contents": "export type PlaylistId = string;
",
                "name": "PlaylistId.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface UpdatePlaylistRequest {
    name: string;
    problems: MyApi.commons.ProblemId[];
}
",
                "name": "UpdatePlaylistRequest.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./PlaylistId\\";
export * from \\"./Playlist\\";
export * from \\"./PlaylistCreateRequest\\";
export * from \\"./UpdatePlaylistRequest\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "types",
            "type": "directory",
          },
        ],
        "name": "playlist",
        "type": "directory",
      },
      Object {
        "contents": Array [
          Object {
            "contents": Array [
              Object {
                "contents": "import { BearerToken, BasicAuth, _NetworkError, _UnknownError, ErrorDetails, _Response, defaultFetcherV2 } from \\"@fern-typescript/service-utils\\";
import { MyApi } from \\"../../..\\";
import urlJoin from \\"url-join\\";

export interface Client {
    createProblem(request: MyApi.problem.CreateProblemRequest): Promise<_Response<MyApi.problem.CreateProblemResponse, MyApi.problem.createProblem.Error>>;
    updateProblem(request: MyApi.problem.updateProblem.Request): Promise<_Response<MyApi.problem.UpdateProblemResponse, MyApi.problem.updateProblem.Error>>;
    deleteProblem(request: MyApi.problem.deleteProblem.Request): Promise<_Response<void, MyApi.problem.deleteProblem.Error>>;
    getDefaultStarterFiles(request: MyApi.problem.GetDefaultStarterFilesRequest): Promise<_Response<MyApi.problem.GetDefaultStarterFilesResponse, MyApi.problem.getDefaultStarterFiles.Error>>;
}

export declare namespace Client {
    interface Options {
        _basePath: string;
        _token?: BearerToken;
        _credentials?: BasicAuth;
        xApiKey?: string;
    }
}

export class Client implements Client {
    constructor(private readonly options: Client.Options) {
    }

    public async createProblem(request: MyApi.problem.CreateProblemRequest): Promise<_Response<MyApi.problem.CreateProblemResponse, MyApi.problem.createProblem.Error>> {
        const response = await defaultFetcherV2({
                url: urlJoin(this.options._basePath, \\"/create\\"),
                method: \\"POST\\",
                headers: {
                    \\"Authorization\\": this.options._token != null ? BearerToken.toAuthorizationHeader(this.options._token) : this.options._credentials != null ? BasicAuth.toAuthorizationHeader(this.options._credentials) : undefined,
                    \\"X-API-Key\\": this.options.xApiKey
                },
                body: request
            });

        if (response.ok) {
            return {
                ok: true,
                body: response.body as MyApi.problem.CreateProblemResponse
            };
        }

        if (response.type === \\"networkError\\") {
            return {
                ok: false,
                error: {
                    body: { _error: \\"_NetworkError\\" },
                    _visit: visitor => visitor._network()
                }
            };
        }

        return {
            ok: false,
            error: {
                body: response.body as _UnknownError,
                _visit: visitor => visitor._unknown({ statusCode: response.statusCode })
            }
        };
    }

    public async updateProblem(request: MyApi.problem.updateProblem.Request): Promise<_Response<MyApi.problem.UpdateProblemResponse, MyApi.problem.updateProblem.Error>> {
        const response = await defaultFetcherV2({
                url: urlJoin(this.options._basePath, \`/update/\${request.problemId}\`),
                method: \\"POST\\",
                headers: {
                    \\"Authorization\\": this.options._token != null ? BearerToken.toAuthorizationHeader(this.options._token) : this.options._credentials != null ? BasicAuth.toAuthorizationHeader(this.options._credentials) : undefined,
                    \\"X-API-Key\\": this.options.xApiKey
                },
                body: request.body
            });

        if (response.ok) {
            return {
                ok: true,
                body: response.body as MyApi.problem.UpdateProblemResponse
            };
        }

        if (response.type === \\"networkError\\") {
            return {
                ok: false,
                error: {
                    body: { _error: \\"_NetworkError\\" },
                    _visit: visitor => visitor._network()
                }
            };
        }

        return {
            ok: false,
            error: {
                body: response.body as _UnknownError,
                _visit: visitor => visitor._unknown({ statusCode: response.statusCode })
            }
        };
    }

    public async deleteProblem(request: MyApi.problem.deleteProblem.Request): Promise<_Response<void, MyApi.problem.deleteProblem.Error>> {
        const response = await defaultFetcherV2({
                url: urlJoin(this.options._basePath, \`/delete/\${request.problemId}\`),
                method: \\"DELETE\\",
                headers: {
                    \\"Authorization\\": this.options._token != null ? BearerToken.toAuthorizationHeader(this.options._token) : this.options._credentials != null ? BasicAuth.toAuthorizationHeader(this.options._credentials) : undefined,
                    \\"X-API-Key\\": this.options.xApiKey
                }
            });

        if (response.ok) {
            return {
                ok: true,
                body: undefined
            };
        }

        if (response.type === \\"networkError\\") {
            return {
                ok: false,
                error: {
                    body: { _error: \\"_NetworkError\\" },
                    _visit: visitor => visitor._network()
                }
            };
        }

        return {
            ok: false,
            error: {
                body: response.body as _UnknownError,
                _visit: visitor => visitor._unknown({ statusCode: response.statusCode })
            }
        };
    }

    public async getDefaultStarterFiles(request: MyApi.problem.GetDefaultStarterFilesRequest): Promise<_Response<MyApi.problem.GetDefaultStarterFilesResponse, MyApi.problem.getDefaultStarterFiles.Error>> {
        const response = await defaultFetcherV2({
                url: urlJoin(this.options._basePath, \\"/default-starter-files\\"),
                method: \\"POST\\",
                headers: {
                    \\"Authorization\\": this.options._token != null ? BearerToken.toAuthorizationHeader(this.options._token) : this.options._credentials != null ? BasicAuth.toAuthorizationHeader(this.options._credentials) : undefined,
                    \\"X-API-Key\\": this.options.xApiKey
                },
                body: request
            });

        if (response.ok) {
            return {
                ok: true,
                body: response.body as MyApi.problem.GetDefaultStarterFilesResponse
            };
        }

        if (response.type === \\"networkError\\") {
            return {
                ok: false,
                error: {
                    body: { _error: \\"_NetworkError\\" },
                    _visit: visitor => visitor._network()
                }
            };
        }

        return {
            ok: false,
            error: {
                body: response.body as _UnknownError,
                _visit: visitor => visitor._unknown({ statusCode: response.statusCode })
            }
        };
    }
}

export namespace createProblem {
    export interface Error {
        body: 
            | _NetworkError
            | _UnknownError;
        _visit: <Result>(visitor: MyApi.problem.createProblem.ErrorVisitor<Result>) => Result;
    }

    export interface ErrorVisitor<Result> {
        _network: () => Result;
        _unknown: (details: ErrorDetails) => Result;
    }
}

export namespace updateProblem {
    export interface Request {
        problemId: MyApi.commons.ProblemId;
        body: MyApi.problem.CreateProblemRequest;
    }

    export interface Error {
        body: 
            | _NetworkError
            | _UnknownError;
        _visit: <Result>(visitor: MyApi.problem.updateProblem.ErrorVisitor<Result>) => Result;
    }

    export interface ErrorVisitor<Result> {
        _network: () => Result;
        _unknown: (details: ErrorDetails) => Result;
    }
}

export namespace deleteProblem {
    export interface Request {
        problemId: MyApi.commons.ProblemId;
    }

    export interface Error {
        body: 
            | _NetworkError
            | _UnknownError;
        _visit: <Result>(visitor: MyApi.problem.deleteProblem.ErrorVisitor<Result>) => Result;
    }

    export interface ErrorVisitor<Result> {
        _network: () => Result;
        _unknown: (details: ErrorDetails) => Result;
    }
}

export namespace getDefaultStarterFiles {
    export interface Error {
        body: 
            | _NetworkError
            | _UnknownError;
        _visit: <Result>(visitor: MyApi.problem.getDefaultStarterFiles.ErrorVisitor<Result>) => Result;
    }

    export interface ErrorVisitor<Result> {
        _network: () => Result;
        _unknown: (details: ErrorDetails) => Result;
    }
}
",
                "name": "Client.ts",
                "type": "file",
              },
              Object {
                "contents": "export { createProblem, updateProblem, deleteProblem, getDefaultStarterFiles } from \\"./Client\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "client",
            "type": "directory",
          },
          Object {
            "contents": "export * from \\"./types\\";
export * from \\"./client\\";
",
            "name": "index.ts",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export type CreateProblemError = 
    | CreateProblemError.Generic;

export declare namespace CreateProblemError {
    interface Generic extends MyApi.problem.GenericCreateProblemError {
        _type: \\"generic\\";
    }

    export interface _Visitor<Result> {
        generic: (value: MyApi.problem.GenericCreateProblemError) => Result;
        _unknown: () => Result;
    }
}

export const CreateProblemError = {
        generic: (value: MyApi.problem.GenericCreateProblemError): CreateProblemError.Generic => ({
            ...value,
            _type: \\"generic\\"
        }),

        _visit: <Result>(value: CreateProblemError, visitor: CreateProblemError._Visitor<Result>): Result => {
            switch (value._type) {
                case \\"generic\\": return visitor.generic(value);
                default: return visitor._unknown();
            }
        },

        _types: (): CreateProblemError[\\"_type\\"][] => [\\"generic\\"],
    } as const;
",
                "name": "CreateProblemError.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface CreateProblemRequest {
    problemName: string;
    problemDescription: MyApi.problem.ProblemDescription;
    files: Record<MyApi.commons.Language, MyApi.problem.ProblemFiles>;
    inputParams: MyApi.problem.VariableTypeAndName[];
    outputType: MyApi.commons.VariableType;
    testcases: MyApi.commons.TestCaseWithExpectedResult[];
    methodName: string;
}
",
                "name": "CreateProblemRequest.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export type CreateProblemResponse = 
    | CreateProblemResponse.Success
    | CreateProblemResponse.Error;

export declare namespace CreateProblemResponse {
    interface Success {
        type: \\"success\\";
        success: MyApi.commons.ProblemId;
    }

    interface Error {
        type: \\"error\\";
        error: MyApi.problem.CreateProblemError;
    }

    export interface _Visitor<Result> {
        success: (value: MyApi.commons.ProblemId) => Result;
        error: (value: MyApi.problem.CreateProblemError) => Result;
        _unknown: () => Result;
    }
}

export const CreateProblemResponse = {
        success: (value: MyApi.commons.ProblemId): CreateProblemResponse.Success => ({
            success: value,
            type: \\"success\\"
        }),

        error: (value: MyApi.problem.CreateProblemError): CreateProblemResponse.Error => ({
            error: value,
            type: \\"error\\"
        }),

        _visit: <Result>(value: CreateProblemResponse, visitor: CreateProblemResponse._Visitor<Result>): Result => {
            switch (value.type) {
                case \\"success\\": return visitor.success(value.success);
                case \\"error\\": return visitor.error(value.error);
                default: return visitor._unknown();
            }
        },

        _types: (): CreateProblemResponse[\\"type\\"][] => [\\"success\\", \\"error\\"],
    } as const;
",
                "name": "CreateProblemResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface GenericCreateProblemError {
    message: string;
    type: string;
    stacktrace: string;
}
",
                "name": "GenericCreateProblemError.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface GetDefaultStarterFilesRequest {
    inputParams: MyApi.problem.VariableTypeAndName[];
    outputType: MyApi.commons.VariableType;
    methodName: string;
}
",
                "name": "GetDefaultStarterFilesRequest.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface GetDefaultStarterFilesResponse {
    files: Record<MyApi.commons.Language, MyApi.problem.ProblemFiles>;
}
",
                "name": "GetDefaultStarterFilesResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface ProblemDescription {
    boards: MyApi.problem.ProblemDescriptionBoard[];
}
",
                "name": "ProblemDescription.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export type ProblemDescriptionBoard = 
    | ProblemDescriptionBoard.Html
    | ProblemDescriptionBoard.Variable
    | ProblemDescriptionBoard.TestCaseId;

export declare namespace ProblemDescriptionBoard {
    interface Html {
        type: \\"html\\";
        html: string;
    }

    interface Variable {
        type: \\"variable\\";
        variable: MyApi.commons.VariableValue;
    }

    interface TestCaseId {
        type: \\"testCaseId\\";
        testCaseId: string;
    }

    export interface _Visitor<Result> {
        html: (value: string) => Result;
        variable: (value: MyApi.commons.VariableValue) => Result;
        testCaseId: (value: string) => Result;
        _unknown: () => Result;
    }
}

export const ProblemDescriptionBoard = {
        html: (value: string): ProblemDescriptionBoard.Html => ({
            html: value,
            type: \\"html\\"
        }),

        variable: (value: MyApi.commons.VariableValue): ProblemDescriptionBoard.Variable => ({
            variable: value,
            type: \\"variable\\"
        }),

        testCaseId: (value: string): ProblemDescriptionBoard.TestCaseId => ({
            testCaseId: value,
            type: \\"testCaseId\\"
        }),

        _visit: <Result>(value: ProblemDescriptionBoard, visitor: ProblemDescriptionBoard._Visitor<Result>): Result => {
            switch (value.type) {
                case \\"html\\": return visitor.html(value.html);
                case \\"variable\\": return visitor.variable(value.variable);
                case \\"testCaseId\\": return visitor.testCaseId(value.testCaseId);
                default: return visitor._unknown();
            }
        },

        _types: (): ProblemDescriptionBoard[\\"type\\"][] => [\\"html\\", \\"variable\\", \\"testCaseId\\"],
    } as const;
",
                "name": "ProblemDescriptionBoard.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface ProblemFiles {
    solutionFile: MyApi.commons.FileInfo;
    readOnlyFiles: MyApi.commons.FileInfo[];
}
",
                "name": "ProblemFiles.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface ProblemInfo {
    problemId: MyApi.commons.ProblemId;
    problemDescription: MyApi.problem.ProblemDescription;
    problemName: string;
    problemVersion: number;
    files: Record<MyApi.commons.Language, MyApi.problem.ProblemFiles>;
    inputParams: MyApi.problem.VariableTypeAndName[];
    outputType: MyApi.commons.VariableType;
    testcases: MyApi.commons.TestCaseWithExpectedResult[];
    methodName: string;
    supportsCustomTestCases: boolean;
}
",
                "name": "ProblemInfo.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface UpdateProblemResponse {
    problemVersion: number;
}
",
                "name": "UpdateProblemResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface VariableTypeAndName {
    variableType: MyApi.commons.VariableType;
    name: string;
}
",
                "name": "VariableTypeAndName.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./ProblemInfo\\";
export * from \\"./ProblemDescription\\";
export * from \\"./ProblemDescriptionBoard\\";
export * from \\"./ProblemFiles\\";
export * from \\"./VariableTypeAndName\\";
export * from \\"./CreateProblemRequest\\";
export * from \\"./CreateProblemResponse\\";
export * from \\"./UpdateProblemResponse\\";
export * from \\"./CreateProblemError\\";
export * from \\"./GenericCreateProblemError\\";
export * from \\"./GetDefaultStarterFilesRequest\\";
export * from \\"./GetDefaultStarterFilesResponse\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "types",
            "type": "directory",
          },
        ],
        "name": "problem",
        "type": "directory",
      },
      Object {
        "contents": Array [
          Object {
            "contents": Array [
              Object {
                "contents": "import { BearerToken, BasicAuth, _NetworkError, _UnknownError, ErrorDetails, _Response, defaultFetcherV2 } from \\"@fern-typescript/service-utils\\";
import { MyApi } from \\"../../..\\";
import urlJoin from \\"url-join\\";

export interface Client {
    createExecutionSession(request: MyApi.submission.createExecutionSession.Request): Promise<_Response<MyApi.submission.ExecutionSessionResponse, MyApi.submission.createExecutionSession.Error>>;
    getExecutionSession(request: MyApi.submission.getExecutionSession.Request): Promise<_Response<MyApi.submission.ExecutionSessionResponse | undefined, MyApi.submission.getExecutionSession.Error>>;
    stopExecutionSession(request: MyApi.submission.stopExecutionSession.Request): Promise<_Response<void, MyApi.submission.stopExecutionSession.Error>>;
    getExecutionSessionsState(): Promise<_Response<MyApi.submission.GetExecutionSessionStateResponse, MyApi.submission.getExecutionSessionsState.Error>>;
}

export declare namespace Client {
    interface Options {
        _basePath: string;
        _token?: BearerToken;
        _credentials?: BasicAuth;
        xApiKey?: string;
    }
}

/**
 * Responsible for spinning up and spinning down execution.
 */
export class Client implements Client {
    constructor(private readonly options: Client.Options) {
    }

    public async createExecutionSession(request: MyApi.submission.createExecutionSession.Request): Promise<_Response<MyApi.submission.ExecutionSessionResponse, MyApi.submission.createExecutionSession.Error>> {
        const response = await defaultFetcherV2({
                url: urlJoin(this.options._basePath, \`/create-session/\${request.language}\`),
                method: \\"POST\\",
                headers: {
                    \\"Authorization\\": this.options._token != null ? BearerToken.toAuthorizationHeader(this.options._token) : this.options._credentials != null ? BasicAuth.toAuthorizationHeader(this.options._credentials) : undefined,
                    \\"X-API-Key\\": this.options.xApiKey
                }
            });

        if (response.ok) {
            return {
                ok: true,
                body: response.body as MyApi.submission.ExecutionSessionResponse
            };
        }

        if (response.type === \\"networkError\\") {
            return {
                ok: false,
                error: {
                    body: { _error: \\"_NetworkError\\" },
                    _visit: visitor => visitor._network()
                }
            };
        }

        return {
            ok: false,
            error: {
                body: response.body as _UnknownError,
                _visit: visitor => visitor._unknown({ statusCode: response.statusCode })
            }
        };
    }

    public async getExecutionSession(request: MyApi.submission.getExecutionSession.Request): Promise<_Response<MyApi.submission.ExecutionSessionResponse | undefined, MyApi.submission.getExecutionSession.Error>> {
        const response = await defaultFetcherV2({
                url: urlJoin(this.options._basePath, \`/\${request.sessionId}\`),
                method: \\"GET\\",
                headers: {
                    \\"Authorization\\": this.options._token != null ? BearerToken.toAuthorizationHeader(this.options._token) : this.options._credentials != null ? BasicAuth.toAuthorizationHeader(this.options._credentials) : undefined,
                    \\"X-API-Key\\": this.options.xApiKey
                }
            });

        if (response.ok) {
            return {
                ok: true,
                body: response.body as MyApi.submission.ExecutionSessionResponse | undefined
            };
        }

        if (response.type === \\"networkError\\") {
            return {
                ok: false,
                error: {
                    body: { _error: \\"_NetworkError\\" },
                    _visit: visitor => visitor._network()
                }
            };
        }

        return {
            ok: false,
            error: {
                body: response.body as _UnknownError,
                _visit: visitor => visitor._unknown({ statusCode: response.statusCode })
            }
        };
    }

    public async stopExecutionSession(request: MyApi.submission.stopExecutionSession.Request): Promise<_Response<void, MyApi.submission.stopExecutionSession.Error>> {
        const response = await defaultFetcherV2({
                url: urlJoin(this.options._basePath, \`/stop/\${request.sessionId}\`),
                method: \\"DELETE\\",
                headers: {
                    \\"Authorization\\": this.options._token != null ? BearerToken.toAuthorizationHeader(this.options._token) : this.options._credentials != null ? BasicAuth.toAuthorizationHeader(this.options._credentials) : undefined,
                    \\"X-API-Key\\": this.options.xApiKey
                }
            });

        if (response.ok) {
            return {
                ok: true,
                body: undefined
            };
        }

        if (response.type === \\"networkError\\") {
            return {
                ok: false,
                error: {
                    body: { _error: \\"_NetworkError\\" },
                    _visit: visitor => visitor._network()
                }
            };
        }

        return {
            ok: false,
            error: {
                body: response.body as _UnknownError,
                _visit: visitor => visitor._unknown({ statusCode: response.statusCode })
            }
        };
    }

    public async getExecutionSessionsState(): Promise<_Response<MyApi.submission.GetExecutionSessionStateResponse, MyApi.submission.getExecutionSessionsState.Error>> {
        const response = await defaultFetcherV2({
                url: urlJoin(this.options._basePath, \\"/execution-sessions-state\\"),
                method: \\"GET\\",
                headers: {
                    \\"Authorization\\": this.options._token != null ? BearerToken.toAuthorizationHeader(this.options._token) : this.options._credentials != null ? BasicAuth.toAuthorizationHeader(this.options._credentials) : undefined,
                    \\"X-API-Key\\": this.options.xApiKey
                }
            });

        if (response.ok) {
            return {
                ok: true,
                body: response.body as MyApi.submission.GetExecutionSessionStateResponse
            };
        }

        if (response.type === \\"networkError\\") {
            return {
                ok: false,
                error: {
                    body: { _error: \\"_NetworkError\\" },
                    _visit: visitor => visitor._network()
                }
            };
        }

        return {
            ok: false,
            error: {
                body: response.body as _UnknownError,
                _visit: visitor => visitor._unknown({ statusCode: response.statusCode })
            }
        };
    }
}

export namespace createExecutionSession {
    export interface Request {
        language: MyApi.commons.Language;
    }

    export interface Error {
        body: 
            | _NetworkError
            | _UnknownError;
        _visit: <Result>(visitor: MyApi.submission.createExecutionSession.ErrorVisitor<Result>) => Result;
    }

    export interface ErrorVisitor<Result> {
        _network: () => Result;
        _unknown: (details: ErrorDetails) => Result;
    }
}

export namespace getExecutionSession {
    export interface Request {
        sessionId: string;
    }

    export interface Error {
        body: 
            | _NetworkError
            | _UnknownError;
        _visit: <Result>(visitor: MyApi.submission.getExecutionSession.ErrorVisitor<Result>) => Result;
    }

    export interface ErrorVisitor<Result> {
        _network: () => Result;
        _unknown: (details: ErrorDetails) => Result;
    }
}

export namespace stopExecutionSession {
    export interface Request {
        sessionId: string;
    }

    export interface Error {
        body: 
            | _NetworkError
            | _UnknownError;
        _visit: <Result>(visitor: MyApi.submission.stopExecutionSession.ErrorVisitor<Result>) => Result;
    }

    export interface ErrorVisitor<Result> {
        _network: () => Result;
        _unknown: (details: ErrorDetails) => Result;
    }
}

export namespace getExecutionSessionsState {
    export interface Error {
        body: 
            | _NetworkError
            | _UnknownError;
        _visit: <Result>(visitor: MyApi.submission.getExecutionSessionsState.ErrorVisitor<Result>) => Result;
    }

    export interface ErrorVisitor<Result> {
        _network: () => Result;
        _unknown: (details: ErrorDetails) => Result;
    }
}
",
                "name": "Client.ts",
                "type": "file",
              },
              Object {
                "contents": "export { createExecutionSession, getExecutionSession, stopExecutionSession, getExecutionSessionsState } from \\"./Client\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "client",
            "type": "directory",
          },
          Object {
            "contents": "export * from \\"./types\\";
export * from \\"./client\\";
",
            "name": "index.ts",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export type ActualResult = 
    | ActualResult.Value
    | ActualResult.Exception
    | ActualResult.ExceptionV2;

export declare namespace ActualResult {
    interface Value {
        type: \\"value\\";
        value: MyApi.commons.VariableValue;
    }

    interface Exception extends MyApi.submission.ExceptionInfo {
        type: \\"exception\\";
    }

    interface ExceptionV2 {
        type: \\"exceptionV2\\";
        exceptionV2: MyApi.submission.ExceptionV2;
    }

    export interface _Visitor<Result> {
        value: (value: MyApi.commons.VariableValue) => Result;
        exception: (value: MyApi.submission.ExceptionInfo) => Result;
        exceptionV2: (value: MyApi.submission.ExceptionV2) => Result;
        _unknown: () => Result;
    }
}

export const ActualResult = {
        value: (value: MyApi.commons.VariableValue): ActualResult.Value => ({
            value,
            type: \\"value\\"
        }),

        exception: (value: MyApi.submission.ExceptionInfo): ActualResult.Exception => ({
            ...value,
            type: \\"exception\\"
        }),

        exceptionV2: (value: MyApi.submission.ExceptionV2): ActualResult.ExceptionV2 => ({
            exceptionV2: value,
            type: \\"exceptionV2\\"
        }),

        _visit: <Result>(value: ActualResult, visitor: ActualResult._Visitor<Result>): Result => {
            switch (value.type) {
                case \\"value\\": return visitor.value(value.value);
                case \\"exception\\": return visitor.exception(value);
                case \\"exceptionV2\\": return visitor.exceptionV2(value.exceptionV2);
                default: return visitor._unknown();
            }
        },

        _types: (): ActualResult[\\"type\\"][] => [\\"value\\", \\"exception\\", \\"exceptionV2\\"],
    } as const;
",
                "name": "ActualResult.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface BuildingExecutorResponse {
    submissionId: MyApi.submission.SubmissionId;
    status: MyApi.submission.ExecutionSessionStatus;
}
",
                "name": "BuildingExecutorResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export type CodeExecutionUpdate = 
    /**
     * Statuses if an executor for the session isn't ready (Before RunningResponse). */
    | CodeExecutionUpdate.BuildingExecutor
    /**
     * Sent once a test submission is executing. */
    | CodeExecutionUpdate.Running
    /**
     * Sent if a submission cannot be run (i.e. Compile Error). */
    | CodeExecutionUpdate.Errored
    /**
     * Sent if a submission is stopped. */
    | CodeExecutionUpdate.Stopped
    /**
     * Graded testcases without trace information. */
    | CodeExecutionUpdate.Graded
    /**
     * Graded submission for v2 problems. */
    | CodeExecutionUpdate.GradedV2
    /**
     * Workspace run without trace information. */
    | CodeExecutionUpdate.WorkspaceRan
    /**
     * Gives progress about what is being recorded. */
    | CodeExecutionUpdate.Recording
    /**
     * Graded testcases with trace information. */
    | CodeExecutionUpdate.Recorded
    /**
     * Sent if an invalid request is sent for a submission. */
    | CodeExecutionUpdate.InvalidRequest
    /**
     * Sent once a submission is graded and fully recorded. */
    | CodeExecutionUpdate.Finished;

export declare namespace CodeExecutionUpdate {
    interface BuildingExecutor extends MyApi.submission.BuildingExecutorResponse {
        type: \\"buildingExecutor\\";
    }

    interface Running extends MyApi.submission.RunningResponse {
        type: \\"running\\";
    }

    interface Errored extends MyApi.submission.ErroredResponse {
        type: \\"errored\\";
    }

    interface Stopped extends MyApi.submission.StoppedResponse {
        type: \\"stopped\\";
    }

    interface Graded extends MyApi.submission.GradedResponse {
        type: \\"graded\\";
    }

    interface GradedV2 extends MyApi.submission.GradedResponseV2 {
        type: \\"gradedV2\\";
    }

    interface WorkspaceRan extends MyApi.submission.WorkspaceRanResponse {
        type: \\"workspaceRan\\";
    }

    interface Recording extends MyApi.submission.RecordingResponseNotification {
        type: \\"recording\\";
    }

    interface Recorded extends MyApi.submission.RecordedResponseNotification {
        type: \\"recorded\\";
    }

    interface InvalidRequest extends MyApi.submission.InvalidRequestResponse {
        type: \\"invalidRequest\\";
    }

    interface Finished extends MyApi.submission.FinishedResponse {
        type: \\"finished\\";
    }

    export interface _Visitor<Result> {
        buildingExecutor: (value: MyApi.submission.BuildingExecutorResponse) => Result;
        running: (value: MyApi.submission.RunningResponse) => Result;
        errored: (value: MyApi.submission.ErroredResponse) => Result;
        stopped: (value: MyApi.submission.StoppedResponse) => Result;
        graded: (value: MyApi.submission.GradedResponse) => Result;
        gradedV2: (value: MyApi.submission.GradedResponseV2) => Result;
        workspaceRan: (value: MyApi.submission.WorkspaceRanResponse) => Result;
        recording: (value: MyApi.submission.RecordingResponseNotification) => Result;
        recorded: (value: MyApi.submission.RecordedResponseNotification) => Result;
        invalidRequest: (value: MyApi.submission.InvalidRequestResponse) => Result;
        finished: (value: MyApi.submission.FinishedResponse) => Result;
        _unknown: () => Result;
    }
}

export const CodeExecutionUpdate = {
        buildingExecutor: (value: MyApi.submission.BuildingExecutorResponse): CodeExecutionUpdate.BuildingExecutor => ({
            ...value,
            type: \\"buildingExecutor\\"
        }),

        running: (value: MyApi.submission.RunningResponse): CodeExecutionUpdate.Running => ({
            ...value,
            type: \\"running\\"
        }),

        errored: (value: MyApi.submission.ErroredResponse): CodeExecutionUpdate.Errored => ({
            ...value,
            type: \\"errored\\"
        }),

        stopped: (value: MyApi.submission.StoppedResponse): CodeExecutionUpdate.Stopped => ({
            ...value,
            type: \\"stopped\\"
        }),

        graded: (value: MyApi.submission.GradedResponse): CodeExecutionUpdate.Graded => ({
            ...value,
            type: \\"graded\\"
        }),

        gradedV2: (value: MyApi.submission.GradedResponseV2): CodeExecutionUpdate.GradedV2 => ({
            ...value,
            type: \\"gradedV2\\"
        }),

        workspaceRan: (value: MyApi.submission.WorkspaceRanResponse): CodeExecutionUpdate.WorkspaceRan => ({
            ...value,
            type: \\"workspaceRan\\"
        }),

        recording: (value: MyApi.submission.RecordingResponseNotification): CodeExecutionUpdate.Recording => ({
            ...value,
            type: \\"recording\\"
        }),

        recorded: (value: MyApi.submission.RecordedResponseNotification): CodeExecutionUpdate.Recorded => ({
            ...value,
            type: \\"recorded\\"
        }),

        invalidRequest: (value: MyApi.submission.InvalidRequestResponse): CodeExecutionUpdate.InvalidRequest => ({
            ...value,
            type: \\"invalidRequest\\"
        }),

        finished: (value: MyApi.submission.FinishedResponse): CodeExecutionUpdate.Finished => ({
            ...value,
            type: \\"finished\\"
        }),

        _visit: <Result>(value: CodeExecutionUpdate, visitor: CodeExecutionUpdate._Visitor<Result>): Result => {
            switch (value.type) {
                case \\"buildingExecutor\\": return visitor.buildingExecutor(value);
                case \\"running\\": return visitor.running(value);
                case \\"errored\\": return visitor.errored(value);
                case \\"stopped\\": return visitor.stopped(value);
                case \\"graded\\": return visitor.graded(value);
                case \\"gradedV2\\": return visitor.gradedV2(value);
                case \\"workspaceRan\\": return visitor.workspaceRan(value);
                case \\"recording\\": return visitor.recording(value);
                case \\"recorded\\": return visitor.recorded(value);
                case \\"invalidRequest\\": return visitor.invalidRequest(value);
                case \\"finished\\": return visitor.finished(value);
                default: return visitor._unknown();
            }
        },

        _types: (): CodeExecutionUpdate[\\"type\\"][] => [\\"buildingExecutor\\", \\"running\\", \\"errored\\", \\"stopped\\", \\"graded\\", \\"gradedV2\\", \\"workspaceRan\\", \\"recording\\", \\"recorded\\", \\"invalidRequest\\", \\"finished\\"],
    } as const;
",
                "name": "CodeExecutionUpdate.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface CompileError {
    message: string;
}
",
                "name": "CompileError.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface CustomTestCasesUnsupported {
    problemId: MyApi.commons.ProblemId;
    submissionId: MyApi.submission.SubmissionId;
}
",
                "name": "CustomTestCasesUnsupported.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export type ErrorInfo = 
    | ErrorInfo.CompileError
    /**
     * If the submission cannot be executed and throws a runtime error before getting to any of the testcases.
     *  */
    | ErrorInfo.RuntimeError
    /**
     * If the trace backend encounters an unexpected error.
     *  */
    | ErrorInfo.InternalError;

export declare namespace ErrorInfo {
    interface CompileError extends MyApi.submission.CompileError {
        type: \\"compileError\\";
    }

    interface RuntimeError extends MyApi.submission.RuntimeError {
        type: \\"runtimeError\\";
    }

    interface InternalError extends MyApi.submission.InternalError {
        type: \\"internalError\\";
    }

    export interface _Visitor<Result> {
        compileError: (value: MyApi.submission.CompileError) => Result;
        runtimeError: (value: MyApi.submission.RuntimeError) => Result;
        internalError: (value: MyApi.submission.InternalError) => Result;
        _unknown: () => Result;
    }
}

export const ErrorInfo = {
        compileError: (value: MyApi.submission.CompileError): ErrorInfo.CompileError => ({
            ...value,
            type: \\"compileError\\"
        }),

        runtimeError: (value: MyApi.submission.RuntimeError): ErrorInfo.RuntimeError => ({
            ...value,
            type: \\"runtimeError\\"
        }),

        internalError: (value: MyApi.submission.InternalError): ErrorInfo.InternalError => ({
            ...value,
            type: \\"internalError\\"
        }),

        _visit: <Result>(value: ErrorInfo, visitor: ErrorInfo._Visitor<Result>): Result => {
            switch (value.type) {
                case \\"compileError\\": return visitor.compileError(value);
                case \\"runtimeError\\": return visitor.runtimeError(value);
                case \\"internalError\\": return visitor.internalError(value);
                default: return visitor._unknown();
            }
        },

        _types: (): ErrorInfo[\\"type\\"][] => [\\"compileError\\", \\"runtimeError\\", \\"internalError\\"],
    } as const;
",
                "name": "ErrorInfo.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface ErroredResponse {
    submissionId: MyApi.submission.SubmissionId;
    errorInfo: MyApi.submission.ErrorInfo;
}
",
                "name": "ErroredResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface ExceptionInfo {
    exceptionType: string;
    exceptionMessage: string;
    exceptionStacktrace: string;
}
",
                "name": "ExceptionInfo.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export type ExceptionV2 = 
    | ExceptionV2.Generic
    | ExceptionV2.Timeout;

export declare namespace ExceptionV2 {
    interface Generic extends MyApi.submission.ExceptionInfo {
        type: \\"generic\\";
    }

    interface Timeout {
        type: \\"timeout\\";
    }

    export interface _Visitor<Result> {
        generic: (value: MyApi.submission.ExceptionInfo) => Result;
        timeout: () => Result;
        _unknown: () => Result;
    }
}

export const ExceptionV2 = {
        generic: (value: MyApi.submission.ExceptionInfo): ExceptionV2.Generic => ({
            ...value,
            type: \\"generic\\"
        }),

        timeout: (): ExceptionV2.Timeout => ({
            type: \\"timeout\\"
        }),

        _visit: <Result>(value: ExceptionV2, visitor: ExceptionV2._Visitor<Result>): Result => {
            switch (value.type) {
                case \\"generic\\": return visitor.generic(value);
                case \\"timeout\\": return visitor.timeout();
                default: return visitor._unknown();
            }
        },

        _types: (): ExceptionV2[\\"type\\"][] => [\\"generic\\", \\"timeout\\"],
    } as const;
",
                "name": "ExceptionV2.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface ExecutionSessionResponse {
    sessionId: string;
    executionSessionUrl?: string;
    language: MyApi.commons.Language;
    status: MyApi.submission.ExecutionSessionStatus;
}
",
                "name": "ExecutionSessionResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface ExecutionSessionState {
    lastTimeContacted?: string;
    sessionId: string;
    isWarmInstance: boolean;
    awsTaskId?: string;
    language: MyApi.commons.Language;
    status: MyApi.submission.ExecutionSessionStatus;
}
",
                "name": "ExecutionSessionState.ts",
                "type": "file",
              },
              Object {
                "contents": "export type ExecutionSessionStatus = 
    | \\"CREATING_CONTAINER\\"
    | \\"PROVISIONING_CONTAINER\\"
    | \\"PENDING_CONTAINER\\"
    | \\"RUNNING_CONTAINER\\"
    | \\"LIVE_CONTAINER\\"
    | \\"FAILED_TO_LAUNCH\\";

export const ExecutionSessionStatus = {
        CreatingContainer: \\"CREATING_CONTAINER\\",
        ProvisioningContainer: \\"PROVISIONING_CONTAINER\\",
        PendingContainer: \\"PENDING_CONTAINER\\",
        RunningContainer: \\"RUNNING_CONTAINER\\",
        LiveContainer: \\"LIVE_CONTAINER\\",
        FailedToLaunch: \\"FAILED_TO_LAUNCH\\",

        _visit: <Result>(value: ExecutionSessionStatus, visitor: ExecutionSessionStatus._Visitor<Result>): Result => {
            switch (value) {
                case ExecutionSessionStatus.CreatingContainer: return visitor.creatingContainer();
                case ExecutionSessionStatus.ProvisioningContainer: return visitor.provisioningContainer();
                case ExecutionSessionStatus.PendingContainer: return visitor.pendingContainer();
                case ExecutionSessionStatus.RunningContainer: return visitor.runningContainer();
                case ExecutionSessionStatus.LiveContainer: return visitor.liveContainer();
                case ExecutionSessionStatus.FailedToLaunch: return visitor.failedToLaunch();
                default: return visitor._unknown();
            }
        },

        _values: (): ExecutionSessionStatus[] => [ExecutionSessionStatus.CreatingContainer, ExecutionSessionStatus.ProvisioningContainer, ExecutionSessionStatus.PendingContainer, ExecutionSessionStatus.RunningContainer, ExecutionSessionStatus.LiveContainer, ExecutionSessionStatus.FailedToLaunch],
    } as const;

export declare namespace ExecutionSessionStatus {
    type CreatingContainer = \\"CREATING_CONTAINER\\";
    type ProvisioningContainer = \\"PROVISIONING_CONTAINER\\";
    type PendingContainer = \\"PENDING_CONTAINER\\";
    type RunningContainer = \\"RUNNING_CONTAINER\\";
    type LiveContainer = \\"LIVE_CONTAINER\\";
    type FailedToLaunch = \\"FAILED_TO_LAUNCH\\";

    export interface _Visitor<Result> {
        creatingContainer: () => Result;
        provisioningContainer: () => Result;
        pendingContainer: () => Result;
        runningContainer: () => Result;
        liveContainer: () => Result;
        failedToLaunch: () => Result;
        _unknown: () => Result;
    }
}
",
                "name": "ExecutionSessionStatus.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface ExistingSubmissionExecuting {
    submissionId: MyApi.submission.SubmissionId;
}
",
                "name": "ExistingSubmissionExecuting.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface ExpressionLocation {
    start: number;
    offset: number;
}
",
                "name": "ExpressionLocation.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface FinishedResponse {
    submissionId: MyApi.submission.SubmissionId;
}
",
                "name": "FinishedResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface GetExecutionSessionStateResponse {
    states: Record<string, MyApi.submission.ExecutionSessionState>;
    numWarmingInstances?: number;
    warmingSessionIds: string[];
}
",
                "name": "GetExecutionSessionStateResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface GetSubmissionStateResponse {
    timeSubmitted?: string;
    submission: string;
    language: MyApi.commons.Language;
    submissionTypeState: MyApi.submission.SubmissionTypeState;
}
",
                "name": "GetSubmissionStateResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface GetTraceResponsesPageRequest {
    offset?: number;
}
",
                "name": "GetTraceResponsesPageRequest.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface GradedResponse {
    submissionId: MyApi.submission.SubmissionId;
    testCases: Record<string, MyApi.submission.TestCaseResultWithStdout>;
}
",
                "name": "GradedResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface GradedResponseV2 {
    submissionId: MyApi.submission.SubmissionId;
    testCases: Record<MyApi.v2.problem.TestCaseId, MyApi.submission.TestCaseGrade>;
}
",
                "name": "GradedResponseV2.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface GradedTestCaseUpdate {
    testCaseId: MyApi.v2.problem.TestCaseId;
    grade: MyApi.submission.TestCaseGrade;
}
",
                "name": "GradedTestCaseUpdate.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface InitializeProblemRequest {
    problemId: MyApi.commons.ProblemId;
    problemVersion?: number;
}
",
                "name": "InitializeProblemRequest.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface InternalError {
    exceptionInfo: MyApi.submission.ExceptionInfo;
}
",
                "name": "InternalError.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export type InvalidRequestCause = 
    /**
     * The submission request references a submission id that doesn't exist. */
    | InvalidRequestCause.SubmissionIdNotFound
    | InvalidRequestCause.CustomTestCasesUnsupported
    /**
     * The submission request was routed to an incorrect language executor. */
    | InvalidRequestCause.UnexpectedLanguage;

export declare namespace InvalidRequestCause {
    interface SubmissionIdNotFound extends MyApi.submission.SubmissionIdNotFound {
        type: \\"submissionIdNotFound\\";
    }

    interface CustomTestCasesUnsupported extends MyApi.submission.CustomTestCasesUnsupported {
        type: \\"customTestCasesUnsupported\\";
    }

    interface UnexpectedLanguage extends MyApi.submission.UnexpectedLanguageError {
        type: \\"unexpectedLanguage\\";
    }

    export interface _Visitor<Result> {
        submissionIdNotFound: (value: MyApi.submission.SubmissionIdNotFound) => Result;
        customTestCasesUnsupported: (value: MyApi.submission.CustomTestCasesUnsupported) => Result;
        unexpectedLanguage: (value: MyApi.submission.UnexpectedLanguageError) => Result;
        _unknown: () => Result;
    }
}

export const InvalidRequestCause = {
        submissionIdNotFound: (value: MyApi.submission.SubmissionIdNotFound): InvalidRequestCause.SubmissionIdNotFound => ({
            ...value,
            type: \\"submissionIdNotFound\\"
        }),

        customTestCasesUnsupported: (value: MyApi.submission.CustomTestCasesUnsupported): InvalidRequestCause.CustomTestCasesUnsupported => ({
            ...value,
            type: \\"customTestCasesUnsupported\\"
        }),

        unexpectedLanguage: (value: MyApi.submission.UnexpectedLanguageError): InvalidRequestCause.UnexpectedLanguage => ({
            ...value,
            type: \\"unexpectedLanguage\\"
        }),

        _visit: <Result>(value: InvalidRequestCause, visitor: InvalidRequestCause._Visitor<Result>): Result => {
            switch (value.type) {
                case \\"submissionIdNotFound\\": return visitor.submissionIdNotFound(value);
                case \\"customTestCasesUnsupported\\": return visitor.customTestCasesUnsupported(value);
                case \\"unexpectedLanguage\\": return visitor.unexpectedLanguage(value);
                default: return visitor._unknown();
            }
        },

        _types: (): InvalidRequestCause[\\"type\\"][] => [\\"submissionIdNotFound\\", \\"customTestCasesUnsupported\\", \\"unexpectedLanguage\\"],
    } as const;
",
                "name": "InvalidRequestCause.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface InvalidRequestResponse {
    request: MyApi.submission.SubmissionRequest;
    cause: MyApi.submission.InvalidRequestCause;
}
",
                "name": "InvalidRequestResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface LightweightStackframeInformation {
    numStackFrames: number;
    topStackFrameMethodName: string;
}
",
                "name": "LightweightStackframeInformation.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface RecordedResponseNotification {
    submissionId: MyApi.submission.SubmissionId;
    traceResponsesSize: number;
    testCaseId?: string;
}
",
                "name": "RecordedResponseNotification.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface RecordedTestCaseUpdate {
    testCaseId: MyApi.v2.problem.TestCaseId;
    traceResponsesSize: number;
}
",
                "name": "RecordedTestCaseUpdate.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface RecordingResponseNotification {
    submissionId: MyApi.submission.SubmissionId;
    testCaseId?: string;
    lineNumber: number;
    lightweightStackInfo: MyApi.submission.LightweightStackframeInformation;
    tracedFile?: MyApi.submission.TracedFile;
}
",
                "name": "RecordingResponseNotification.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface RunningResponse {
    submissionId: MyApi.submission.SubmissionId;
    state: MyApi.submission.RunningSubmissionState;
}
",
                "name": "RunningResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "export type RunningSubmissionState = 
    | \\"QUEUEING_SUBMISSION\\"
    | \\"KILLING_HISTORICAL_SUBMISSIONS\\"
    | \\"WRITING_SUBMISSION_TO_FILE\\"
    | \\"COMPILING_SUBMISSION\\"
    | \\"RUNNING_SUBMISSION\\";

export const RunningSubmissionState = {
        QueueingSubmission: \\"QUEUEING_SUBMISSION\\",
        KillingHistoricalSubmissions: \\"KILLING_HISTORICAL_SUBMISSIONS\\",
        WritingSubmissionToFile: \\"WRITING_SUBMISSION_TO_FILE\\",
        CompilingSubmission: \\"COMPILING_SUBMISSION\\",
        RunningSubmission: \\"RUNNING_SUBMISSION\\",

        _visit: <Result>(value: RunningSubmissionState, visitor: RunningSubmissionState._Visitor<Result>): Result => {
            switch (value) {
                case RunningSubmissionState.QueueingSubmission: return visitor.queueingSubmission();
                case RunningSubmissionState.KillingHistoricalSubmissions: return visitor.killingHistoricalSubmissions();
                case RunningSubmissionState.WritingSubmissionToFile: return visitor.writingSubmissionToFile();
                case RunningSubmissionState.CompilingSubmission: return visitor.compilingSubmission();
                case RunningSubmissionState.RunningSubmission: return visitor.runningSubmission();
                default: return visitor._unknown();
            }
        },

        _values: (): RunningSubmissionState[] => [RunningSubmissionState.QueueingSubmission, RunningSubmissionState.KillingHistoricalSubmissions, RunningSubmissionState.WritingSubmissionToFile, RunningSubmissionState.CompilingSubmission, RunningSubmissionState.RunningSubmission],
    } as const;

export declare namespace RunningSubmissionState {
    type QueueingSubmission = \\"QUEUEING_SUBMISSION\\";
    type KillingHistoricalSubmissions = \\"KILLING_HISTORICAL_SUBMISSIONS\\";
    type WritingSubmissionToFile = \\"WRITING_SUBMISSION_TO_FILE\\";
    type CompilingSubmission = \\"COMPILING_SUBMISSION\\";
    type RunningSubmission = \\"RUNNING_SUBMISSION\\";

    export interface _Visitor<Result> {
        queueingSubmission: () => Result;
        killingHistoricalSubmissions: () => Result;
        writingSubmissionToFile: () => Result;
        compilingSubmission: () => Result;
        runningSubmission: () => Result;
        _unknown: () => Result;
    }
}
",
                "name": "RunningSubmissionState.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface RuntimeError {
    message: string;
}
",
                "name": "RuntimeError.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface Scope {
    variables: Record<string, MyApi.commons.DebugVariableValue>;
}
",
                "name": "Scope.ts",
                "type": "file",
              },
              Object {
                "contents": "export type ShareId = string;
",
                "name": "ShareId.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface StackFrame {
    methodName: string;
    lineNumber: number;
    scopes: MyApi.submission.Scope[];
}
",
                "name": "StackFrame.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface StackInformation {
    numStackFrames: number;
    topStackFrame?: MyApi.submission.StackFrame;
}
",
                "name": "StackInformation.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface StderrResponse {
    submissionId: MyApi.submission.SubmissionId;
    stderr: string;
}
",
                "name": "StderrResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface StdoutResponse {
    submissionId: MyApi.submission.SubmissionId;
    stdout: string;
}
",
                "name": "StdoutResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface StopRequest {
    submissionId: MyApi.submission.SubmissionId;
}
",
                "name": "StopRequest.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface StoppedResponse {
    submissionId: MyApi.submission.SubmissionId;
}
",
                "name": "StoppedResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface SubmissionFileInfo {
    directory: string;
    filename: string;
    contents: string;
}
",
                "name": "SubmissionFileInfo.ts",
                "type": "file",
              },
              Object {
                "contents": "export type SubmissionId = string;
",
                "name": "SubmissionId.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface SubmissionIdNotFound {
    missingSubmissionId: MyApi.submission.SubmissionId;
}
",
                "name": "SubmissionIdNotFound.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export type SubmissionRequest = 
    | SubmissionRequest.InitializeProblemRequest
    | SubmissionRequest.InitializeWorkspaceRequest
    | SubmissionRequest.SubmitV2
    | SubmissionRequest.WorkspaceSubmit
    | SubmissionRequest.Stop;

export declare namespace SubmissionRequest {
    interface InitializeProblemRequest extends MyApi.submission.InitializeProblemRequest {
        type: \\"initializeProblemRequest\\";
    }

    interface InitializeWorkspaceRequest {
        type: \\"initializeWorkspaceRequest\\";
    }

    interface SubmitV2 extends MyApi.submission.SubmitRequestV2 {
        type: \\"submitV2\\";
    }

    interface WorkspaceSubmit extends MyApi.submission.WorkspaceSubmitRequest {
        type: \\"workspaceSubmit\\";
    }

    interface Stop extends MyApi.submission.StopRequest {
        type: \\"stop\\";
    }

    export interface _Visitor<Result> {
        initializeProblemRequest: (value: MyApi.submission.InitializeProblemRequest) => Result;
        initializeWorkspaceRequest: () => Result;
        submitV2: (value: MyApi.submission.SubmitRequestV2) => Result;
        workspaceSubmit: (value: MyApi.submission.WorkspaceSubmitRequest) => Result;
        stop: (value: MyApi.submission.StopRequest) => Result;
        _unknown: () => Result;
    }
}

export const SubmissionRequest = {
        initializeProblemRequest: (value: MyApi.submission.InitializeProblemRequest): SubmissionRequest.InitializeProblemRequest => ({
            ...value,
            type: \\"initializeProblemRequest\\"
        }),

        initializeWorkspaceRequest: (): SubmissionRequest.InitializeWorkspaceRequest => ({
            type: \\"initializeWorkspaceRequest\\"
        }),

        submitV2: (value: MyApi.submission.SubmitRequestV2): SubmissionRequest.SubmitV2 => ({
            ...value,
            type: \\"submitV2\\"
        }),

        workspaceSubmit: (value: MyApi.submission.WorkspaceSubmitRequest): SubmissionRequest.WorkspaceSubmit => ({
            ...value,
            type: \\"workspaceSubmit\\"
        }),

        stop: (value: MyApi.submission.StopRequest): SubmissionRequest.Stop => ({
            ...value,
            type: \\"stop\\"
        }),

        _visit: <Result>(value: SubmissionRequest, visitor: SubmissionRequest._Visitor<Result>): Result => {
            switch (value.type) {
                case \\"initializeProblemRequest\\": return visitor.initializeProblemRequest(value);
                case \\"initializeWorkspaceRequest\\": return visitor.initializeWorkspaceRequest();
                case \\"submitV2\\": return visitor.submitV2(value);
                case \\"workspaceSubmit\\": return visitor.workspaceSubmit(value);
                case \\"stop\\": return visitor.stop(value);
                default: return visitor._unknown();
            }
        },

        _types: (): SubmissionRequest[\\"type\\"][] => [\\"initializeProblemRequest\\", \\"initializeWorkspaceRequest\\", \\"submitV2\\", \\"workspaceSubmit\\", \\"stop\\"],
    } as const;
",
                "name": "SubmissionRequest.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export type SubmissionResponse = 
    | SubmissionResponse.ServerInitialized
    | SubmissionResponse.ProblemInitialized
    | SubmissionResponse.WorkspaceInitialized
    | SubmissionResponse.ServerErrored
    | SubmissionResponse.CodeExecutionUpdate
    | SubmissionResponse.Terminated;

export declare namespace SubmissionResponse {
    interface ServerInitialized {
        type: \\"serverInitialized\\";
    }

    interface ProblemInitialized {
        type: \\"problemInitialized\\";
        problemInitialized: MyApi.commons.ProblemId;
    }

    interface WorkspaceInitialized {
        type: \\"workspaceInitialized\\";
    }

    interface ServerErrored extends MyApi.submission.ExceptionInfo {
        type: \\"serverErrored\\";
    }

    interface CodeExecutionUpdate {
        type: \\"codeExecutionUpdate\\";
        codeExecutionUpdate: MyApi.submission.CodeExecutionUpdate;
    }

    interface Terminated extends MyApi.submission.TerminatedResponse {
        type: \\"terminated\\";
    }

    export interface _Visitor<Result> {
        serverInitialized: () => Result;
        problemInitialized: (value: MyApi.commons.ProblemId) => Result;
        workspaceInitialized: () => Result;
        serverErrored: (value: MyApi.submission.ExceptionInfo) => Result;
        codeExecutionUpdate: (value: MyApi.submission.CodeExecutionUpdate) => Result;
        terminated: (value: MyApi.submission.TerminatedResponse) => Result;
        _unknown: () => Result;
    }
}

export const SubmissionResponse = {
        serverInitialized: (): SubmissionResponse.ServerInitialized => ({
            type: \\"serverInitialized\\"
        }),

        problemInitialized: (value: MyApi.commons.ProblemId): SubmissionResponse.ProblemInitialized => ({
            problemInitialized: value,
            type: \\"problemInitialized\\"
        }),

        workspaceInitialized: (): SubmissionResponse.WorkspaceInitialized => ({
            type: \\"workspaceInitialized\\"
        }),

        serverErrored: (value: MyApi.submission.ExceptionInfo): SubmissionResponse.ServerErrored => ({
            ...value,
            type: \\"serverErrored\\"
        }),

        codeExecutionUpdate: (value: MyApi.submission.CodeExecutionUpdate): SubmissionResponse.CodeExecutionUpdate => ({
            codeExecutionUpdate: value,
            type: \\"codeExecutionUpdate\\"
        }),

        terminated: (value: MyApi.submission.TerminatedResponse): SubmissionResponse.Terminated => ({
            ...value,
            type: \\"terminated\\"
        }),

        _visit: <Result>(value: SubmissionResponse, visitor: SubmissionResponse._Visitor<Result>): Result => {
            switch (value.type) {
                case \\"serverInitialized\\": return visitor.serverInitialized();
                case \\"problemInitialized\\": return visitor.problemInitialized(value.problemInitialized);
                case \\"workspaceInitialized\\": return visitor.workspaceInitialized();
                case \\"serverErrored\\": return visitor.serverErrored(value);
                case \\"codeExecutionUpdate\\": return visitor.codeExecutionUpdate(value.codeExecutionUpdate);
                case \\"terminated\\": return visitor.terminated(value);
                default: return visitor._unknown();
            }
        },

        _types: (): SubmissionResponse[\\"type\\"][] => [\\"serverInitialized\\", \\"problemInitialized\\", \\"workspaceInitialized\\", \\"serverErrored\\", \\"codeExecutionUpdate\\", \\"terminated\\"],
    } as const;
",
                "name": "SubmissionResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export type SubmissionStatusForTestCase = 
    | SubmissionStatusForTestCase.Graded
    | SubmissionStatusForTestCase.GradedV2
    | SubmissionStatusForTestCase.Traced;

export declare namespace SubmissionStatusForTestCase {
    interface Graded extends MyApi.submission.TestCaseResultWithStdout {
        type: \\"graded\\";
    }

    interface GradedV2 {
        type: \\"gradedV2\\";
        gradedV2: MyApi.submission.TestCaseGrade;
    }

    interface Traced extends MyApi.submission.TracedTestCase {
        type: \\"traced\\";
    }

    export interface _Visitor<Result> {
        graded: (value: MyApi.submission.TestCaseResultWithStdout) => Result;
        gradedV2: (value: MyApi.submission.TestCaseGrade) => Result;
        traced: (value: MyApi.submission.TracedTestCase) => Result;
        _unknown: () => Result;
    }
}

export const SubmissionStatusForTestCase = {
        graded: (value: MyApi.submission.TestCaseResultWithStdout): SubmissionStatusForTestCase.Graded => ({
            ...value,
            type: \\"graded\\"
        }),

        gradedV2: (value: MyApi.submission.TestCaseGrade): SubmissionStatusForTestCase.GradedV2 => ({
            gradedV2: value,
            type: \\"gradedV2\\"
        }),

        traced: (value: MyApi.submission.TracedTestCase): SubmissionStatusForTestCase.Traced => ({
            ...value,
            type: \\"traced\\"
        }),

        _visit: <Result>(value: SubmissionStatusForTestCase, visitor: SubmissionStatusForTestCase._Visitor<Result>): Result => {
            switch (value.type) {
                case \\"graded\\": return visitor.graded(value);
                case \\"gradedV2\\": return visitor.gradedV2(value.gradedV2);
                case \\"traced\\": return visitor.traced(value);
                default: return visitor._unknown();
            }
        },

        _types: (): SubmissionStatusForTestCase[\\"type\\"][] => [\\"graded\\", \\"gradedV2\\", \\"traced\\"],
    } as const;
",
                "name": "SubmissionStatusForTestCase.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export type SubmissionStatusV2 = 
    | SubmissionStatusV2.Test
    | SubmissionStatusV2.Workspace;

export declare namespace SubmissionStatusV2 {
    interface Test extends MyApi.submission.TestSubmissionStatusV2 {
        type: \\"test\\";
    }

    interface Workspace extends MyApi.submission.WorkspaceSubmissionStatusV2 {
        type: \\"workspace\\";
    }

    export interface _Visitor<Result> {
        test: (value: MyApi.submission.TestSubmissionStatusV2) => Result;
        workspace: (value: MyApi.submission.WorkspaceSubmissionStatusV2) => Result;
        _unknown: () => Result;
    }
}

export const SubmissionStatusV2 = {
        test: (value: MyApi.submission.TestSubmissionStatusV2): SubmissionStatusV2.Test => ({
            ...value,
            type: \\"test\\"
        }),

        workspace: (value: MyApi.submission.WorkspaceSubmissionStatusV2): SubmissionStatusV2.Workspace => ({
            ...value,
            type: \\"workspace\\"
        }),

        _visit: <Result>(value: SubmissionStatusV2, visitor: SubmissionStatusV2._Visitor<Result>): Result => {
            switch (value.type) {
                case \\"test\\": return visitor.test(value);
                case \\"workspace\\": return visitor.workspace(value);
                default: return visitor._unknown();
            }
        },

        _types: (): SubmissionStatusV2[\\"type\\"][] => [\\"test\\", \\"workspace\\"],
    } as const;
",
                "name": "SubmissionStatusV2.ts",
                "type": "file",
              },
              Object {
                "contents": "/**
 * Keep in sync with SubmissionType.
 */
export type SubmissionTypeEnum = 
    | \\"TEST\\";

export const SubmissionTypeEnum = {
        Test: \\"TEST\\",

        _visit: <Result>(value: SubmissionTypeEnum, visitor: SubmissionTypeEnum._Visitor<Result>): Result => {
            switch (value) {
                case SubmissionTypeEnum.Test: return visitor.test();
                default: return visitor._unknown();
            }
        },

        _values: (): SubmissionTypeEnum[] => [SubmissionTypeEnum.Test],
    } as const;

export declare namespace SubmissionTypeEnum {
    type Test = \\"TEST\\";

    export interface _Visitor<Result> {
        test: () => Result;
        _unknown: () => Result;
    }
}
",
                "name": "SubmissionTypeEnum.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export type SubmissionTypeState = 
    | SubmissionTypeState.Test
    | SubmissionTypeState.Workspace;

export declare namespace SubmissionTypeState {
    interface Test extends MyApi.submission.TestSubmissionState {
        type: \\"test\\";
    }

    interface Workspace extends MyApi.submission.WorkspaceSubmissionState {
        type: \\"workspace\\";
    }

    export interface _Visitor<Result> {
        test: (value: MyApi.submission.TestSubmissionState) => Result;
        workspace: (value: MyApi.submission.WorkspaceSubmissionState) => Result;
        _unknown: () => Result;
    }
}

export const SubmissionTypeState = {
        test: (value: MyApi.submission.TestSubmissionState): SubmissionTypeState.Test => ({
            ...value,
            type: \\"test\\"
        }),

        workspace: (value: MyApi.submission.WorkspaceSubmissionState): SubmissionTypeState.Workspace => ({
            ...value,
            type: \\"workspace\\"
        }),

        _visit: <Result>(value: SubmissionTypeState, visitor: SubmissionTypeState._Visitor<Result>): Result => {
            switch (value.type) {
                case \\"test\\": return visitor.test(value);
                case \\"workspace\\": return visitor.workspace(value);
                default: return visitor._unknown();
            }
        },

        _types: (): SubmissionTypeState[\\"type\\"][] => [\\"test\\", \\"workspace\\"],
    } as const;
",
                "name": "SubmissionTypeState.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface SubmitRequestV2 {
    submissionId: MyApi.submission.SubmissionId;
    language: MyApi.commons.Language;
    submissionFiles: MyApi.submission.SubmissionFileInfo[];
    problemId: MyApi.commons.ProblemId;
    problemVersion?: number;
    userId?: string;
}
",
                "name": "SubmitRequestV2.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface TerminatedResponse {
}
",
                "name": "TerminatedResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export type TestCaseGrade = 
    | TestCaseGrade.Hidden
    | TestCaseGrade.NonHidden;

export declare namespace TestCaseGrade {
    interface Hidden extends MyApi.submission.TestCaseHiddenGrade {
        type: \\"hidden\\";
    }

    interface NonHidden extends MyApi.submission.TestCaseNonHiddenGrade {
        type: \\"nonHidden\\";
    }

    export interface _Visitor<Result> {
        hidden: (value: MyApi.submission.TestCaseHiddenGrade) => Result;
        nonHidden: (value: MyApi.submission.TestCaseNonHiddenGrade) => Result;
        _unknown: () => Result;
    }
}

export const TestCaseGrade = {
        hidden: (value: MyApi.submission.TestCaseHiddenGrade): TestCaseGrade.Hidden => ({
            ...value,
            type: \\"hidden\\"
        }),

        nonHidden: (value: MyApi.submission.TestCaseNonHiddenGrade): TestCaseGrade.NonHidden => ({
            ...value,
            type: \\"nonHidden\\"
        }),

        _visit: <Result>(value: TestCaseGrade, visitor: TestCaseGrade._Visitor<Result>): Result => {
            switch (value.type) {
                case \\"hidden\\": return visitor.hidden(value);
                case \\"nonHidden\\": return visitor.nonHidden(value);
                default: return visitor._unknown();
            }
        },

        _types: (): TestCaseGrade[\\"type\\"][] => [\\"hidden\\", \\"nonHidden\\"],
    } as const;
",
                "name": "TestCaseGrade.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface TestCaseHiddenGrade {
    passed: boolean;
}
",
                "name": "TestCaseHiddenGrade.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface TestCaseNonHiddenGrade {
    passed: boolean;
    actualResult?: MyApi.commons.VariableValue;
    exception?: MyApi.submission.ExceptionV2;
    stdout: string;
}
",
                "name": "TestCaseNonHiddenGrade.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface TestCaseResult {
    expectedResult: MyApi.commons.VariableValue;
    actualResult: MyApi.submission.ActualResult;
    passed: boolean;
}
",
                "name": "TestCaseResult.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface TestCaseResultWithStdout {
    result: MyApi.submission.TestCaseResult;
    stdout: string;
}
",
                "name": "TestCaseResultWithStdout.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface TestSubmissionState {
    problemId: MyApi.commons.ProblemId;
    defaultTestCases: MyApi.commons.TestCase[];
    customTestCases: MyApi.commons.TestCase[];
    status: MyApi.submission.TestSubmissionStatus;
}
",
                "name": "TestSubmissionState.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export type TestSubmissionStatus = 
    | TestSubmissionStatus.Stopped
    | TestSubmissionStatus.Errored
    | TestSubmissionStatus.Running
    | TestSubmissionStatus.TestCaseIdToState;

export declare namespace TestSubmissionStatus {
    interface Stopped {
        type: \\"stopped\\";
    }

    interface Errored {
        type: \\"errored\\";
        errored: MyApi.submission.ErrorInfo;
    }

    interface Running {
        type: \\"running\\";
        running: MyApi.submission.RunningSubmissionState;
    }

    interface TestCaseIdToState {
        type: \\"testCaseIdToState\\";
        testCaseIdToState: Record<string, MyApi.submission.SubmissionStatusForTestCase>;
    }

    export interface _Visitor<Result> {
        stopped: () => Result;
        errored: (value: MyApi.submission.ErrorInfo) => Result;
        running: (value: MyApi.submission.RunningSubmissionState) => Result;
        testCaseIdToState: (value: Record<string, MyApi.submission.SubmissionStatusForTestCase>) => Result;
        _unknown: () => Result;
    }
}

export const TestSubmissionStatus = {
        stopped: (): TestSubmissionStatus.Stopped => ({
            type: \\"stopped\\"
        }),

        errored: (value: MyApi.submission.ErrorInfo): TestSubmissionStatus.Errored => ({
            errored: value,
            type: \\"errored\\"
        }),

        running: (value: MyApi.submission.RunningSubmissionState): TestSubmissionStatus.Running => ({
            running: value,
            type: \\"running\\"
        }),

        testCaseIdToState: (value: Record<string, MyApi.submission.SubmissionStatusForTestCase>): TestSubmissionStatus.TestCaseIdToState => ({
            testCaseIdToState: value,
            type: \\"testCaseIdToState\\"
        }),

        _visit: <Result>(value: TestSubmissionStatus, visitor: TestSubmissionStatus._Visitor<Result>): Result => {
            switch (value.type) {
                case \\"stopped\\": return visitor.stopped();
                case \\"errored\\": return visitor.errored(value.errored);
                case \\"running\\": return visitor.running(value.running);
                case \\"testCaseIdToState\\": return visitor.testCaseIdToState(value.testCaseIdToState);
                default: return visitor._unknown();
            }
        },

        _types: (): TestSubmissionStatus[\\"type\\"][] => [\\"stopped\\", \\"errored\\", \\"running\\", \\"testCaseIdToState\\"],
    } as const;
",
                "name": "TestSubmissionStatus.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface TestSubmissionStatusV2 {
    updates: MyApi.submission.TestSubmissionUpdate[];
    problemId: MyApi.commons.ProblemId;
    problemVersion: number;
    problemInfo: MyApi.v2.problem.ProblemInfoV2;
}
",
                "name": "TestSubmissionStatusV2.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface TestSubmissionUpdate {
    updateTime: string;
    updateInfo: MyApi.submission.TestSubmissionUpdateInfo;
}
",
                "name": "TestSubmissionUpdate.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export type TestSubmissionUpdateInfo = 
    | TestSubmissionUpdateInfo.Running
    | TestSubmissionUpdateInfo.Stopped
    | TestSubmissionUpdateInfo.Errored
    | TestSubmissionUpdateInfo.GradedTestCase
    | TestSubmissionUpdateInfo.RecordedTestCase
    | TestSubmissionUpdateInfo.Finished;

export declare namespace TestSubmissionUpdateInfo {
    interface Running {
        type: \\"running\\";
        running: MyApi.submission.RunningSubmissionState;
    }

    interface Stopped {
        type: \\"stopped\\";
    }

    interface Errored {
        type: \\"errored\\";
        errored: MyApi.submission.ErrorInfo;
    }

    interface GradedTestCase extends MyApi.submission.GradedTestCaseUpdate {
        type: \\"gradedTestCase\\";
    }

    interface RecordedTestCase extends MyApi.submission.RecordedTestCaseUpdate {
        type: \\"recordedTestCase\\";
    }

    interface Finished {
        type: \\"finished\\";
    }

    export interface _Visitor<Result> {
        running: (value: MyApi.submission.RunningSubmissionState) => Result;
        stopped: () => Result;
        errored: (value: MyApi.submission.ErrorInfo) => Result;
        gradedTestCase: (value: MyApi.submission.GradedTestCaseUpdate) => Result;
        recordedTestCase: (value: MyApi.submission.RecordedTestCaseUpdate) => Result;
        finished: () => Result;
        _unknown: () => Result;
    }
}

export const TestSubmissionUpdateInfo = {
        running: (value: MyApi.submission.RunningSubmissionState): TestSubmissionUpdateInfo.Running => ({
            running: value,
            type: \\"running\\"
        }),

        stopped: (): TestSubmissionUpdateInfo.Stopped => ({
            type: \\"stopped\\"
        }),

        errored: (value: MyApi.submission.ErrorInfo): TestSubmissionUpdateInfo.Errored => ({
            errored: value,
            type: \\"errored\\"
        }),

        gradedTestCase: (value: MyApi.submission.GradedTestCaseUpdate): TestSubmissionUpdateInfo.GradedTestCase => ({
            ...value,
            type: \\"gradedTestCase\\"
        }),

        recordedTestCase: (value: MyApi.submission.RecordedTestCaseUpdate): TestSubmissionUpdateInfo.RecordedTestCase => ({
            ...value,
            type: \\"recordedTestCase\\"
        }),

        finished: (): TestSubmissionUpdateInfo.Finished => ({
            type: \\"finished\\"
        }),

        _visit: <Result>(value: TestSubmissionUpdateInfo, visitor: TestSubmissionUpdateInfo._Visitor<Result>): Result => {
            switch (value.type) {
                case \\"running\\": return visitor.running(value.running);
                case \\"stopped\\": return visitor.stopped();
                case \\"errored\\": return visitor.errored(value.errored);
                case \\"gradedTestCase\\": return visitor.gradedTestCase(value);
                case \\"recordedTestCase\\": return visitor.recordedTestCase(value);
                case \\"finished\\": return visitor.finished();
                default: return visitor._unknown();
            }
        },

        _types: (): TestSubmissionUpdateInfo[\\"type\\"][] => [\\"running\\", \\"stopped\\", \\"errored\\", \\"gradedTestCase\\", \\"recordedTestCase\\", \\"finished\\"],
    } as const;
",
                "name": "TestSubmissionUpdateInfo.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface TraceResponse {
    submissionId: MyApi.submission.SubmissionId;
    lineNumber: number;
    returnValue?: MyApi.commons.DebugVariableValue;
    expressionLocation?: MyApi.submission.ExpressionLocation;
    stack: MyApi.submission.StackInformation;
    stdout?: string;
}
",
                "name": "TraceResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface TraceResponseV2 {
    submissionId: MyApi.submission.SubmissionId;
    lineNumber: number;
    file: MyApi.submission.TracedFile;
    returnValue?: MyApi.commons.DebugVariableValue;
    expressionLocation?: MyApi.submission.ExpressionLocation;
    stack: MyApi.submission.StackInformation;
    stdout?: string;
}
",
                "name": "TraceResponseV2.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface TraceResponsesPage {
    /**
     * If present, use this to load subseqent pages.
     * The offset is the id of the next trace response to load.
     *
     */
    offset?: number;
    traceResponses: MyApi.submission.TraceResponse[];
}
",
                "name": "TraceResponsesPage.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface TraceResponsesPageV2 {
    /**
     * If present, use this to load subseqent pages.
     * The offset is the id of the next trace response to load.
     *
     */
    offset?: number;
    traceResponses: MyApi.submission.TraceResponseV2[];
}
",
                "name": "TraceResponsesPageV2.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface TracedFile {
    filename: string;
    directory: string;
}
",
                "name": "TracedFile.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface TracedTestCase {
    result: MyApi.submission.TestCaseResultWithStdout;
    traceResponsesSize: number;
}
",
                "name": "TracedTestCase.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface UnexpectedLanguageError {
    expectedLanguage: MyApi.commons.Language;
    actualLanguage: MyApi.commons.Language;
}
",
                "name": "UnexpectedLanguageError.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface WorkspaceFiles {
    mainFile: MyApi.commons.FileInfo;
    readOnlyFiles: MyApi.commons.FileInfo[];
}
",
                "name": "WorkspaceFiles.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface WorkspaceRanResponse {
    submissionId: MyApi.submission.SubmissionId;
    runDetails: MyApi.submission.WorkspaceRunDetails;
}
",
                "name": "WorkspaceRanResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface WorkspaceRunDetails {
    exceptionV2?: MyApi.submission.ExceptionV2;
    exception?: MyApi.submission.ExceptionInfo;
    stdout: string;
}
",
                "name": "WorkspaceRunDetails.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface WorkspaceStarterFilesResponse {
    files: Record<MyApi.commons.Language, MyApi.submission.WorkspaceFiles>;
}
",
                "name": "WorkspaceStarterFilesResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface WorkspaceStarterFilesResponseV2 {
    filesByLanguage: Record<MyApi.commons.Language, MyApi.v2.problem.Files>;
}
",
                "name": "WorkspaceStarterFilesResponseV2.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface WorkspaceSubmissionState {
    status: MyApi.submission.WorkspaceSubmissionStatus;
}
",
                "name": "WorkspaceSubmissionState.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export type WorkspaceSubmissionStatus = 
    | WorkspaceSubmissionStatus.Stopped
    | WorkspaceSubmissionStatus.Errored
    | WorkspaceSubmissionStatus.Running
    | WorkspaceSubmissionStatus.Ran
    | WorkspaceSubmissionStatus.Traced;

export declare namespace WorkspaceSubmissionStatus {
    interface Stopped {
        type: \\"stopped\\";
    }

    interface Errored {
        type: \\"errored\\";
        errored: MyApi.submission.ErrorInfo;
    }

    interface Running {
        type: \\"running\\";
        running: MyApi.submission.RunningSubmissionState;
    }

    interface Ran extends MyApi.submission.WorkspaceRunDetails {
        type: \\"ran\\";
    }

    interface Traced extends MyApi.submission.WorkspaceRunDetails {
        type: \\"traced\\";
    }

    export interface _Visitor<Result> {
        stopped: () => Result;
        errored: (value: MyApi.submission.ErrorInfo) => Result;
        running: (value: MyApi.submission.RunningSubmissionState) => Result;
        ran: (value: MyApi.submission.WorkspaceRunDetails) => Result;
        traced: (value: MyApi.submission.WorkspaceRunDetails) => Result;
        _unknown: () => Result;
    }
}

export const WorkspaceSubmissionStatus = {
        stopped: (): WorkspaceSubmissionStatus.Stopped => ({
            type: \\"stopped\\"
        }),

        errored: (value: MyApi.submission.ErrorInfo): WorkspaceSubmissionStatus.Errored => ({
            errored: value,
            type: \\"errored\\"
        }),

        running: (value: MyApi.submission.RunningSubmissionState): WorkspaceSubmissionStatus.Running => ({
            running: value,
            type: \\"running\\"
        }),

        ran: (value: MyApi.submission.WorkspaceRunDetails): WorkspaceSubmissionStatus.Ran => ({
            ...value,
            type: \\"ran\\"
        }),

        traced: (value: MyApi.submission.WorkspaceRunDetails): WorkspaceSubmissionStatus.Traced => ({
            ...value,
            type: \\"traced\\"
        }),

        _visit: <Result>(value: WorkspaceSubmissionStatus, visitor: WorkspaceSubmissionStatus._Visitor<Result>): Result => {
            switch (value.type) {
                case \\"stopped\\": return visitor.stopped();
                case \\"errored\\": return visitor.errored(value.errored);
                case \\"running\\": return visitor.running(value.running);
                case \\"ran\\": return visitor.ran(value);
                case \\"traced\\": return visitor.traced(value);
                default: return visitor._unknown();
            }
        },

        _types: (): WorkspaceSubmissionStatus[\\"type\\"][] => [\\"stopped\\", \\"errored\\", \\"running\\", \\"ran\\", \\"traced\\"],
    } as const;
",
                "name": "WorkspaceSubmissionStatus.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface WorkspaceSubmissionStatusV2 {
    updates: MyApi.submission.WorkspaceSubmissionUpdate[];
}
",
                "name": "WorkspaceSubmissionStatusV2.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface WorkspaceSubmissionUpdate {
    updateTime: string;
    updateInfo: MyApi.submission.WorkspaceSubmissionUpdateInfo;
}
",
                "name": "WorkspaceSubmissionUpdate.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export type WorkspaceSubmissionUpdateInfo = 
    | WorkspaceSubmissionUpdateInfo.Running
    | WorkspaceSubmissionUpdateInfo.Ran
    | WorkspaceSubmissionUpdateInfo.Stopped
    | WorkspaceSubmissionUpdateInfo.Traced
    | WorkspaceSubmissionUpdateInfo.TracedV2
    | WorkspaceSubmissionUpdateInfo.Errored
    | WorkspaceSubmissionUpdateInfo.Finished;

export declare namespace WorkspaceSubmissionUpdateInfo {
    interface Running {
        type: \\"running\\";
        running: MyApi.submission.RunningSubmissionState;
    }

    interface Ran extends MyApi.submission.WorkspaceRunDetails {
        type: \\"ran\\";
    }

    interface Stopped {
        type: \\"stopped\\";
    }

    interface Traced {
        type: \\"traced\\";
    }

    interface TracedV2 extends MyApi.submission.WorkspaceTracedUpdate {
        type: \\"tracedV2\\";
    }

    interface Errored {
        type: \\"errored\\";
        errored: MyApi.submission.ErrorInfo;
    }

    interface Finished {
        type: \\"finished\\";
    }

    export interface _Visitor<Result> {
        running: (value: MyApi.submission.RunningSubmissionState) => Result;
        ran: (value: MyApi.submission.WorkspaceRunDetails) => Result;
        stopped: () => Result;
        traced: () => Result;
        tracedV2: (value: MyApi.submission.WorkspaceTracedUpdate) => Result;
        errored: (value: MyApi.submission.ErrorInfo) => Result;
        finished: () => Result;
        _unknown: () => Result;
    }
}

export const WorkspaceSubmissionUpdateInfo = {
        running: (value: MyApi.submission.RunningSubmissionState): WorkspaceSubmissionUpdateInfo.Running => ({
            running: value,
            type: \\"running\\"
        }),

        ran: (value: MyApi.submission.WorkspaceRunDetails): WorkspaceSubmissionUpdateInfo.Ran => ({
            ...value,
            type: \\"ran\\"
        }),

        stopped: (): WorkspaceSubmissionUpdateInfo.Stopped => ({
            type: \\"stopped\\"
        }),

        traced: (): WorkspaceSubmissionUpdateInfo.Traced => ({
            type: \\"traced\\"
        }),

        tracedV2: (value: MyApi.submission.WorkspaceTracedUpdate): WorkspaceSubmissionUpdateInfo.TracedV2 => ({
            ...value,
            type: \\"tracedV2\\"
        }),

        errored: (value: MyApi.submission.ErrorInfo): WorkspaceSubmissionUpdateInfo.Errored => ({
            errored: value,
            type: \\"errored\\"
        }),

        finished: (): WorkspaceSubmissionUpdateInfo.Finished => ({
            type: \\"finished\\"
        }),

        _visit: <Result>(value: WorkspaceSubmissionUpdateInfo, visitor: WorkspaceSubmissionUpdateInfo._Visitor<Result>): Result => {
            switch (value.type) {
                case \\"running\\": return visitor.running(value.running);
                case \\"ran\\": return visitor.ran(value);
                case \\"stopped\\": return visitor.stopped();
                case \\"traced\\": return visitor.traced();
                case \\"tracedV2\\": return visitor.tracedV2(value);
                case \\"errored\\": return visitor.errored(value.errored);
                case \\"finished\\": return visitor.finished();
                default: return visitor._unknown();
            }
        },

        _types: (): WorkspaceSubmissionUpdateInfo[\\"type\\"][] => [\\"running\\", \\"ran\\", \\"stopped\\", \\"traced\\", \\"tracedV2\\", \\"errored\\", \\"finished\\"],
    } as const;
",
                "name": "WorkspaceSubmissionUpdateInfo.ts",
                "type": "file",
              },
              Object {
                "contents": "import { MyApi } from \\"../../..\\";

export interface WorkspaceSubmitRequest {
    submissionId: MyApi.submission.SubmissionId;
    language: MyApi.commons.Language;
    submissionFiles: MyApi.submission.SubmissionFileInfo[];
    userId?: string;
}
",
                "name": "WorkspaceSubmitRequest.ts",
                "type": "file",
              },
              Object {
                "contents": "export interface WorkspaceTracedUpdate {
    traceResponsesSize: number;
}
",
                "name": "WorkspaceTracedUpdate.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./SubmissionId\\";
export * from \\"./ShareId\\";
export * from \\"./SubmissionRequest\\";
export * from \\"./InitializeProblemRequest\\";
export * from \\"./SubmitRequestV2\\";
export * from \\"./WorkspaceSubmitRequest\\";
export * from \\"./SubmissionFileInfo\\";
export * from \\"./SubmissionTypeEnum\\";
export * from \\"./StopRequest\\";
export * from \\"./SubmissionResponse\\";
export * from \\"./CodeExecutionUpdate\\";
export * from \\"./BuildingExecutorResponse\\";
export * from \\"./RunningResponse\\";
export * from \\"./RunningSubmissionState\\";
export * from \\"./ErroredResponse\\";
export * from \\"./ErrorInfo\\";
export * from \\"./CompileError\\";
export * from \\"./RuntimeError\\";
export * from \\"./InternalError\\";
export * from \\"./StoppedResponse\\";
export * from \\"./WorkspaceRanResponse\\";
export * from \\"./WorkspaceRunDetails\\";
export * from \\"./GradedResponse\\";
export * from \\"./GradedResponseV2\\";
export * from \\"./TestCaseGrade\\";
export * from \\"./TestCaseHiddenGrade\\";
export * from \\"./TestCaseNonHiddenGrade\\";
export * from \\"./RecordedResponseNotification\\";
export * from \\"./RecordingResponseNotification\\";
export * from \\"./LightweightStackframeInformation\\";
export * from \\"./TestCaseResultWithStdout\\";
export * from \\"./TestCaseResult\\";
export * from \\"./ActualResult\\";
export * from \\"./ExceptionV2\\";
export * from \\"./ExceptionInfo\\";
export * from \\"./InvalidRequestResponse\\";
export * from \\"./InvalidRequestCause\\";
export * from \\"./ExistingSubmissionExecuting\\";
export * from \\"./SubmissionIdNotFound\\";
export * from \\"./CustomTestCasesUnsupported\\";
export * from \\"./UnexpectedLanguageError\\";
export * from \\"./TerminatedResponse\\";
export * from \\"./FinishedResponse\\";
export * from \\"./StdoutResponse\\";
export * from \\"./StderrResponse\\";
export * from \\"./TraceResponse\\";
export * from \\"./TraceResponseV2\\";
export * from \\"./TracedFile\\";
export * from \\"./ExpressionLocation\\";
export * from \\"./StackInformation\\";
export * from \\"./StackFrame\\";
export * from \\"./Scope\\";
export * from \\"./ExecutionSessionResponse\\";
export * from \\"./ExecutionSessionStatus\\";
export * from \\"./SubmissionStatusV2\\";
export * from \\"./TestSubmissionStatusV2\\";
export * from \\"./WorkspaceSubmissionStatusV2\\";
export * from \\"./TestSubmissionUpdate\\";
export * from \\"./TestSubmissionUpdateInfo\\";
export * from \\"./WorkspaceSubmissionUpdate\\";
export * from \\"./WorkspaceSubmissionUpdateInfo\\";
export * from \\"./GradedTestCaseUpdate\\";
export * from \\"./RecordedTestCaseUpdate\\";
export * from \\"./WorkspaceTracedUpdate\\";
export * from \\"./SubmissionTypeState\\";
export * from \\"./WorkspaceSubmissionState\\";
export * from \\"./WorkspaceSubmissionStatus\\";
export * from \\"./TestSubmissionState\\";
export * from \\"./TestSubmissionStatus\\";
export * from \\"./SubmissionStatusForTestCase\\";
export * from \\"./TracedTestCase\\";
export * from \\"./TraceResponsesPage\\";
export * from \\"./TraceResponsesPageV2\\";
export * from \\"./GetTraceResponsesPageRequest\\";
export * from \\"./WorkspaceStarterFilesResponse\\";
export * from \\"./WorkspaceStarterFilesResponseV2\\";
export * from \\"./WorkspaceFiles\\";
export * from \\"./ExecutionSessionState\\";
export * from \\"./GetExecutionSessionStateResponse\\";
export * from \\"./GetSubmissionStateResponse\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "types",
            "type": "directory",
          },
        ],
        "name": "submission",
        "type": "directory",
      },
      Object {
        "contents": Array [
          Object {
            "contents": Array [
              Object {
                "contents": "import { BearerToken, BasicAuth, _NetworkError, _UnknownError, ErrorDetails, _Response, defaultFetcherV2 } from \\"@fern-typescript/service-utils\\";
import { MyApi } from \\"../../..\\";
import urlJoin from \\"url-join\\";

export interface Client {
    setNumWarmInstances(request: MyApi.sysprop.setNumWarmInstances.Request): Promise<_Response<void, MyApi.sysprop.setNumWarmInstances.Error>>;
    getNumWarmInstances(): Promise<_Response<Record<MyApi.commons.Language, number>, MyApi.sysprop.getNumWarmInstances.Error>>;
}

export declare namespace Client {
    interface Options {
        _basePath: string;
        _token?: BearerToken;
        _credentials?: BasicAuth;
        xApiKey?: string;
    }
}

export class Client implements Client {
    constructor(private readonly options: Client.Options) {
    }

    public async setNumWarmInstances(request: MyApi.sysprop.setNumWarmInstances.Request): Promise<_Response<void, MyApi.sysprop.setNumWarmInstances.Error>> {
        const response = await defaultFetcherV2({
                url: urlJoin(this.options._basePath, \`/num-warm-instances/\${request.language}/\${request.numWarmInstances}\`),
                method: \\"PUT\\",
                headers: {
                    \\"Authorization\\": this.options._token != null ? BearerToken.toAuthorizationHeader(this.options._token) : this.options._credentials != null ? BasicAuth.toAuthorizationHeader(this.options._credentials) : undefined,
                    \\"X-API-Key\\": this.options.xApiKey
                }
            });

        if (response.ok) {
            return {
                ok: true,
                body: undefined
            };
        }

        if (response.type === \\"networkError\\") {
            return {
                ok: false,
                error: {
                    body: { _error: \\"_NetworkError\\" },
                    _visit: visitor => visitor._network()
                }
            };
        }

        return {
            ok: false,
            error: {
                body: response.body as _UnknownError,
                _visit: visitor => visitor._unknown({ statusCode: response.statusCode })
            }
        };
    }

    public async getNumWarmInstances(): Promise<_Response<Record<MyApi.commons.Language, number>, MyApi.sysprop.getNumWarmInstances.Error>> {
        const response = await defaultFetcherV2({
                url: urlJoin(this.options._basePath, \\"/num-warm-instances\\"),
                method: \\"GET\\",
                headers: {
                    \\"Authorization\\": this.options._token != null ? BearerToken.toAuthorizationHeader(this.options._token) : this.options._credentials != null ? BasicAuth.toAuthorizationHeader(this.options._credentials) : undefined,
                    \\"X-API-Key\\": this.options.xApiKey
                }
            });

        if (response.ok) {
            return {
                ok: true,
                body: response.body as Record<MyApi.commons.Language, number>
            };
        }

        if (response.type === \\"networkError\\") {
            return {
                ok: false,
                error: {
                    body: { _error: \\"_NetworkError\\" },
                    _visit: visitor => visitor._network()
                }
            };
        }

        return {
            ok: false,
            error: {
                body: response.body as _UnknownError,
                _visit: visitor => visitor._unknown({ statusCode: response.statusCode })
            }
        };
    }
}

export namespace setNumWarmInstances {
    export interface Request {
        language: MyApi.commons.Language;
        numWarmInstances: number;
    }

    export interface Error {
        body: 
            | _NetworkError
            | _UnknownError;
        _visit: <Result>(visitor: MyApi.sysprop.setNumWarmInstances.ErrorVisitor<Result>) => Result;
    }

    export interface ErrorVisitor<Result> {
        _network: () => Result;
        _unknown: (details: ErrorDetails) => Result;
    }
}

export namespace getNumWarmInstances {
    export interface Error {
        body: 
            | _NetworkError
            | _UnknownError;
        _visit: <Result>(visitor: MyApi.sysprop.getNumWarmInstances.ErrorVisitor<Result>) => Result;
    }

    export interface ErrorVisitor<Result> {
        _network: () => Result;
        _unknown: (details: ErrorDetails) => Result;
    }
}
",
                "name": "Client.ts",
                "type": "file",
              },
              Object {
                "contents": "export { setNumWarmInstances, getNumWarmInstances } from \\"./Client\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "client",
            "type": "directory",
          },
          Object {
            "contents": "export * from \\"./client\\";
",
            "name": "index.ts",
            "type": "file",
          },
        ],
        "name": "sysprop",
        "type": "directory",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "import { BearerToken, BasicAuth } from \\"@fern-typescript/service-utils\\";
import { Client as ProblemInfoServicV2Client } from \\"./problem/client/Client\\";
import urlJoin from \\"url-join\\";
import { Wrapper as V3Wrapper } from \\"./v3/Wrapper\\";

export namespace Wrapper {
    export interface Options {
        _origin: string;
        _token?: BearerToken;
        _credentials?: BasicAuth;
        xApiKey?: string;
    }
}

export class Wrapper {
    constructor(private readonly options: Wrapper.Options) {
    }

    #problem: ProblemInfoServicV2Client | undefined;

    public get problem(): ProblemInfoServicV2Client {
        return (this.#problem ??= new ProblemInfoServicV2Client({
            _basePath: urlJoin(this.options._origin, \\"/problems-v2\\"),
            _token: this.options._token,
            _credentials: this.options._credentials,
            xApiKey: this.options.xApiKey
        }));
    }

    #v3: V3Wrapper | undefined;

    public get v3(): V3Wrapper {
        return (this.#v3 ??= new V3Wrapper(this.options));
    }
}
",
            "name": "Wrapper.ts",
            "type": "file",
          },
          Object {
            "contents": "export * as problem from \\"./problem\\";
export * from \\"./problem/types\\";
export * as v3 from \\"./v3\\";
",
            "name": "index.ts",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": Array [
                  Object {
                    "contents": "import { BearerToken, BasicAuth, _NetworkError, _UnknownError, ErrorDetails, _Response, defaultFetcherV2 } from \\"@fern-typescript/service-utils\\";
import { MyApi } from \\"../../../..\\";
import urlJoin from \\"url-join\\";

export interface Client {
    getLightweightProblems(): Promise<_Response<MyApi.v2.problem.LightweightProblemInfoV2[], MyApi.v2.problem.getLightweightProblems.Error>>;
    getProblems(): Promise<_Response<MyApi.v2.problem.ProblemInfoV2[], MyApi.v2.problem.getProblems.Error>>;
    getLatestProblem(request: MyApi.v2.problem.getLatestProblem.Request): Promise<_Response<MyApi.v2.problem.ProblemInfoV2, MyApi.v2.problem.getLatestProblem.Error>>;
    getProblemVersion(request: MyApi.v2.problem.getProblemVersion.Request): Promise<_Response<MyApi.v2.problem.ProblemInfoV2, MyApi.v2.problem.getProblemVersion.Error>>;
}

export declare namespace Client {
    interface Options {
        _basePath: string;
        _token?: BearerToken;
        _credentials?: BasicAuth;
        xApiKey?: string;
    }
}

export class Client implements Client {
    constructor(private readonly options: Client.Options) {
    }

    public async getLightweightProblems(): Promise<_Response<MyApi.v2.problem.LightweightProblemInfoV2[], MyApi.v2.problem.getLightweightProblems.Error>> {
        const response = await defaultFetcherV2({
                url: urlJoin(this.options._basePath, \\"/lightweight-problem-info\\"),
                method: \\"GET\\",
                headers: {
                    \\"Authorization\\": this.options._token != null ? BearerToken.toAuthorizationHeader(this.options._token) : this.options._credentials != null ? BasicAuth.toAuthorizationHeader(this.options._credentials) : undefined,
                    \\"X-API-Key\\": this.options.xApiKey
                }
            });

        if (response.ok) {
            return {
                ok: true,
                body: response.body as MyApi.v2.problem.LightweightProblemInfoV2[]
            };
        }

        if (response.type === \\"networkError\\") {
            return {
                ok: false,
                error: {
                    body: { _error: \\"_NetworkError\\" },
                    _visit: visitor => visitor._network()
                }
            };
        }

        return {
            ok: false,
            error: {
                body: response.body as _UnknownError,
                _visit: visitor => visitor._unknown({ statusCode: response.statusCode })
            }
        };
    }

    public async getProblems(): Promise<_Response<MyApi.v2.problem.ProblemInfoV2[], MyApi.v2.problem.getProblems.Error>> {
        const response = await defaultFetcherV2({
                url: urlJoin(this.options._basePath, \\"/problem-info\\"),
                method: \\"GET\\",
                headers: {
                    \\"Authorization\\": this.options._token != null ? BearerToken.toAuthorizationHeader(this.options._token) : this.options._credentials != null ? BasicAuth.toAuthorizationHeader(this.options._credentials) : undefined,
                    \\"X-API-Key\\": this.options.xApiKey
                }
            });

        if (response.ok) {
            return {
                ok: true,
                body: response.body as MyApi.v2.problem.ProblemInfoV2[]
            };
        }

        if (response.type === \\"networkError\\") {
            return {
                ok: false,
                error: {
                    body: { _error: \\"_NetworkError\\" },
                    _visit: visitor => visitor._network()
                }
            };
        }

        return {
            ok: false,
            error: {
                body: response.body as _UnknownError,
                _visit: visitor => visitor._unknown({ statusCode: response.statusCode })
            }
        };
    }

    public async getLatestProblem(request: MyApi.v2.problem.getLatestProblem.Request): Promise<_Response<MyApi.v2.problem.ProblemInfoV2, MyApi.v2.problem.getLatestProblem.Error>> {
        const response = await defaultFetcherV2({
                url: urlJoin(this.options._basePath, \`/problem-info/\${request.problemId}\`),
                method: \\"GET\\",
                headers: {
                    \\"Authorization\\": this.options._token != null ? BearerToken.toAuthorizationHeader(this.options._token) : this.options._credentials != null ? BasicAuth.toAuthorizationHeader(this.options._credentials) : undefined,
                    \\"X-API-Key\\": this.options.xApiKey
                }
            });

        if (response.ok) {
            return {
                ok: true,
                body: response.body as MyApi.v2.problem.ProblemInfoV2
            };
        }

        if (response.type === \\"networkError\\") {
            return {
                ok: false,
                error: {
                    body: { _error: \\"_NetworkError\\" },
                    _visit: visitor => visitor._network()
                }
            };
        }

        return {
            ok: false,
            error: {
                body: response.body as _UnknownError,
                _visit: visitor => visitor._unknown({ statusCode: response.statusCode })
            }
        };
    }

    public async getProblemVersion(request: MyApi.v2.problem.getProblemVersion.Request): Promise<_Response<MyApi.v2.problem.ProblemInfoV2, MyApi.v2.problem.getProblemVersion.Error>> {
        const response = await defaultFetcherV2({
                url: urlJoin(this.options._basePath, \`/problem-info/\${request.problemId}/version/\${request.problemVersion}\`),
                method: \\"GET\\",
                headers: {
                    \\"Authorization\\": this.options._token != null ? BearerToken.toAuthorizationHeader(this.options._token) : this.options._credentials != null ? BasicAuth.toAuthorizationHeader(this.options._credentials) : undefined,
                    \\"X-API-Key\\": this.options.xApiKey
                }
            });

        if (response.ok) {
            return {
                ok: true,
                body: response.body as MyApi.v2.problem.ProblemInfoV2
            };
        }

        if (response.type === \\"networkError\\") {
            return {
                ok: false,
                error: {
                    body: { _error: \\"_NetworkError\\" },
                    _visit: visitor => visitor._network()
                }
            };
        }

        return {
            ok: false,
            error: {
                body: response.body as _UnknownError,
                _visit: visitor => visitor._unknown({ statusCode: response.statusCode })
            }
        };
    }
}

export namespace getLightweightProblems {
    export interface Error {
        body: 
            | _NetworkError
            | _UnknownError;
        _visit: <Result>(visitor: MyApi.v2.problem.getLightweightProblems.ErrorVisitor<Result>) => Result;
    }

    export interface ErrorVisitor<Result> {
        _network: () => Result;
        _unknown: (details: ErrorDetails) => Result;
    }
}

export namespace getProblems {
    export interface Error {
        body: 
            | _NetworkError
            | _UnknownError;
        _visit: <Result>(visitor: MyApi.v2.problem.getProblems.ErrorVisitor<Result>) => Result;
    }

    export interface ErrorVisitor<Result> {
        _network: () => Result;
        _unknown: (details: ErrorDetails) => Result;
    }
}

export namespace getLatestProblem {
    export interface Request {
        problemId: MyApi.commons.ProblemId;
    }

    export interface Error {
        body: 
            | _NetworkError
            | _UnknownError;
        _visit: <Result>(visitor: MyApi.v2.problem.getLatestProblem.ErrorVisitor<Result>) => Result;
    }

    export interface ErrorVisitor<Result> {
        _network: () => Result;
        _unknown: (details: ErrorDetails) => Result;
    }
}

export namespace getProblemVersion {
    export interface Request {
        problemId: MyApi.commons.ProblemId;
        problemVersion: number;
    }

    export interface Error {
        body: 
            | _NetworkError
            | _UnknownError;
        _visit: <Result>(visitor: MyApi.v2.problem.getProblemVersion.ErrorVisitor<Result>) => Result;
    }

    export interface ErrorVisitor<Result> {
        _network: () => Result;
        _unknown: (details: ErrorDetails) => Result;
    }
}
",
                    "name": "Client.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { getLightweightProblems, getProblems, getLatestProblem, getProblemVersion } from \\"./Client\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "client",
                "type": "directory",
              },
              Object {
                "contents": "export * from \\"./types\\";
export * from \\"./client\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

export type AssertCorrectnessCheck = 
    | AssertCorrectnessCheck.DeepEquality
    | AssertCorrectnessCheck.Custom;

export declare namespace AssertCorrectnessCheck {
    interface DeepEquality extends MyApi.v2.problem.DeepEqualityCorrectnessCheck {
        type: \\"deepEquality\\";
    }

    interface Custom extends MyApi.v2.problem.VoidFunctionDefinitionThatTakesActualResult {
        type: \\"custom\\";
    }

    export interface _Visitor<Result> {
        deepEquality: (value: MyApi.v2.problem.DeepEqualityCorrectnessCheck) => Result;
        custom: (value: MyApi.v2.problem.VoidFunctionDefinitionThatTakesActualResult) => Result;
        _unknown: () => Result;
    }
}

export const AssertCorrectnessCheck = {
        deepEquality: (value: MyApi.v2.problem.DeepEqualityCorrectnessCheck): AssertCorrectnessCheck.DeepEquality => ({
            ...value,
            type: \\"deepEquality\\"
        }),

        custom: (value: MyApi.v2.problem.VoidFunctionDefinitionThatTakesActualResult): AssertCorrectnessCheck.Custom => ({
            ...value,
            type: \\"custom\\"
        }),

        _visit: <Result>(value: AssertCorrectnessCheck, visitor: AssertCorrectnessCheck._Visitor<Result>): Result => {
            switch (value.type) {
                case \\"deepEquality\\": return visitor.deepEquality(value);
                case \\"custom\\": return visitor.custom(value);
                default: return visitor._unknown();
            }
        },

        _types: (): AssertCorrectnessCheck[\\"type\\"][] => [\\"deepEquality\\", \\"custom\\"],
    } as const;
",
                    "name": "AssertCorrectnessCheck.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

export interface BasicCustomFiles {
    methodName: string;
    signature: MyApi.v2.problem.NonVoidFunctionSignature;
    additionalFiles: Record<MyApi.commons.Language, MyApi.v2.problem.Files>;
    basicTestCaseTemplate: MyApi.v2.problem.BasicTestCaseTemplate;
}
",
                    "name": "BasicCustomFiles.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

export interface BasicTestCaseTemplate {
    templateId: MyApi.v2.problem.TestCaseTemplateId;
    name: string;
    description: MyApi.v2.problem.TestCaseImplementationDescription;
    expectedValueParameterId: MyApi.v2.problem.ParameterId;
}
",
                    "name": "BasicTestCaseTemplate.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

export interface CreateProblemRequestV2 {
    problemName: string;
    problemDescription: MyApi.problem.ProblemDescription;
    customFiles: MyApi.v2.problem.CustomFiles;
    customTestCaseTemplates: MyApi.v2.problem.TestCaseTemplate[];
    testcases: MyApi.v2.problem.TestCaseV2[];
    supportedLanguages: MyApi.commons.Language[];
    isPublic: boolean;
}
",
                    "name": "CreateProblemRequestV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

export type CustomFiles = 
    | CustomFiles.Basic
    | CustomFiles.Custom;

export declare namespace CustomFiles {
    interface Basic extends MyApi.v2.problem.BasicCustomFiles {
        type: \\"basic\\";
    }

    interface Custom {
        type: \\"custom\\";
        custom: Record<MyApi.commons.Language, MyApi.v2.problem.Files>;
    }

    export interface _Visitor<Result> {
        basic: (value: MyApi.v2.problem.BasicCustomFiles) => Result;
        custom: (value: Record<MyApi.commons.Language, MyApi.v2.problem.Files>) => Result;
        _unknown: () => Result;
    }
}

export const CustomFiles = {
        basic: (value: MyApi.v2.problem.BasicCustomFiles): CustomFiles.Basic => ({
            ...value,
            type: \\"basic\\"
        }),

        custom: (value: Record<MyApi.commons.Language, MyApi.v2.problem.Files>): CustomFiles.Custom => ({
            custom: value,
            type: \\"custom\\"
        }),

        _visit: <Result>(value: CustomFiles, visitor: CustomFiles._Visitor<Result>): Result => {
            switch (value.type) {
                case \\"basic\\": return visitor.basic(value);
                case \\"custom\\": return visitor.custom(value.custom);
                default: return visitor._unknown();
            }
        },

        _types: (): CustomFiles[\\"type\\"][] => [\\"basic\\", \\"custom\\"],
    } as const;
",
                    "name": "CustomFiles.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

export interface DeepEqualityCorrectnessCheck {
    expectedValueParameterId: MyApi.v2.problem.ParameterId;
}
",
                    "name": "DeepEqualityCorrectnessCheck.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

export interface DefaultProvidedFile {
    file: MyApi.v2.problem.FileInfoV2;
    relatedTypes: MyApi.commons.VariableType[];
}
",
                    "name": "DefaultProvidedFile.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export interface FileInfoV2 {
    filename: string;
    directory: string;
    contents: string;
    editable: boolean;
}
",
                    "name": "FileInfoV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

export interface Files {
    files: MyApi.v2.problem.FileInfoV2[];
}
",
                    "name": "Files.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export interface FunctionImplementation {
    impl: string;
    imports?: string;
}
",
                    "name": "FunctionImplementation.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

export interface FunctionImplementationForMultipleLanguages {
    codeByLanguage: Record<MyApi.commons.Language, MyApi.v2.problem.FunctionImplementation>;
}
",
                    "name": "FunctionImplementationForMultipleLanguages.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

export type FunctionSignature = 
    | FunctionSignature.Void
    | FunctionSignature.NonVoid
    /**
     * Useful when specifying custom grading for a testcase where actualResult is defined. */
    | FunctionSignature.VoidThatTakesActualResult;

export declare namespace FunctionSignature {
    interface Void extends MyApi.v2.problem.VoidFunctionSignature {
        type: \\"void\\";
    }

    interface NonVoid extends MyApi.v2.problem.NonVoidFunctionSignature {
        type: \\"nonVoid\\";
    }

    interface VoidThatTakesActualResult extends MyApi.v2.problem.VoidFunctionSignatureThatTakesActualResult {
        type: \\"voidThatTakesActualResult\\";
    }

    export interface _Visitor<Result> {
        void: (value: MyApi.v2.problem.VoidFunctionSignature) => Result;
        nonVoid: (value: MyApi.v2.problem.NonVoidFunctionSignature) => Result;
        voidThatTakesActualResult: (value: MyApi.v2.problem.VoidFunctionSignatureThatTakesActualResult) => Result;
        _unknown: () => Result;
    }
}

export const FunctionSignature = {
        void: (value: MyApi.v2.problem.VoidFunctionSignature): FunctionSignature.Void => ({
            ...value,
            type: \\"void\\"
        }),

        nonVoid: (value: MyApi.v2.problem.NonVoidFunctionSignature): FunctionSignature.NonVoid => ({
            ...value,
            type: \\"nonVoid\\"
        }),

        voidThatTakesActualResult: (value: MyApi.v2.problem.VoidFunctionSignatureThatTakesActualResult): FunctionSignature.VoidThatTakesActualResult => ({
            ...value,
            type: \\"voidThatTakesActualResult\\"
        }),

        _visit: <Result>(value: FunctionSignature, visitor: FunctionSignature._Visitor<Result>): Result => {
            switch (value.type) {
                case \\"void\\": return visitor.void(value);
                case \\"nonVoid\\": return visitor.nonVoid(value);
                case \\"voidThatTakesActualResult\\": return visitor.voidThatTakesActualResult(value);
                default: return visitor._unknown();
            }
        },

        _types: (): FunctionSignature[\\"type\\"][] => [\\"void\\", \\"nonVoid\\", \\"voidThatTakesActualResult\\"],
    } as const;
",
                    "name": "FunctionSignature.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

export interface GeneratedFiles {
    generatedTestCaseFiles: Record<MyApi.commons.Language, MyApi.v2.problem.Files>;
    generatedTemplateFiles: Record<MyApi.commons.Language, MyApi.v2.problem.Files>;
    other: Record<MyApi.commons.Language, MyApi.v2.problem.Files>;
}
",
                    "name": "GeneratedFiles.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

export interface GetBasicSolutionFileRequest {
    methodName: string;
    signature: MyApi.v2.problem.NonVoidFunctionSignature;
}
",
                    "name": "GetBasicSolutionFileRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

export interface GetBasicSolutionFileResponse {
    solutionFileByLanguage: Record<MyApi.commons.Language, MyApi.v2.problem.FileInfoV2>;
}
",
                    "name": "GetBasicSolutionFileResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

export interface GetFunctionSignatureRequest {
    functionSignature: MyApi.v2.problem.FunctionSignature;
}
",
                    "name": "GetFunctionSignatureRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

export interface GetFunctionSignatureResponse {
    functionByLanguage: Record<MyApi.commons.Language, string>;
}
",
                    "name": "GetFunctionSignatureResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

export interface GetGeneratedTestCaseFileRequest {
    template?: MyApi.v2.problem.TestCaseTemplate;
    testCase: MyApi.v2.problem.TestCaseV2;
}
",
                    "name": "GetGeneratedTestCaseFileRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

export interface GetGeneratedTestCaseTemplateFileRequest {
    template: MyApi.v2.problem.TestCaseTemplate;
}
",
                    "name": "GetGeneratedTestCaseTemplateFileRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

export interface LightweightProblemInfoV2 {
    problemId: MyApi.commons.ProblemId;
    problemName: string;
    problemVersion: number;
    variableTypes: MyApi.commons.VariableType[];
}
",
                    "name": "LightweightProblemInfoV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

export interface NonVoidFunctionDefinition {
    signature: MyApi.v2.problem.NonVoidFunctionSignature;
    code: MyApi.v2.problem.FunctionImplementationForMultipleLanguages;
}
",
                    "name": "NonVoidFunctionDefinition.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

export interface NonVoidFunctionSignature {
    parameters: MyApi.v2.problem.Parameter[];
    returnType: MyApi.commons.VariableType;
}
",
                    "name": "NonVoidFunctionSignature.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

export interface Parameter {
    parameterId: MyApi.v2.problem.ParameterId;
    name: string;
    variableType: MyApi.commons.VariableType;
}
",
                    "name": "Parameter.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type ParameterId = string;
",
                    "name": "ParameterId.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

export interface ProblemInfoV2 {
    problemId: MyApi.commons.ProblemId;
    problemDescription: MyApi.problem.ProblemDescription;
    problemName: string;
    problemVersion: number;
    supportedLanguages: MyApi.commons.Language[];
    customFiles: MyApi.v2.problem.CustomFiles;
    generatedFiles: MyApi.v2.problem.GeneratedFiles;
    customTestCaseTemplates: MyApi.v2.problem.TestCaseTemplate[];
    testcases: MyApi.v2.problem.TestCaseV2[];
    isPublic: boolean;
}
",
                    "name": "ProblemInfoV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export interface TestCaseExpects {
    expectedStdout?: string;
}
",
                    "name": "TestCaseExpects.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

export type TestCaseFunction = 
    | TestCaseFunction.WithActualResult
    | TestCaseFunction.Custom;

export declare namespace TestCaseFunction {
    interface WithActualResult extends MyApi.v2.problem.TestCaseWithActualResultImplementation {
        type: \\"withActualResult\\";
    }

    interface Custom extends MyApi.v2.problem.VoidFunctionDefinition {
        type: \\"custom\\";
    }

    export interface _Visitor<Result> {
        withActualResult: (value: MyApi.v2.problem.TestCaseWithActualResultImplementation) => Result;
        custom: (value: MyApi.v2.problem.VoidFunctionDefinition) => Result;
        _unknown: () => Result;
    }
}

export const TestCaseFunction = {
        withActualResult: (value: MyApi.v2.problem.TestCaseWithActualResultImplementation): TestCaseFunction.WithActualResult => ({
            ...value,
            type: \\"withActualResult\\"
        }),

        custom: (value: MyApi.v2.problem.VoidFunctionDefinition): TestCaseFunction.Custom => ({
            ...value,
            type: \\"custom\\"
        }),

        _visit: <Result>(value: TestCaseFunction, visitor: TestCaseFunction._Visitor<Result>): Result => {
            switch (value.type) {
                case \\"withActualResult\\": return visitor.withActualResult(value);
                case \\"custom\\": return visitor.custom(value);
                default: return visitor._unknown();
            }
        },

        _types: (): TestCaseFunction[\\"type\\"][] => [\\"withActualResult\\", \\"custom\\"],
    } as const;
",
                    "name": "TestCaseFunction.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type TestCaseId = string;
",
                    "name": "TestCaseId.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

export interface TestCaseImplementation {
    description: MyApi.v2.problem.TestCaseImplementationDescription;
    function: MyApi.v2.problem.TestCaseFunction;
}
",
                    "name": "TestCaseImplementation.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

export interface TestCaseImplementationDescription {
    boards: MyApi.v2.problem.TestCaseImplementationDescriptionBoard[];
}
",
                    "name": "TestCaseImplementationDescription.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

export type TestCaseImplementationDescriptionBoard = 
    | TestCaseImplementationDescriptionBoard.Html
    | TestCaseImplementationDescriptionBoard.ParamId;

export declare namespace TestCaseImplementationDescriptionBoard {
    interface Html {
        type: \\"html\\";
        html: string;
    }

    interface ParamId {
        type: \\"paramId\\";
        paramId: MyApi.v2.problem.ParameterId;
    }

    export interface _Visitor<Result> {
        html: (value: string) => Result;
        paramId: (value: MyApi.v2.problem.ParameterId) => Result;
        _unknown: () => Result;
    }
}

export const TestCaseImplementationDescriptionBoard = {
        html: (value: string): TestCaseImplementationDescriptionBoard.Html => ({
            html: value,
            type: \\"html\\"
        }),

        paramId: (value: MyApi.v2.problem.ParameterId): TestCaseImplementationDescriptionBoard.ParamId => ({
            paramId: value,
            type: \\"paramId\\"
        }),

        _visit: <Result>(value: TestCaseImplementationDescriptionBoard, visitor: TestCaseImplementationDescriptionBoard._Visitor<Result>): Result => {
            switch (value.type) {
                case \\"html\\": return visitor.html(value.html);
                case \\"paramId\\": return visitor.paramId(value.paramId);
                default: return visitor._unknown();
            }
        },

        _types: (): TestCaseImplementationDescriptionBoard[\\"type\\"][] => [\\"html\\", \\"paramId\\"],
    } as const;
",
                    "name": "TestCaseImplementationDescriptionBoard.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

export type TestCaseImplementationReference = 
    | TestCaseImplementationReference.TemplateId
    | TestCaseImplementationReference.Implementation;

export declare namespace TestCaseImplementationReference {
    interface TemplateId {
        type: \\"templateId\\";
        templateId: MyApi.v2.problem.TestCaseTemplateId;
    }

    interface Implementation extends MyApi.v2.problem.TestCaseImplementation {
        type: \\"implementation\\";
    }

    export interface _Visitor<Result> {
        templateId: (value: MyApi.v2.problem.TestCaseTemplateId) => Result;
        implementation: (value: MyApi.v2.problem.TestCaseImplementation) => Result;
        _unknown: () => Result;
    }
}

export const TestCaseImplementationReference = {
        templateId: (value: MyApi.v2.problem.TestCaseTemplateId): TestCaseImplementationReference.TemplateId => ({
            templateId: value,
            type: \\"templateId\\"
        }),

        implementation: (value: MyApi.v2.problem.TestCaseImplementation): TestCaseImplementationReference.Implementation => ({
            ...value,
            type: \\"implementation\\"
        }),

        _visit: <Result>(value: TestCaseImplementationReference, visitor: TestCaseImplementationReference._Visitor<Result>): Result => {
            switch (value.type) {
                case \\"templateId\\": return visitor.templateId(value.templateId);
                case \\"implementation\\": return visitor.implementation(value);
                default: return visitor._unknown();
            }
        },

        _types: (): TestCaseImplementationReference[\\"type\\"][] => [\\"templateId\\", \\"implementation\\"],
    } as const;
",
                    "name": "TestCaseImplementationReference.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

export interface TestCaseMetadata {
    id: MyApi.v2.problem.TestCaseId;
    name: string;
    hidden: boolean;
}
",
                    "name": "TestCaseMetadata.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

export interface TestCaseTemplate {
    templateId: MyApi.v2.problem.TestCaseTemplateId;
    name: string;
    implementation: MyApi.v2.problem.TestCaseImplementation;
}
",
                    "name": "TestCaseTemplate.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type TestCaseTemplateId = string;
",
                    "name": "TestCaseTemplateId.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

export interface TestCaseV2 {
    metadata: MyApi.v2.problem.TestCaseMetadata;
    implementation: MyApi.v2.problem.TestCaseImplementationReference;
    arguments: Record<MyApi.v2.problem.ParameterId, MyApi.commons.VariableValue>;
    expects?: MyApi.v2.problem.TestCaseExpects;
}
",
                    "name": "TestCaseV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

export interface TestCaseWithActualResultImplementation {
    getActualResult: MyApi.v2.problem.NonVoidFunctionDefinition;
    assertCorrectnessCheck: MyApi.v2.problem.AssertCorrectnessCheck;
}
",
                    "name": "TestCaseWithActualResultImplementation.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

export interface VoidFunctionDefinition {
    parameters: MyApi.v2.problem.Parameter[];
    code: MyApi.v2.problem.FunctionImplementationForMultipleLanguages;
}
",
                    "name": "VoidFunctionDefinition.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

/**
 * The generated signature will include an additional param, actualResult
 */
export interface VoidFunctionDefinitionThatTakesActualResult {
    additionalParameters: MyApi.v2.problem.Parameter[];
    code: MyApi.v2.problem.FunctionImplementationForMultipleLanguages;
}
",
                    "name": "VoidFunctionDefinitionThatTakesActualResult.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

export interface VoidFunctionSignature {
    parameters: MyApi.v2.problem.Parameter[];
}
",
                    "name": "VoidFunctionSignature.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MyApi } from \\"../../../..\\";

export interface VoidFunctionSignatureThatTakesActualResult {
    parameters: MyApi.v2.problem.Parameter[];
    actualResultType: MyApi.commons.VariableType;
}
",
                    "name": "VoidFunctionSignatureThatTakesActualResult.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./TestCaseTemplateId\\";
export * from \\"./TestCaseId\\";
export * from \\"./ParameterId\\";
export * from \\"./ProblemInfoV2\\";
export * from \\"./LightweightProblemInfoV2\\";
export * from \\"./CreateProblemRequestV2\\";
export * from \\"./TestCaseV2\\";
export * from \\"./TestCaseExpects\\";
export * from \\"./TestCaseImplementationReference\\";
export * from \\"./BasicTestCaseTemplate\\";
export * from \\"./TestCaseTemplate\\";
export * from \\"./TestCaseImplementation\\";
export * from \\"./TestCaseFunction\\";
export * from \\"./TestCaseWithActualResultImplementation\\";
export * from \\"./VoidFunctionDefinition\\";
export * from \\"./Parameter\\";
export * from \\"./NonVoidFunctionDefinition\\";
export * from \\"./VoidFunctionSignature\\";
export * from \\"./NonVoidFunctionSignature\\";
export * from \\"./VoidFunctionSignatureThatTakesActualResult\\";
export * from \\"./AssertCorrectnessCheck\\";
export * from \\"./DeepEqualityCorrectnessCheck\\";
export * from \\"./VoidFunctionDefinitionThatTakesActualResult\\";
export * from \\"./TestCaseImplementationDescription\\";
export * from \\"./TestCaseImplementationDescriptionBoard\\";
export * from \\"./TestCaseMetadata\\";
export * from \\"./FunctionImplementationForMultipleLanguages\\";
export * from \\"./FunctionImplementation\\";
export * from \\"./GeneratedFiles\\";
export * from \\"./CustomFiles\\";
export * from \\"./BasicCustomFiles\\";
export * from \\"./Files\\";
export * from \\"./FileInfoV2\\";
export * from \\"./DefaultProvidedFile\\";
export * from \\"./FunctionSignature\\";
export * from \\"./GetFunctionSignatureRequest\\";
export * from \\"./GetFunctionSignatureResponse\\";
export * from \\"./GetBasicSolutionFileRequest\\";
export * from \\"./GetBasicSolutionFileResponse\\";
export * from \\"./GetGeneratedTestCaseFileRequest\\";
export * from \\"./GetGeneratedTestCaseTemplateFileRequest\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "problem",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "import { BearerToken, BasicAuth } from \\"@fern-typescript/service-utils\\";
import { Client as ProblemInfoServicV2Client } from \\"./problem/client/Client\\";
import urlJoin from \\"url-join\\";

export namespace Wrapper {
    export interface Options {
        _origin: string;
        _token?: BearerToken;
        _credentials?: BasicAuth;
        xApiKey?: string;
    }
}

export class Wrapper {
    constructor(private readonly options: Wrapper.Options) {
    }

    #problem: ProblemInfoServicV2Client | undefined;

    public get problem(): ProblemInfoServicV2Client {
        return (this.#problem ??= new ProblemInfoServicV2Client({
            _basePath: urlJoin(this.options._origin, \\"/problems-v2\\"),
            _token: this.options._token,
            _credentials: this.options._credentials,
            xApiKey: this.options.xApiKey
        }));
    }
}
",
                "name": "Wrapper.ts",
                "type": "file",
              },
              Object {
                "contents": "export * as problem from \\"./problem\\";
export * from \\"./problem/types\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "import { BearerToken, BasicAuth, _NetworkError, _UnknownError, ErrorDetails, _Response, defaultFetcherV2 } from \\"@fern-typescript/service-utils\\";
import { MyApi } from \\"../../../../..\\";
import urlJoin from \\"url-join\\";

export interface Client {
    getLightweightProblems(): Promise<_Response<MyApi.v2.v3.problem.LightweightProblemInfoV2[], MyApi.v2.v3.problem.getLightweightProblems.Error>>;
    getProblems(): Promise<_Response<MyApi.v2.v3.problem.ProblemInfoV2[], MyApi.v2.v3.problem.getProblems.Error>>;
    getLatestProblem(request: MyApi.v2.v3.problem.getLatestProblem.Request): Promise<_Response<MyApi.v2.v3.problem.ProblemInfoV2, MyApi.v2.v3.problem.getLatestProblem.Error>>;
    getProblemVersion(request: MyApi.v2.v3.problem.getProblemVersion.Request): Promise<_Response<MyApi.v2.v3.problem.ProblemInfoV2, MyApi.v2.v3.problem.getProblemVersion.Error>>;
}

export declare namespace Client {
    interface Options {
        _basePath: string;
        _token?: BearerToken;
        _credentials?: BasicAuth;
        xApiKey?: string;
    }
}

export class Client implements Client {
    constructor(private readonly options: Client.Options) {
    }

    public async getLightweightProblems(): Promise<_Response<MyApi.v2.v3.problem.LightweightProblemInfoV2[], MyApi.v2.v3.problem.getLightweightProblems.Error>> {
        const response = await defaultFetcherV2({
                url: urlJoin(this.options._basePath, \\"/lightweight-problem-info\\"),
                method: \\"GET\\",
                headers: {
                    \\"Authorization\\": this.options._token != null ? BearerToken.toAuthorizationHeader(this.options._token) : this.options._credentials != null ? BasicAuth.toAuthorizationHeader(this.options._credentials) : undefined,
                    \\"X-API-Key\\": this.options.xApiKey
                }
            });

        if (response.ok) {
            return {
                ok: true,
                body: response.body as MyApi.v2.v3.problem.LightweightProblemInfoV2[]
            };
        }

        if (response.type === \\"networkError\\") {
            return {
                ok: false,
                error: {
                    body: { _error: \\"_NetworkError\\" },
                    _visit: visitor => visitor._network()
                }
            };
        }

        return {
            ok: false,
            error: {
                body: response.body as _UnknownError,
                _visit: visitor => visitor._unknown({ statusCode: response.statusCode })
            }
        };
    }

    public async getProblems(): Promise<_Response<MyApi.v2.v3.problem.ProblemInfoV2[], MyApi.v2.v3.problem.getProblems.Error>> {
        const response = await defaultFetcherV2({
                url: urlJoin(this.options._basePath, \\"/problem-info\\"),
                method: \\"GET\\",
                headers: {
                    \\"Authorization\\": this.options._token != null ? BearerToken.toAuthorizationHeader(this.options._token) : this.options._credentials != null ? BasicAuth.toAuthorizationHeader(this.options._credentials) : undefined,
                    \\"X-API-Key\\": this.options.xApiKey
                }
            });

        if (response.ok) {
            return {
                ok: true,
                body: response.body as MyApi.v2.v3.problem.ProblemInfoV2[]
            };
        }

        if (response.type === \\"networkError\\") {
            return {
                ok: false,
                error: {
                    body: { _error: \\"_NetworkError\\" },
                    _visit: visitor => visitor._network()
                }
            };
        }

        return {
            ok: false,
            error: {
                body: response.body as _UnknownError,
                _visit: visitor => visitor._unknown({ statusCode: response.statusCode })
            }
        };
    }

    public async getLatestProblem(request: MyApi.v2.v3.problem.getLatestProblem.Request): Promise<_Response<MyApi.v2.v3.problem.ProblemInfoV2, MyApi.v2.v3.problem.getLatestProblem.Error>> {
        const response = await defaultFetcherV2({
                url: urlJoin(this.options._basePath, \`/problem-info/\${request.problemId}\`),
                method: \\"GET\\",
                headers: {
                    \\"Authorization\\": this.options._token != null ? BearerToken.toAuthorizationHeader(this.options._token) : this.options._credentials != null ? BasicAuth.toAuthorizationHeader(this.options._credentials) : undefined,
                    \\"X-API-Key\\": this.options.xApiKey
                }
            });

        if (response.ok) {
            return {
                ok: true,
                body: response.body as MyApi.v2.v3.problem.ProblemInfoV2
            };
        }

        if (response.type === \\"networkError\\") {
            return {
                ok: false,
                error: {
                    body: { _error: \\"_NetworkError\\" },
                    _visit: visitor => visitor._network()
                }
            };
        }

        return {
            ok: false,
            error: {
                body: response.body as _UnknownError,
                _visit: visitor => visitor._unknown({ statusCode: response.statusCode })
            }
        };
    }

    public async getProblemVersion(request: MyApi.v2.v3.problem.getProblemVersion.Request): Promise<_Response<MyApi.v2.v3.problem.ProblemInfoV2, MyApi.v2.v3.problem.getProblemVersion.Error>> {
        const response = await defaultFetcherV2({
                url: urlJoin(this.options._basePath, \`/problem-info/\${request.problemId}/version/\${request.problemVersion}\`),
                method: \\"GET\\",
                headers: {
                    \\"Authorization\\": this.options._token != null ? BearerToken.toAuthorizationHeader(this.options._token) : this.options._credentials != null ? BasicAuth.toAuthorizationHeader(this.options._credentials) : undefined,
                    \\"X-API-Key\\": this.options.xApiKey
                }
            });

        if (response.ok) {
            return {
                ok: true,
                body: response.body as MyApi.v2.v3.problem.ProblemInfoV2
            };
        }

        if (response.type === \\"networkError\\") {
            return {
                ok: false,
                error: {
                    body: { _error: \\"_NetworkError\\" },
                    _visit: visitor => visitor._network()
                }
            };
        }

        return {
            ok: false,
            error: {
                body: response.body as _UnknownError,
                _visit: visitor => visitor._unknown({ statusCode: response.statusCode })
            }
        };
    }
}

export namespace getLightweightProblems {
    export interface Error {
        body: 
            | _NetworkError
            | _UnknownError;
        _visit: <Result>(visitor: MyApi.v2.v3.problem.getLightweightProblems.ErrorVisitor<Result>) => Result;
    }

    export interface ErrorVisitor<Result> {
        _network: () => Result;
        _unknown: (details: ErrorDetails) => Result;
    }
}

export namespace getProblems {
    export interface Error {
        body: 
            | _NetworkError
            | _UnknownError;
        _visit: <Result>(visitor: MyApi.v2.v3.problem.getProblems.ErrorVisitor<Result>) => Result;
    }

    export interface ErrorVisitor<Result> {
        _network: () => Result;
        _unknown: (details: ErrorDetails) => Result;
    }
}

export namespace getLatestProblem {
    export interface Request {
        problemId: MyApi.commons.ProblemId;
    }

    export interface Error {
        body: 
            | _NetworkError
            | _UnknownError;
        _visit: <Result>(visitor: MyApi.v2.v3.problem.getLatestProblem.ErrorVisitor<Result>) => Result;
    }

    export interface ErrorVisitor<Result> {
        _network: () => Result;
        _unknown: (details: ErrorDetails) => Result;
    }
}

export namespace getProblemVersion {
    export interface Request {
        problemId: MyApi.commons.ProblemId;
        problemVersion: number;
    }

    export interface Error {
        body: 
            | _NetworkError
            | _UnknownError;
        _visit: <Result>(visitor: MyApi.v2.v3.problem.getProblemVersion.ErrorVisitor<Result>) => Result;
    }

    export interface ErrorVisitor<Result> {
        _network: () => Result;
        _unknown: (details: ErrorDetails) => Result;
    }
}
",
                        "name": "Client.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { getLightweightProblems, getProblems, getLatestProblem, getProblemVersion } from \\"./Client\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                    ],
                    "name": "client",
                    "type": "directory",
                  },
                  Object {
                    "contents": "export * from \\"./types\\";
export * from \\"./client\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

export type AssertCorrectnessCheck = 
    | AssertCorrectnessCheck.DeepEquality
    | AssertCorrectnessCheck.Custom;

export declare namespace AssertCorrectnessCheck {
    interface DeepEquality extends MyApi.v2.v3.problem.DeepEqualityCorrectnessCheck {
        type: \\"deepEquality\\";
    }

    interface Custom extends MyApi.v2.v3.problem.VoidFunctionDefinitionThatTakesActualResult {
        type: \\"custom\\";
    }

    export interface _Visitor<Result> {
        deepEquality: (value: MyApi.v2.v3.problem.DeepEqualityCorrectnessCheck) => Result;
        custom: (value: MyApi.v2.v3.problem.VoidFunctionDefinitionThatTakesActualResult) => Result;
        _unknown: () => Result;
    }
}

export const AssertCorrectnessCheck = {
        deepEquality: (value: MyApi.v2.v3.problem.DeepEqualityCorrectnessCheck): AssertCorrectnessCheck.DeepEquality => ({
            ...value,
            type: \\"deepEquality\\"
        }),

        custom: (value: MyApi.v2.v3.problem.VoidFunctionDefinitionThatTakesActualResult): AssertCorrectnessCheck.Custom => ({
            ...value,
            type: \\"custom\\"
        }),

        _visit: <Result>(value: AssertCorrectnessCheck, visitor: AssertCorrectnessCheck._Visitor<Result>): Result => {
            switch (value.type) {
                case \\"deepEquality\\": return visitor.deepEquality(value);
                case \\"custom\\": return visitor.custom(value);
                default: return visitor._unknown();
            }
        },

        _types: (): AssertCorrectnessCheck[\\"type\\"][] => [\\"deepEquality\\", \\"custom\\"],
    } as const;
",
                        "name": "AssertCorrectnessCheck.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

export interface BasicCustomFiles {
    methodName: string;
    signature: MyApi.v2.v3.problem.NonVoidFunctionSignature;
    additionalFiles: Record<MyApi.commons.Language, MyApi.v2.v3.problem.Files>;
    basicTestCaseTemplate: MyApi.v2.v3.problem.BasicTestCaseTemplate;
}
",
                        "name": "BasicCustomFiles.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

export interface BasicTestCaseTemplate {
    templateId: MyApi.v2.v3.problem.TestCaseTemplateId;
    name: string;
    description: MyApi.v2.v3.problem.TestCaseImplementationDescription;
    expectedValueParameterId: MyApi.v2.v3.problem.ParameterId;
}
",
                        "name": "BasicTestCaseTemplate.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

export interface CreateProblemRequestV2 {
    problemName: string;
    problemDescription: MyApi.problem.ProblemDescription;
    customFiles: MyApi.v2.v3.problem.CustomFiles;
    customTestCaseTemplates: MyApi.v2.v3.problem.TestCaseTemplate[];
    testcases: MyApi.v2.v3.problem.TestCaseV2[];
    supportedLanguages: MyApi.commons.Language[];
    isPublic: boolean;
}
",
                        "name": "CreateProblemRequestV2.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

export type CustomFiles = 
    | CustomFiles.Basic
    | CustomFiles.Custom;

export declare namespace CustomFiles {
    interface Basic extends MyApi.v2.v3.problem.BasicCustomFiles {
        type: \\"basic\\";
    }

    interface Custom {
        type: \\"custom\\";
        custom: Record<MyApi.commons.Language, MyApi.v2.v3.problem.Files>;
    }

    export interface _Visitor<Result> {
        basic: (value: MyApi.v2.v3.problem.BasicCustomFiles) => Result;
        custom: (value: Record<MyApi.commons.Language, MyApi.v2.v3.problem.Files>) => Result;
        _unknown: () => Result;
    }
}

export const CustomFiles = {
        basic: (value: MyApi.v2.v3.problem.BasicCustomFiles): CustomFiles.Basic => ({
            ...value,
            type: \\"basic\\"
        }),

        custom: (value: Record<MyApi.commons.Language, MyApi.v2.v3.problem.Files>): CustomFiles.Custom => ({
            custom: value,
            type: \\"custom\\"
        }),

        _visit: <Result>(value: CustomFiles, visitor: CustomFiles._Visitor<Result>): Result => {
            switch (value.type) {
                case \\"basic\\": return visitor.basic(value);
                case \\"custom\\": return visitor.custom(value.custom);
                default: return visitor._unknown();
            }
        },

        _types: (): CustomFiles[\\"type\\"][] => [\\"basic\\", \\"custom\\"],
    } as const;
",
                        "name": "CustomFiles.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

export interface DeepEqualityCorrectnessCheck {
    expectedValueParameterId: MyApi.v2.v3.problem.ParameterId;
}
",
                        "name": "DeepEqualityCorrectnessCheck.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

export interface DefaultProvidedFile {
    file: MyApi.v2.v3.problem.FileInfoV2;
    relatedTypes: MyApi.commons.VariableType[];
}
",
                        "name": "DefaultProvidedFile.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export interface FileInfoV2 {
    filename: string;
    directory: string;
    contents: string;
    editable: boolean;
}
",
                        "name": "FileInfoV2.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

export interface Files {
    files: MyApi.v2.v3.problem.FileInfoV2[];
}
",
                        "name": "Files.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export interface FunctionImplementation {
    impl: string;
    imports?: string;
}
",
                        "name": "FunctionImplementation.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

export interface FunctionImplementationForMultipleLanguages {
    codeByLanguage: Record<MyApi.commons.Language, MyApi.v2.v3.problem.FunctionImplementation>;
}
",
                        "name": "FunctionImplementationForMultipleLanguages.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

export type FunctionSignature = 
    | FunctionSignature.Void
    | FunctionSignature.NonVoid
    /**
     * Useful when specifying custom grading for a testcase where actualResult is defined. */
    | FunctionSignature.VoidThatTakesActualResult;

export declare namespace FunctionSignature {
    interface Void extends MyApi.v2.v3.problem.VoidFunctionSignature {
        type: \\"void\\";
    }

    interface NonVoid extends MyApi.v2.v3.problem.NonVoidFunctionSignature {
        type: \\"nonVoid\\";
    }

    interface VoidThatTakesActualResult extends MyApi.v2.v3.problem.VoidFunctionSignatureThatTakesActualResult {
        type: \\"voidThatTakesActualResult\\";
    }

    export interface _Visitor<Result> {
        void: (value: MyApi.v2.v3.problem.VoidFunctionSignature) => Result;
        nonVoid: (value: MyApi.v2.v3.problem.NonVoidFunctionSignature) => Result;
        voidThatTakesActualResult: (value: MyApi.v2.v3.problem.VoidFunctionSignatureThatTakesActualResult) => Result;
        _unknown: () => Result;
    }
}

export const FunctionSignature = {
        void: (value: MyApi.v2.v3.problem.VoidFunctionSignature): FunctionSignature.Void => ({
            ...value,
            type: \\"void\\"
        }),

        nonVoid: (value: MyApi.v2.v3.problem.NonVoidFunctionSignature): FunctionSignature.NonVoid => ({
            ...value,
            type: \\"nonVoid\\"
        }),

        voidThatTakesActualResult: (value: MyApi.v2.v3.problem.VoidFunctionSignatureThatTakesActualResult): FunctionSignature.VoidThatTakesActualResult => ({
            ...value,
            type: \\"voidThatTakesActualResult\\"
        }),

        _visit: <Result>(value: FunctionSignature, visitor: FunctionSignature._Visitor<Result>): Result => {
            switch (value.type) {
                case \\"void\\": return visitor.void(value);
                case \\"nonVoid\\": return visitor.nonVoid(value);
                case \\"voidThatTakesActualResult\\": return visitor.voidThatTakesActualResult(value);
                default: return visitor._unknown();
            }
        },

        _types: (): FunctionSignature[\\"type\\"][] => [\\"void\\", \\"nonVoid\\", \\"voidThatTakesActualResult\\"],
    } as const;
",
                        "name": "FunctionSignature.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

export interface GeneratedFiles {
    generatedTestCaseFiles: Record<MyApi.commons.Language, MyApi.v2.v3.problem.Files>;
    generatedTemplateFiles: Record<MyApi.commons.Language, MyApi.v2.v3.problem.Files>;
    other: Record<MyApi.commons.Language, MyApi.v2.v3.problem.Files>;
}
",
                        "name": "GeneratedFiles.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

export interface GetBasicSolutionFileRequest {
    methodName: string;
    signature: MyApi.v2.v3.problem.NonVoidFunctionSignature;
}
",
                        "name": "GetBasicSolutionFileRequest.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

export interface GetBasicSolutionFileResponse {
    solutionFileByLanguage: Record<MyApi.commons.Language, MyApi.v2.v3.problem.FileInfoV2>;
}
",
                        "name": "GetBasicSolutionFileResponse.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

export interface GetFunctionSignatureRequest {
    functionSignature: MyApi.v2.v3.problem.FunctionSignature;
}
",
                        "name": "GetFunctionSignatureRequest.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

export interface GetFunctionSignatureResponse {
    functionByLanguage: Record<MyApi.commons.Language, string>;
}
",
                        "name": "GetFunctionSignatureResponse.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

export interface GetGeneratedTestCaseFileRequest {
    template?: MyApi.v2.v3.problem.TestCaseTemplate;
    testCase: MyApi.v2.v3.problem.TestCaseV2;
}
",
                        "name": "GetGeneratedTestCaseFileRequest.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

export interface GetGeneratedTestCaseTemplateFileRequest {
    template: MyApi.v2.v3.problem.TestCaseTemplate;
}
",
                        "name": "GetGeneratedTestCaseTemplateFileRequest.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

export interface LightweightProblemInfoV2 {
    problemId: MyApi.commons.ProblemId;
    problemName: string;
    problemVersion: number;
    variableTypes: MyApi.commons.VariableType[];
}
",
                        "name": "LightweightProblemInfoV2.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

export interface NonVoidFunctionDefinition {
    signature: MyApi.v2.v3.problem.NonVoidFunctionSignature;
    code: MyApi.v2.v3.problem.FunctionImplementationForMultipleLanguages;
}
",
                        "name": "NonVoidFunctionDefinition.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

export interface NonVoidFunctionSignature {
    parameters: MyApi.v2.v3.problem.Parameter[];
    returnType: MyApi.commons.VariableType;
}
",
                        "name": "NonVoidFunctionSignature.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

export interface Parameter {
    parameterId: MyApi.v2.v3.problem.ParameterId;
    name: string;
    variableType: MyApi.commons.VariableType;
}
",
                        "name": "Parameter.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export type ParameterId = string;
",
                        "name": "ParameterId.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

export interface ProblemInfoV2 {
    problemId: MyApi.commons.ProblemId;
    problemDescription: MyApi.problem.ProblemDescription;
    problemName: string;
    problemVersion: number;
    supportedLanguages: MyApi.commons.Language[];
    customFiles: MyApi.v2.v3.problem.CustomFiles;
    generatedFiles: MyApi.v2.v3.problem.GeneratedFiles;
    customTestCaseTemplates: MyApi.v2.v3.problem.TestCaseTemplate[];
    testcases: MyApi.v2.v3.problem.TestCaseV2[];
    isPublic: boolean;
}
",
                        "name": "ProblemInfoV2.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export interface TestCaseExpects {
    expectedStdout?: string;
}
",
                        "name": "TestCaseExpects.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

export type TestCaseFunction = 
    | TestCaseFunction.WithActualResult
    | TestCaseFunction.Custom;

export declare namespace TestCaseFunction {
    interface WithActualResult extends MyApi.v2.v3.problem.TestCaseWithActualResultImplementation {
        type: \\"withActualResult\\";
    }

    interface Custom extends MyApi.v2.v3.problem.VoidFunctionDefinition {
        type: \\"custom\\";
    }

    export interface _Visitor<Result> {
        withActualResult: (value: MyApi.v2.v3.problem.TestCaseWithActualResultImplementation) => Result;
        custom: (value: MyApi.v2.v3.problem.VoidFunctionDefinition) => Result;
        _unknown: () => Result;
    }
}

export const TestCaseFunction = {
        withActualResult: (value: MyApi.v2.v3.problem.TestCaseWithActualResultImplementation): TestCaseFunction.WithActualResult => ({
            ...value,
            type: \\"withActualResult\\"
        }),

        custom: (value: MyApi.v2.v3.problem.VoidFunctionDefinition): TestCaseFunction.Custom => ({
            ...value,
            type: \\"custom\\"
        }),

        _visit: <Result>(value: TestCaseFunction, visitor: TestCaseFunction._Visitor<Result>): Result => {
            switch (value.type) {
                case \\"withActualResult\\": return visitor.withActualResult(value);
                case \\"custom\\": return visitor.custom(value);
                default: return visitor._unknown();
            }
        },

        _types: (): TestCaseFunction[\\"type\\"][] => [\\"withActualResult\\", \\"custom\\"],
    } as const;
",
                        "name": "TestCaseFunction.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export type TestCaseId = string;
",
                        "name": "TestCaseId.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

export interface TestCaseImplementation {
    description: MyApi.v2.v3.problem.TestCaseImplementationDescription;
    function: MyApi.v2.v3.problem.TestCaseFunction;
}
",
                        "name": "TestCaseImplementation.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

export interface TestCaseImplementationDescription {
    boards: MyApi.v2.v3.problem.TestCaseImplementationDescriptionBoard[];
}
",
                        "name": "TestCaseImplementationDescription.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

export type TestCaseImplementationDescriptionBoard = 
    | TestCaseImplementationDescriptionBoard.Html
    | TestCaseImplementationDescriptionBoard.ParamId;

export declare namespace TestCaseImplementationDescriptionBoard {
    interface Html {
        type: \\"html\\";
        html: string;
    }

    interface ParamId {
        type: \\"paramId\\";
        paramId: MyApi.v2.v3.problem.ParameterId;
    }

    export interface _Visitor<Result> {
        html: (value: string) => Result;
        paramId: (value: MyApi.v2.v3.problem.ParameterId) => Result;
        _unknown: () => Result;
    }
}

export const TestCaseImplementationDescriptionBoard = {
        html: (value: string): TestCaseImplementationDescriptionBoard.Html => ({
            html: value,
            type: \\"html\\"
        }),

        paramId: (value: MyApi.v2.v3.problem.ParameterId): TestCaseImplementationDescriptionBoard.ParamId => ({
            paramId: value,
            type: \\"paramId\\"
        }),

        _visit: <Result>(value: TestCaseImplementationDescriptionBoard, visitor: TestCaseImplementationDescriptionBoard._Visitor<Result>): Result => {
            switch (value.type) {
                case \\"html\\": return visitor.html(value.html);
                case \\"paramId\\": return visitor.paramId(value.paramId);
                default: return visitor._unknown();
            }
        },

        _types: (): TestCaseImplementationDescriptionBoard[\\"type\\"][] => [\\"html\\", \\"paramId\\"],
    } as const;
",
                        "name": "TestCaseImplementationDescriptionBoard.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

export type TestCaseImplementationReference = 
    | TestCaseImplementationReference.TemplateId
    | TestCaseImplementationReference.Implementation;

export declare namespace TestCaseImplementationReference {
    interface TemplateId {
        type: \\"templateId\\";
        templateId: MyApi.v2.v3.problem.TestCaseTemplateId;
    }

    interface Implementation extends MyApi.v2.v3.problem.TestCaseImplementation {
        type: \\"implementation\\";
    }

    export interface _Visitor<Result> {
        templateId: (value: MyApi.v2.v3.problem.TestCaseTemplateId) => Result;
        implementation: (value: MyApi.v2.v3.problem.TestCaseImplementation) => Result;
        _unknown: () => Result;
    }
}

export const TestCaseImplementationReference = {
        templateId: (value: MyApi.v2.v3.problem.TestCaseTemplateId): TestCaseImplementationReference.TemplateId => ({
            templateId: value,
            type: \\"templateId\\"
        }),

        implementation: (value: MyApi.v2.v3.problem.TestCaseImplementation): TestCaseImplementationReference.Implementation => ({
            ...value,
            type: \\"implementation\\"
        }),

        _visit: <Result>(value: TestCaseImplementationReference, visitor: TestCaseImplementationReference._Visitor<Result>): Result => {
            switch (value.type) {
                case \\"templateId\\": return visitor.templateId(value.templateId);
                case \\"implementation\\": return visitor.implementation(value);
                default: return visitor._unknown();
            }
        },

        _types: (): TestCaseImplementationReference[\\"type\\"][] => [\\"templateId\\", \\"implementation\\"],
    } as const;
",
                        "name": "TestCaseImplementationReference.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

export interface TestCaseMetadata {
    id: MyApi.v2.v3.problem.TestCaseId;
    name: string;
    hidden: boolean;
}
",
                        "name": "TestCaseMetadata.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

export interface TestCaseTemplate {
    templateId: MyApi.v2.v3.problem.TestCaseTemplateId;
    name: string;
    implementation: MyApi.v2.v3.problem.TestCaseImplementation;
}
",
                        "name": "TestCaseTemplate.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export type TestCaseTemplateId = string;
",
                        "name": "TestCaseTemplateId.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

export interface TestCaseV2 {
    metadata: MyApi.v2.v3.problem.TestCaseMetadata;
    implementation: MyApi.v2.v3.problem.TestCaseImplementationReference;
    arguments: Record<MyApi.v2.v3.problem.ParameterId, MyApi.commons.VariableValue>;
    expects?: MyApi.v2.v3.problem.TestCaseExpects;
}
",
                        "name": "TestCaseV2.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

export interface TestCaseWithActualResultImplementation {
    getActualResult: MyApi.v2.v3.problem.NonVoidFunctionDefinition;
    assertCorrectnessCheck: MyApi.v2.v3.problem.AssertCorrectnessCheck;
}
",
                        "name": "TestCaseWithActualResultImplementation.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

export interface VoidFunctionDefinition {
    parameters: MyApi.v2.v3.problem.Parameter[];
    code: MyApi.v2.v3.problem.FunctionImplementationForMultipleLanguages;
}
",
                        "name": "VoidFunctionDefinition.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

/**
 * The generated signature will include an additional param, actualResult
 */
export interface VoidFunctionDefinitionThatTakesActualResult {
    additionalParameters: MyApi.v2.v3.problem.Parameter[];
    code: MyApi.v2.v3.problem.FunctionImplementationForMultipleLanguages;
}
",
                        "name": "VoidFunctionDefinitionThatTakesActualResult.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

export interface VoidFunctionSignature {
    parameters: MyApi.v2.v3.problem.Parameter[];
}
",
                        "name": "VoidFunctionSignature.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MyApi } from \\"../../../../..\\";

export interface VoidFunctionSignatureThatTakesActualResult {
    parameters: MyApi.v2.v3.problem.Parameter[];
    actualResultType: MyApi.commons.VariableType;
}
",
                        "name": "VoidFunctionSignatureThatTakesActualResult.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export * from \\"./TestCaseTemplateId\\";
export * from \\"./TestCaseId\\";
export * from \\"./ParameterId\\";
export * from \\"./ProblemInfoV2\\";
export * from \\"./LightweightProblemInfoV2\\";
export * from \\"./CreateProblemRequestV2\\";
export * from \\"./TestCaseV2\\";
export * from \\"./TestCaseExpects\\";
export * from \\"./TestCaseImplementationReference\\";
export * from \\"./BasicTestCaseTemplate\\";
export * from \\"./TestCaseTemplate\\";
export * from \\"./TestCaseImplementation\\";
export * from \\"./TestCaseFunction\\";
export * from \\"./TestCaseWithActualResultImplementation\\";
export * from \\"./VoidFunctionDefinition\\";
export * from \\"./Parameter\\";
export * from \\"./NonVoidFunctionDefinition\\";
export * from \\"./VoidFunctionSignature\\";
export * from \\"./NonVoidFunctionSignature\\";
export * from \\"./VoidFunctionSignatureThatTakesActualResult\\";
export * from \\"./AssertCorrectnessCheck\\";
export * from \\"./DeepEqualityCorrectnessCheck\\";
export * from \\"./VoidFunctionDefinitionThatTakesActualResult\\";
export * from \\"./TestCaseImplementationDescription\\";
export * from \\"./TestCaseImplementationDescriptionBoard\\";
export * from \\"./TestCaseMetadata\\";
export * from \\"./FunctionImplementationForMultipleLanguages\\";
export * from \\"./FunctionImplementation\\";
export * from \\"./GeneratedFiles\\";
export * from \\"./CustomFiles\\";
export * from \\"./BasicCustomFiles\\";
export * from \\"./Files\\";
export * from \\"./FileInfoV2\\";
export * from \\"./DefaultProvidedFile\\";
export * from \\"./FunctionSignature\\";
export * from \\"./GetFunctionSignatureRequest\\";
export * from \\"./GetFunctionSignatureResponse\\";
export * from \\"./GetBasicSolutionFileRequest\\";
export * from \\"./GetBasicSolutionFileResponse\\";
export * from \\"./GetGeneratedTestCaseFileRequest\\";
export * from \\"./GetGeneratedTestCaseTemplateFileRequest\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                    ],
                    "name": "types",
                    "type": "directory",
                  },
                ],
                "name": "problem",
                "type": "directory",
              },
            ],
            "name": "v3",
            "type": "directory",
          },
        ],
        "name": "v2",
        "type": "directory",
      },
    ],
    "name": "api",
    "type": "directory",
  },
  Object {
    "contents": "export * as MyApi from \\"./api\\";
",
    "name": "index.ts",
    "type": "file",
  },
  Object {
    "contents": "{
    \\"name\\": \\"@fern-api/my-api-client\\",
    \\"main\\": \\"./index.js\\",
    \\"types\\": \\"./index.d.ts\\",
    \\"scripts\\": {
        \\"build\\": \\"esbuild $(find . -name '*.ts' -not -path './node_modules/*') --format=cjs --sourcemap --outdir=. && tsc\\"
    },
    \\"dependencies\\": {
        \\"@fern-typescript/service-utils\\": \\"0.0.0\\",
        \\"url-join\\": \\"4.0.1\\",
        \\"@types/url-join\\": \\"4.0.1\\"
    },
    \\"devDependencies\\": {
        \\"@types/node\\": \\"17.0.33\\",
        \\"esbuild\\": \\"0.14.47\\",
        \\"typescript\\": \\"4.6.4\\"
    }
}",
    "name": "package.json",
    "type": "file",
  },
  Object {
    "contents": "{
    \\"compilerOptions\\": {
        \\"strict\\": true,
        \\"target\\": \\"esnext\\",
        \\"moduleResolution\\": \\"node\\",
        \\"skipLibCheck\\": true,
        \\"declaration\\": true,
        \\"sourceMap\\": true,
        \\"emitDeclarationOnly\\": true,
        \\"esModuleInterop\\": true,
        \\"noUncheckedIndexedAccess\\": true,
        \\"noUnusedLocals\\": true,
        \\"noUnusedParameters\\": true
    }
}",
    "name": "tsconfig.json",
    "type": "file",
  },
]
`;
