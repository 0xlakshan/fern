import { AbsoluteFilePath } from "@fern-api/fs-utils";
import { IntermediateRepresentation } from "@fern-fern/ir-model/ir";
import {
    convertExportedFilePathToFilePath,
    CoreUtilitiesManager,
    DependencyManager,
    ExportedDirectory,
    ExportedFilePath,
    ExportsManager,
    ImportsManager,
    NpmPackage,
    writeProjectToVolume,
} from "@fern-typescript/commons";
import { GeneratorContext } from "@fern-typescript/contexts";
import { EndpointErrorUnionGenerator } from "@fern-typescript/endpoint-error-union-generator";
import { EndpointTypeSchemasGenerator } from "@fern-typescript/endpoint-type-schemas-generator";
import { EnvironmentsGenerator } from "@fern-typescript/environments-generator";
import { SdkErrorSchemaGenerator } from "@fern-typescript/error-schema-generator";
import { GenericAPISdkErrorGenerator, TimeoutSdkErrorGenerator } from "@fern-typescript/generic-error-generators";
import { InlinedRequestBodySchemaGenerator } from "@fern-typescript/inlined-request-schema-generator";
import { RequestWrapperGenerator } from "@fern-typescript/request-wrapper-generator";
import { ErrorResolver, ServiceResolver, TypeResolver } from "@fern-typescript/resolvers";
import { SdkClientClassGenerator } from "@fern-typescript/sdk-client-class-generator";
import { SdkErrorGenerator } from "@fern-typescript/sdk-error-generator";
import { TypeGenerator } from "@fern-typescript/type-generator";
import { TypeReferenceExampleGenerator } from "@fern-typescript/type-reference-example-generator";
import { TypeSchemaGenerator } from "@fern-typescript/type-schema-generator";
import { Volume } from "memfs/lib/volume";
import { Directory, Project, SourceFile } from "ts-morph";
import { EndpointErrorUnionContextImpl } from "./contexts/EndpointErrorUnionContextImpl";
import { EndpointTypeSchemasContextImpl } from "./contexts/EndpointTypeSchemasContextImpl";
import { EnvironmentsContextImpl } from "./contexts/EnvironmentsContextImpl";
import { GenericAPISdkErrorContextImpl } from "./contexts/GenericAPISdkErrorContextImpl";
import { InlinedRequestBodySchemaContextImpl } from "./contexts/InlinedRequestBodySchemaContextImpl";
import { RequestWrapperContextImpl } from "./contexts/RequestWrapperContextImpl";
import { SdkClientClassContextImpl } from "./contexts/SdkClientClassContextImpl";
import { SdkErrorContextImpl } from "./contexts/SdkErrorContextImpl";
import { SdkErrorSchemaContextImpl } from "./contexts/SdkErrorSchemaContextImpl";
import { TimeoutSdkErrorContextImpl } from "./contexts/TimeoutSdkErrorContextImpl";
import { TypeContextImpl } from "./contexts/TypeContextImpl";
import { TypeSchemaContextImpl } from "./contexts/TypeSchemaContextImpl";
import { EndpointDeclarationReferencer } from "./declaration-referencers/EndpointDeclarationReferencer";
import { EnvironmentsDeclarationReferencer } from "./declaration-referencers/EnvironmentsDeclarationReferencer";
import { GenericAPISdkErrorDeclarationReferencer } from "./declaration-referencers/GenericAPISdkErrorDeclarationReferencer";
import { InlinedRequestBodySchemaDeclarationReferencer } from "./declaration-referencers/InlinedRequestBodySchemaDeclarationReferencer";
import { RequestWrapperDeclarationReferencer } from "./declaration-referencers/RequestWrapperDeclarationReferencer";
import { SdkClientClassDeclarationReferencer } from "./declaration-referencers/SdkClientClassDeclarationReferencer";
import { SdkErrorDeclarationReferencer } from "./declaration-referencers/SdkErrorDeclarationReferencer";
import { TimeoutSdkErrorDeclarationReferencer } from "./declaration-referencers/TimeoutSdkErrorDeclarationReferencer";
import { TypeDeclarationReferencer } from "./declaration-referencers/TypeDeclarationReferencer";
import { generateTypeScriptProject } from "./generate-ts-project/generateTypeScriptProject";

const FILE_HEADER = `/**
 * This file was auto-generated by Fern from our API Definition.
 */
`;

export declare namespace SdkGenerator {
    export interface Init {
        apiName: string;
        intermediateRepresentation: IntermediateRepresentation;
        context: GeneratorContext;
        volume: Volume;
        npmPackage: NpmPackage | undefined;
        config: Config;
    }

    export interface Config {
        shouldUseBrandedStringAliases: boolean;
        isPackagePrivate: boolean;
        neverThrowErrors: boolean;
    }
}

export class SdkGenerator {
    private context: GeneratorContext;
    private intermediateRepresentation: IntermediateRepresentation;
    private config: SdkGenerator.Config;

    private rootDirectory: Directory;
    private exportsManager: ExportsManager;
    private dependencyManager = new DependencyManager();
    private coreUtilitiesManager: CoreUtilitiesManager;
    private typeResolver: TypeResolver;
    private errorResolver: ErrorResolver;
    private serviceResolver: ServiceResolver;

    private typeDeclarationReferencer: TypeDeclarationReferencer;
    private typeSchemaDeclarationReferencer: TypeDeclarationReferencer;
    private errorDeclarationReferencer: SdkErrorDeclarationReferencer;
    private sdkErrorSchemaDeclarationReferencer: SdkErrorDeclarationReferencer;
    private sdkClientClassDeclarationReferencer: SdkClientClassDeclarationReferencer;
    private endpointDeclarationReferencer: EndpointDeclarationReferencer;
    private requestWrapperDeclarationReferencer: RequestWrapperDeclarationReferencer;
    private inlinedRequestBodySchemaDeclarationReferencer: InlinedRequestBodySchemaDeclarationReferencer;
    private endpointSchemaDeclarationReferencer: EndpointDeclarationReferencer;
    private environmentsDeclarationReferencer: EnvironmentsDeclarationReferencer;
    private genericAPISdkErrorDeclarationReferencer: GenericAPISdkErrorDeclarationReferencer;
    private timeoutSdkErrorDeclarationReferencer: TimeoutSdkErrorDeclarationReferencer;

    private typeGenerator: TypeGenerator;
    private typeSchemaGenerator: TypeSchemaGenerator;
    private typeReferenceExampleGenerator: TypeReferenceExampleGenerator;
    private sdkErrorGenerator: SdkErrorGenerator;
    private sdkErrorSchemaGenerator: SdkErrorSchemaGenerator;
    private endpointErrorUnionGenerator: EndpointErrorUnionGenerator;
    private requestWrapperGenerator: RequestWrapperGenerator;
    private inlinedRequestBodySchemaGenerator: InlinedRequestBodySchemaGenerator;
    private endpointTypeSchemasGenerator: EndpointTypeSchemasGenerator;
    private environmentsGenerator: EnvironmentsGenerator;
    private SdkClientClassGenerator: SdkClientClassGenerator;
    private genericAPISdkErrorGenerator: GenericAPISdkErrorGenerator;
    private timeoutSdkErrorGenerator: TimeoutSdkErrorGenerator;

    private finish: () => Promise<void>;

    constructor({ apiName, intermediateRepresentation, context, volume, npmPackage, config }: SdkGenerator.Init) {
        this.context = context;
        this.intermediateRepresentation = intermediateRepresentation;
        this.config = config;

        const aliasOfRoot = npmPackage?.packageName;

        this.exportsManager = new ExportsManager({ aliasOfRoot });
        this.coreUtilitiesManager = new CoreUtilitiesManager({ apiName, aliasOfRoot });

        const project = new Project({
            useInMemoryFileSystem: true,
        });
        this.rootDirectory = project.createDirectory("/");
        this.typeResolver = new TypeResolver(intermediateRepresentation);
        this.errorResolver = new ErrorResolver(intermediateRepresentation);
        this.serviceResolver = new ServiceResolver(intermediateRepresentation);

        const apiDirectory: ExportedDirectory[] = [
            {
                nameOnDisk: "api",
                exportDeclaration: { namespaceExport: apiName },
            },
        ];

        const schemaDirectory: ExportedDirectory[] = [
            {
                nameOnDisk: "serialization",
            },
        ];

        this.typeDeclarationReferencer = new TypeDeclarationReferencer({
            containingDirectory: apiDirectory,
            aliasOfRoot,
            apiName,
        });
        this.typeSchemaDeclarationReferencer = new TypeDeclarationReferencer({
            containingDirectory: schemaDirectory,
            aliasOfRoot,
            apiName,
        });
        this.errorDeclarationReferencer = new SdkErrorDeclarationReferencer({
            containingDirectory: apiDirectory,
            aliasOfRoot,
            apiName,
        });
        this.sdkErrorSchemaDeclarationReferencer = new SdkErrorDeclarationReferencer({
            containingDirectory: schemaDirectory,
            aliasOfRoot,
            apiName,
        });
        this.sdkClientClassDeclarationReferencer = new SdkClientClassDeclarationReferencer({
            apiName,
            containingDirectory: apiDirectory,
            aliasOfRoot,
        });
        this.endpointDeclarationReferencer = new EndpointDeclarationReferencer({
            containingDirectory: apiDirectory,
            aliasOfRoot,
            apiName,
        });
        this.requestWrapperDeclarationReferencer = new RequestWrapperDeclarationReferencer({
            containingDirectory: apiDirectory,
            aliasOfRoot,
            apiName,
        });
        this.inlinedRequestBodySchemaDeclarationReferencer = new InlinedRequestBodySchemaDeclarationReferencer({
            containingDirectory: schemaDirectory,
            aliasOfRoot,
            apiName,
        });
        this.endpointSchemaDeclarationReferencer = new EndpointDeclarationReferencer({
            containingDirectory: schemaDirectory,
            aliasOfRoot,
            apiName,
        });
        this.environmentsDeclarationReferencer = new EnvironmentsDeclarationReferencer({
            containingDirectory: [],
            aliasOfRoot,
            apiName,
            environmentsConfig: intermediateRepresentation.environments ?? undefined,
        });
        this.genericAPISdkErrorDeclarationReferencer = new GenericAPISdkErrorDeclarationReferencer({
            containingDirectory: [],
            aliasOfRoot,
            apiName,
        });
        this.timeoutSdkErrorDeclarationReferencer = new TimeoutSdkErrorDeclarationReferencer({
            containingDirectory: [],
            aliasOfRoot,
            apiName,
        });

        this.typeGenerator = new TypeGenerator({ useBrandedStringAliases: config.shouldUseBrandedStringAliases });
        this.typeSchemaGenerator = new TypeSchemaGenerator();
        this.typeReferenceExampleGenerator = new TypeReferenceExampleGenerator();
        this.sdkErrorGenerator = new SdkErrorGenerator({
            useBrandedStringAliases: config.shouldUseBrandedStringAliases,
            neverThrowErrors: config.neverThrowErrors,
        });
        this.sdkErrorSchemaGenerator = new SdkErrorSchemaGenerator({
            sdkErrorGenerator: this.sdkErrorGenerator,
        });
        this.endpointErrorUnionGenerator = new EndpointErrorUnionGenerator({
            errorResolver: this.errorResolver,
            intermediateRepresentation,
        });
        this.endpointTypeSchemasGenerator = new EndpointTypeSchemasGenerator({
            errorResolver: this.errorResolver,
            intermediateRepresentation,
            shouldGenerateErrors: config.neverThrowErrors,
        });
        this.requestWrapperGenerator = new RequestWrapperGenerator();
        this.environmentsGenerator = new EnvironmentsGenerator();
        this.SdkClientClassGenerator = new SdkClientClassGenerator({
            intermediateRepresentation: this.intermediateRepresentation,
            errorResolver: this.errorResolver,
            neverThrowErrors: config.neverThrowErrors,
        });
        this.genericAPISdkErrorGenerator = new GenericAPISdkErrorGenerator();
        this.timeoutSdkErrorGenerator = new TimeoutSdkErrorGenerator();
        this.inlinedRequestBodySchemaGenerator = new InlinedRequestBodySchemaGenerator();

        this.finish = async () => {
            if (npmPackage != null) {
                await generateTypeScriptProject({
                    volume,
                    npmPackage,
                    project,
                    dependencies: this.dependencyManager.getDependencies(),
                });
            } else {
                await writeProjectToVolume(project, volume, "/");
            }
        };
    }

    public async generate(): Promise<void> {
        this.generateTypeDeclarations();
        this.generateTypeSchemas();
        this.generateErrorDeclarations();
        this.generateSdkErrorSchemas();
        this.generateServiceDeclarations();
        this.generateEnvironments();
        this.generateRequestWrappers();
        if (this.config.neverThrowErrors) {
            this.generateEndpointErrorUnion();
        }
        this.generateEndpointTypeSchemas();
        this.generateInlinedRequestBodySchemas();

        if (!this.config.neverThrowErrors) {
            this.generateGenericAPISdkError();
            this.generateTimeoutSdkError();
        }

        this.coreUtilitiesManager.finalize(this.exportsManager, this.dependencyManager);
        this.exportsManager.writeExportsToProject(this.rootDirectory);
        await this.finish();
    }

    public async copyCoreUtilities({ pathToSrc }: { pathToSrc: AbsoluteFilePath }): Promise<void> {
        await this.coreUtilitiesManager.copyCoreUtilities({ pathToSrc });
    }

    private generateTypeDeclarations() {
        for (const typeDeclaration of this.intermediateRepresentation.types) {
            this.withSourceFile({
                filepath: this.typeDeclarationReferencer.getExportedFilepath(typeDeclaration.name),
                run: ({ sourceFile, importsManager }) => {
                    const typeContext = new TypeContextImpl({
                        sourceFile,
                        coreUtilitiesManager: this.coreUtilitiesManager,
                        dependencyManager: this.dependencyManager,
                        fernConstants: this.intermediateRepresentation.constants,
                        importsManager,
                        typeResolver: this.typeResolver,
                        typeDeclarationReferencer: this.typeDeclarationReferencer,
                        typeGenerator: this.typeGenerator,
                        typeReferenceExampleGenerator: this.typeReferenceExampleGenerator,
                    });
                    typeContext.type.getGeneratedType(typeDeclaration.name).writeToFile(typeContext);
                },
            });
        }
    }

    private generateTypeSchemas() {
        for (const typeDeclaration of this.intermediateRepresentation.types) {
            this.withSourceFile({
                filepath: this.typeSchemaDeclarationReferencer.getExportedFilepath(typeDeclaration.name),
                run: ({ sourceFile, importsManager }) => {
                    const typeSchemaContext = new TypeSchemaContextImpl({
                        sourceFile,
                        coreUtilitiesManager: this.coreUtilitiesManager,
                        dependencyManager: this.dependencyManager,
                        fernConstants: this.intermediateRepresentation.constants,
                        importsManager,
                        typeResolver: this.typeResolver,
                        typeDeclarationReferencer: this.typeDeclarationReferencer,
                        typeSchemaDeclarationReferencer: this.typeSchemaDeclarationReferencer,
                        typeGenerator: this.typeGenerator,
                        typeSchemaGenerator: this.typeSchemaGenerator,
                        typeReferenceExampleGenerator: this.typeReferenceExampleGenerator,
                    });
                    typeSchemaContext.typeSchema
                        .getGeneratedTypeSchema(typeDeclaration.name)
                        .writeToFile(typeSchemaContext);
                },
            });
        }
    }

    private generateErrorDeclarations() {
        for (const errorDeclaration of this.intermediateRepresentation.errors) {
            this.withSourceFile({
                filepath: this.errorDeclarationReferencer.getExportedFilepath(errorDeclaration.name),
                run: ({ sourceFile, importsManager }) => {
                    const errorContext = new SdkErrorContextImpl({
                        sourceFile,
                        coreUtilitiesManager: this.coreUtilitiesManager,
                        dependencyManager: this.dependencyManager,
                        fernConstants: this.intermediateRepresentation.constants,
                        importsManager,
                        typeResolver: this.typeResolver,
                        typeDeclarationReferencer: this.typeDeclarationReferencer,
                        typeGenerator: this.typeGenerator,
                        typeReferenceExampleGenerator: this.typeReferenceExampleGenerator,
                        errorDeclarationReferencer: this.errorDeclarationReferencer,
                        sdkErrorGenerator: this.sdkErrorGenerator,
                        errorResolver: this.errorResolver,
                    });
                    errorContext.error.getGeneratedSdkError(errorDeclaration.name)?.writeToFile(errorContext);
                },
            });
        }
    }

    private generateSdkErrorSchemas() {
        for (const errorDeclaration of this.intermediateRepresentation.errors) {
            this.withSourceFile({
                filepath: this.sdkErrorSchemaDeclarationReferencer.getExportedFilepath(errorDeclaration.name),
                run: ({ sourceFile, importsManager }) => {
                    const sdkErrorSchemaContext = new SdkErrorSchemaContextImpl({
                        sourceFile,
                        coreUtilitiesManager: this.coreUtilitiesManager,
                        dependencyManager: this.dependencyManager,
                        fernConstants: this.intermediateRepresentation.constants,
                        importsManager,
                        typeResolver: this.typeResolver,
                        typeDeclarationReferencer: this.typeDeclarationReferencer,
                        typeSchemaDeclarationReferencer: this.typeSchemaDeclarationReferencer,
                        typeReferenceExampleGenerator: this.typeReferenceExampleGenerator,
                        errorDeclarationReferencer: this.errorDeclarationReferencer,
                        sdkErrorGenerator: this.sdkErrorGenerator,
                        errorResolver: this.errorResolver,
                        typeGenerator: this.typeGenerator,
                        typeSchemaGenerator: this.typeSchemaGenerator,
                        sdkErrorSchemaDeclarationReferencer: this.sdkErrorSchemaDeclarationReferencer,
                        sdkErrorSchemaGenerator: this.sdkErrorSchemaGenerator,
                    });
                    sdkErrorSchemaContext.sdkErrorSchema
                        .getGeneratedSdkErrorSchema(errorDeclaration.name)
                        ?.writeToFile(sdkErrorSchemaContext);
                },
            });
        }
    }

    private generateEndpointErrorUnion() {
        for (const service of this.intermediateRepresentation.services) {
            for (const endpoint of service.endpoints) {
                this.withSourceFile({
                    filepath: this.endpointDeclarationReferencer.getExportedFilepath({
                        service: service.name.fernFilepath,
                        endpoint,
                    }),
                    run: ({ sourceFile, importsManager }) => {
                        const endpointErrorUnionContext = new EndpointErrorUnionContextImpl({
                            sourceFile,
                            coreUtilitiesManager: this.coreUtilitiesManager,
                            dependencyManager: this.dependencyManager,
                            fernConstants: this.intermediateRepresentation.constants,
                            importsManager,
                            typeResolver: this.typeResolver,
                            typeDeclarationReferencer: this.typeDeclarationReferencer,
                            typeReferenceExampleGenerator: this.typeReferenceExampleGenerator,
                            errorDeclarationReferencer: this.errorDeclarationReferencer,
                            endpointDeclarationReferencer: this.endpointDeclarationReferencer,
                            sdkErrorGenerator: this.sdkErrorGenerator,
                            errorResolver: this.errorResolver,
                            typeGenerator: this.typeGenerator,
                            serviceResolver: this.serviceResolver,
                            endpointErrorUnionGenerator: this.endpointErrorUnionGenerator,
                        });
                        endpointErrorUnionContext.endpointErrorUnion
                            .getGeneratedEndpointErrorUnion(service.name.fernFilepath, endpoint.name)
                            .writeToFile(endpointErrorUnionContext);
                    },
                });
            }
        }
    }

    private generateEndpointTypeSchemas() {
        for (const service of this.intermediateRepresentation.services) {
            for (const endpoint of service.endpoints) {
                this.withSourceFile({
                    filepath: this.endpointSchemaDeclarationReferencer.getExportedFilepath({
                        service: service.name.fernFilepath,
                        endpoint,
                    }),
                    run: ({ sourceFile, importsManager }) => {
                        const endpointTypeSchemasContext = new EndpointTypeSchemasContextImpl({
                            sourceFile,
                            coreUtilitiesManager: this.coreUtilitiesManager,
                            dependencyManager: this.dependencyManager,
                            fernConstants: this.intermediateRepresentation.constants,
                            importsManager,
                            typeResolver: this.typeResolver,
                            typeDeclarationReferencer: this.typeDeclarationReferencer,
                            typeSchemaDeclarationReferencer: this.typeSchemaDeclarationReferencer,
                            typeReferenceExampleGenerator: this.typeReferenceExampleGenerator,
                            errorDeclarationReferencer: this.errorDeclarationReferencer,
                            sdkErrorSchemaDeclarationReferencer: this.sdkErrorSchemaDeclarationReferencer,
                            endpointSchemaDeclarationReferencer: this.endpointSchemaDeclarationReferencer,
                            endpointDeclarationReferencer: this.endpointDeclarationReferencer,
                            endpointErrorUnionGenerator: this.endpointErrorUnionGenerator,
                            requestWrapperDeclarationReferencer: this.requestWrapperDeclarationReferencer,
                            requestWrapperGenerator: this.requestWrapperGenerator,
                            typeGenerator: this.typeGenerator,
                            sdkErrorGenerator: this.sdkErrorGenerator,
                            errorResolver: this.errorResolver,
                            serviceResolver: this.serviceResolver,
                            endpointTypeSchemasGenerator: this.endpointTypeSchemasGenerator,
                            typeSchemaGenerator: this.typeSchemaGenerator,
                            sdkErrorSchemaGenerator: this.sdkErrorSchemaGenerator,
                        });
                        endpointTypeSchemasContext.endpointTypeSchemas
                            .getGeneratedEndpointTypeSchemas(service.name.fernFilepath, endpoint.name)
                            .writeToFile(endpointTypeSchemasContext);
                    },
                });
            }
        }
    }

    private generateRequestWrappers() {
        for (const service of this.intermediateRepresentation.services) {
            for (const endpoint of service.endpoints) {
                if (endpoint.sdkRequest?.shape.type === "wrapper") {
                    this.withSourceFile({
                        filepath: this.requestWrapperDeclarationReferencer.getExportedFilepath({
                            service: service.name.fernFilepath,
                            endpoint,
                        }),
                        run: ({ sourceFile, importsManager }) => {
                            const context = new RequestWrapperContextImpl({
                                sourceFile,
                                coreUtilitiesManager: this.coreUtilitiesManager,
                                dependencyManager: this.dependencyManager,
                                fernConstants: this.intermediateRepresentation.constants,
                                importsManager,
                                typeResolver: this.typeResolver,
                                typeDeclarationReferencer: this.typeDeclarationReferencer,
                                typeReferenceExampleGenerator: this.typeReferenceExampleGenerator,
                                typeGenerator: this.typeGenerator,
                                errorDeclarationReferencer: this.errorDeclarationReferencer,
                                sdkErrorGenerator: this.sdkErrorGenerator,
                                errorResolver: this.errorResolver,
                                serviceResolver: this.serviceResolver,
                                endpointDeclarationReferencer: this.endpointDeclarationReferencer,
                                endpointErrorUnionGenerator: this.endpointErrorUnionGenerator,
                                requestWrapperDeclarationReferencer: this.requestWrapperDeclarationReferencer,
                                requestWrapperGenerator: this.requestWrapperGenerator,
                            });
                            context.requestWrapper
                                .getGeneratedRequestWrapper(service.name.fernFilepath, endpoint.name)
                                .writeToFile(context);
                        },
                    });
                }
            }
        }
    }

    private generateInlinedRequestBodySchemas() {
        for (const service of this.intermediateRepresentation.services) {
            for (const endpoint of service.endpoints) {
                if (endpoint.requestBody?.type === "inlinedRequestBody") {
                    this.withSourceFile({
                        filepath: this.inlinedRequestBodySchemaDeclarationReferencer.getExportedFilepath({
                            service: service.name.fernFilepath,
                            endpoint,
                        }),
                        run: ({ sourceFile, importsManager }) => {
                            const context = new InlinedRequestBodySchemaContextImpl({
                                sourceFile,
                                coreUtilitiesManager: this.coreUtilitiesManager,
                                dependencyManager: this.dependencyManager,
                                fernConstants: this.intermediateRepresentation.constants,
                                importsManager,
                                typeResolver: this.typeResolver,
                                typeDeclarationReferencer: this.typeDeclarationReferencer,
                                typeReferenceExampleGenerator: this.typeReferenceExampleGenerator,
                                typeGenerator: this.typeGenerator,
                                serviceResolver: this.serviceResolver,
                                requestWrapperDeclarationReferencer: this.requestWrapperDeclarationReferencer,
                                requestWrapperGenerator: this.requestWrapperGenerator,
                                inlinedRequestBodySchemaGenerator: this.inlinedRequestBodySchemaGenerator,
                                inlinedRequestBodySchemaDeclarationReferencer:
                                    this.inlinedRequestBodySchemaDeclarationReferencer,
                                typeSchemaGenerator: this.typeSchemaGenerator,
                                typeSchemaDeclarationReferencer: this.typeSchemaDeclarationReferencer,
                            });
                            context.inlinedRequestBodySchema
                                .getGeneratedInlinedRequestBodySchema(service.name.fernFilepath, endpoint.name)
                                .writeToFile(context);
                        },
                    });
                }
            }
        }
    }

    private generateServiceDeclarations() {
        const services = this.serviceResolver.getAllAugmentedServices();
        for (const service of services) {
            this.withSourceFile({
                filepath: this.sdkClientClassDeclarationReferencer.getExportedFilepath(service.fernFilepath),
                run: ({ sourceFile, importsManager }) => {
                    const sdkClientClassContext = new SdkClientClassContextImpl({
                        intermediateRepresentation: this.intermediateRepresentation,
                        sourceFile,
                        coreUtilitiesManager: this.coreUtilitiesManager,
                        dependencyManager: this.dependencyManager,
                        fernConstants: this.intermediateRepresentation.constants,
                        importsManager,
                        typeResolver: this.typeResolver,
                        typeDeclarationReferencer: this.typeDeclarationReferencer,
                        typeSchemaDeclarationReferencer: this.typeSchemaDeclarationReferencer,
                        typeReferenceExampleGenerator: this.typeReferenceExampleGenerator,
                        errorDeclarationReferencer: this.errorDeclarationReferencer,
                        sdkErrorSchemaDeclarationReferencer: this.sdkErrorSchemaDeclarationReferencer,
                        endpointDeclarationReferencer: this.endpointDeclarationReferencer,
                        endpointSchemaDeclarationReferencer: this.endpointSchemaDeclarationReferencer,
                        endpointErrorUnionGenerator: this.endpointErrorUnionGenerator,
                        requestWrapperDeclarationReferencer: this.requestWrapperDeclarationReferencer,
                        requestWrapperGenerator: this.requestWrapperGenerator,
                        inlinedRequestBodySchemaDeclarationReferencer:
                            this.inlinedRequestBodySchemaDeclarationReferencer,
                        inlinedRequestBodySchemaGenerator: this.inlinedRequestBodySchemaGenerator,
                        typeGenerator: this.typeGenerator,
                        sdkErrorGenerator: this.sdkErrorGenerator,
                        errorResolver: this.errorResolver,
                        serviceResolver: this.serviceResolver,
                        endpointTypeSchemasGenerator: this.endpointTypeSchemasGenerator,
                        typeSchemaGenerator: this.typeSchemaGenerator,
                        sdkErrorSchemaGenerator: this.sdkErrorSchemaGenerator,
                        environmentsGenerator: this.environmentsGenerator,
                        environmentsDeclarationReferencer: this.environmentsDeclarationReferencer,
                        sdkClientClassDeclarationReferencer: this.sdkClientClassDeclarationReferencer,
                        SdkClientClassGenerator: this.SdkClientClassGenerator,
                        genericAPISdkErrorDeclarationReferencer: this.genericAPISdkErrorDeclarationReferencer,
                        genericAPISdkErrorGenerator: this.genericAPISdkErrorGenerator,
                        timeoutSdkErrorDeclarationReferencer: this.timeoutSdkErrorDeclarationReferencer,
                        timeoutSdkErrorGenerator: this.timeoutSdkErrorGenerator,
                    });
                    sdkClientClassContext.service
                        .getGeneratedSdkClientClass(service.fernFilepath)
                        .writeToFile(sdkClientClassContext);
                },
            });
        }
    }

    private generateEnvironments(): void {
        this.withSourceFile({
            filepath: this.environmentsDeclarationReferencer.getExportedFilepath(),
            run: ({ sourceFile, importsManager }) => {
                const environmentsContext = new EnvironmentsContextImpl({
                    sourceFile,
                    coreUtilitiesManager: this.coreUtilitiesManager,
                    dependencyManager: this.dependencyManager,
                    fernConstants: this.intermediateRepresentation.constants,
                    importsManager,
                    intermediateRepresentation: this.intermediateRepresentation,
                    environmentsGenerator: this.environmentsGenerator,
                    environmentsDeclarationReferencer: this.environmentsDeclarationReferencer,
                });
                environmentsContext.environments.getGeneratedEnvironments().writeToFile(environmentsContext);
            },
        });
    }

    private generateGenericAPISdkError(): void {
        this.withSourceFile({
            filepath: this.genericAPISdkErrorDeclarationReferencer.getExportedFilepath(),
            run: ({ sourceFile, importsManager }) => {
                const context = new GenericAPISdkErrorContextImpl({
                    sourceFile,
                    coreUtilitiesManager: this.coreUtilitiesManager,
                    dependencyManager: this.dependencyManager,
                    fernConstants: this.intermediateRepresentation.constants,
                    importsManager,
                    genericAPISdkErrorDeclarationReferencer: this.genericAPISdkErrorDeclarationReferencer,
                    genericAPISdkErrorGenerator: this.genericAPISdkErrorGenerator,
                });
                this.genericAPISdkErrorGenerator
                    .generateGenericAPISdkError({
                        errorClassName: this.genericAPISdkErrorDeclarationReferencer.getExportedName(),
                    })
                    .writeToFile(context);
            },
        });
    }

    private generateTimeoutSdkError(): void {
        this.withSourceFile({
            filepath: this.timeoutSdkErrorDeclarationReferencer.getExportedFilepath(),
            run: ({ sourceFile, importsManager }) => {
                const context = new TimeoutSdkErrorContextImpl({
                    sourceFile,
                    coreUtilitiesManager: this.coreUtilitiesManager,
                    dependencyManager: this.dependencyManager,
                    fernConstants: this.intermediateRepresentation.constants,
                    importsManager,
                    timeoutSdkErrorDeclarationReferencer: this.timeoutSdkErrorDeclarationReferencer,
                    timeoutSdkErrorGenerator: this.timeoutSdkErrorGenerator,
                });
                this.timeoutSdkErrorGenerator
                    .generateTimeoutSdkError({
                        errorClassName: this.timeoutSdkErrorDeclarationReferencer.getExportedName(),
                    })
                    .writeToFile(context);
            },
        });
    }

    private withSourceFile({
        run,
        filepath,
    }: {
        run: (args: { sourceFile: SourceFile; importsManager: ImportsManager }) => void;
        filepath: ExportedFilePath;
    }) {
        const filepathStr = convertExportedFilePathToFilePath(filepath);
        this.context.logger.debug(`Generating ${filepathStr}`);

        const sourceFile = this.rootDirectory.createSourceFile(filepathStr);
        const importsManager = new ImportsManager();

        run({ sourceFile, importsManager });

        if (sourceFile.getStatements().length === 0) {
            sourceFile.delete();
            this.context.logger.debug(`Skipping ${filepathStr} (no content)`);
        } else {
            importsManager.writeImportsToSourceFile(sourceFile);
            this.exportsManager.addExportsForFilepath(filepath);

            // this needs to be last.
            // https://github.com/dsherret/ts-morph/issues/189#issuecomment-414174283
            sourceFile.insertText(0, (writer) => {
                writer.writeLine(FILE_HEADER);
            });

            this.context.logger.debug(`Generated ${filepathStr}`);
        }
    }
}
