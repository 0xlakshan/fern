imports:
  commons: commons.yml
types:
  PlaylistId: string
  Playlist:
    extends: playlistCreateRequest
    properties:
      playlist_id: PlaylistId
      owner-id: commons.UserId

  playlistCreateRequest:
    properties:
      name: string
      problems: list<commons.ProblemId>

  UpdatePlaylistRequest:
    properties:
      name: string
      problems: list<commons.ProblemId>
  PlaylistIdNotFoundErrorBody:
    union:
      playlistId: PlaylistId

  DateUnion:
    union:
      date: commons.Date
      datetime: datetime

  ReservedKeywordEnum:
    enum:
      - is
      - as
      - date

  MapWithEnumKey:
    type: map<Color, boolean>
    examples:
      - value:
          RED: true
  MapWithEnumKeyAndOptionalValue:
    type: map<Color, optional<boolean>>
    examples:
      - value:
          RED: true
  Color:
    enum:
      - RED
      - BLUE

service:
  availability: in-development
  auth: true
  base-path: /v2/playlist/{serviceParam}
  path-parameters:
    serviceParam: integer
  endpoints:
    createPlaylist:
      docs: Create a new playlist
      method: POST
      path: /create
      request:
        name: playlistCreateRequestWrapper
        query-parameters:
          multiple:
            type: integer
            allow-multiple: true
          multipleOptional:
            type: optional<boolean>
            allow-multiple: true
        body: playlistCreateRequest
      response: Playlist

    getPlaylists:
      docs: Returns the user's playlists
      method: GET
      path: /all
      response: list<Playlist>
      request:
        name: GetPlaylistsRequest
        query-parameters:
          limit: optional<integer>
          otherField: string

    getPlaylist:
      docs: Returns a playlist
      method: GET
      path: /{playlistId}
      auth: false
      path-parameters:
        playlistId: PlaylistId
      response: Playlist
      errors:
        - PlaylistIdNotFoundError
        - UnauthorizedError

    updatePlaylist:
      docs: Updates a playlist
      method: PUT
      path: /{playlistId}
      path-parameters:
        playlistId: PlaylistId
      request:
        body:
          type: optional<UpdatePlaylistRequest>
      response: optional<Playlist>
      errors:
        - PlaylistIdNotFoundError

    deletePlaylist:
      docs: Deletes a playlist
      method: DELETE
      path: /{playlist_id}
      path-parameters:
        playlist_id: PlaylistId

errors:
  PlaylistIdNotFoundError:
    type: PlaylistIdNotFoundErrorBody
    status-code: 404
  UnauthorizedError:
    status-code: 401
