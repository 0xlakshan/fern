// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`runGenerator trace 1`] = `
Array [
  Object {
    "contents": Array [
      Object {
        "contents": "export * from \\"./resources\\";
",
        "name": "index.d.ts",
        "type": "file",
      },
      Object {
        "contents": "export * from \\"./resources\\";
",
        "name": "index.js",
        "type": "file",
      },
      Object {
        "contents": Array [
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./service\\";
",
                "name": "index.d.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./service\\";
",
                "name": "index.js",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import express from \\"express\\";
import * as serializers from \\"../../../../serialization\\";
import { TraceApi } from \\"../../../..\\";
export declare abstract class AbstractAdminService {
    private router;
    abstract updateTestSubmissionStatus(request: express.Request<{
        submissionId: serializers.SubmissionId.Raw;
    }, never, TraceApi.TestSubmissionStatus, never>): Promise<void>;
    abstract sendTestSubmissionUpdate(request: express.Request<{
        submissionId: serializers.SubmissionId.Raw;
    }, never, TraceApi.TestSubmissionUpdate, never>): Promise<void>;
    abstract updateWorkspaceSubmissionStatus(request: express.Request<{
        submissionId: serializers.SubmissionId.Raw;
    }, never, TraceApi.WorkspaceSubmissionStatus, never>): Promise<void>;
    abstract sendWorkspaceSubmissionUpdate(request: express.Request<{
        submissionId: serializers.SubmissionId.Raw;
    }, never, TraceApi.WorkspaceSubmissionUpdate, never>): Promise<void>;
    abstract storeTracedTestCase(request: express.Request<{
        submissionId: serializers.SubmissionId.Raw;
        testCaseId: string;
    }, never, TraceApi.StoreTracedTestCaseRequest, {
        \\"some-query-param\\"?: string | null;
    }>): Promise<void>;
    abstract storeTracedTestCaseV2(request: express.Request<{
        submissionId: serializers.SubmissionId.Raw;
        testCaseId: serializers.v2.TestCaseId.Raw;
    }, never, TraceApi.TraceResponseV2[], never>): Promise<void>;
    abstract storeTracedWorkspace(request: express.Request<{
        submissionId: serializers.SubmissionId.Raw;
    }, never, TraceApi.StoreTracedWorkspaceRequest, never>): Promise<void>;
    abstract storeTracedWorkspaceV2(request: express.Request<{
        submissionId: serializers.SubmissionId.Raw;
    }, never, TraceApi.TraceResponseV2[], never>): Promise<void>;
    addMiddleware(handler: express.RequestHandler): this;
    toRouter(): express.Router;
}
",
                    "name": "AbstractAdminService.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import express from \\"express\\";
import * as serializers from \\"../../../../serialization\\";
import * as errors from \\"../../../../errors\\";
export class AbstractAdminService {
    router = express.Router({ mergeParams: true }).use(express.json());
    addMiddleware(handler) {
        this.router.use(handler);
        return this;
    }
    toRouter() {
        this.router.post(\\"/store-test-submission-status/:submissionId\\", async (req, res, next) => {
            try {
                req.body = await serializers.TestSubmissionStatus.parse(req.body);
                await this.updateTestSubmissionStatus(req);
                res.sendStatus(204);
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'updateTestSubmissionStatus' unexpectedly threw \${error.constructor.name}.\` +
                        \` If this was intentional, please add \${error.constructor.name} to\` +
                        \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).json(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.post(\\"/store-test-submission-status-v2/:submissionId\\", async (req, res, next) => {
            try {
                req.body = await serializers.TestSubmissionUpdate.parse(req.body);
                await this.sendTestSubmissionUpdate(req);
                res.sendStatus(204);
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'sendTestSubmissionUpdate' unexpectedly threw \${error.constructor.name}.\` +
                        \` If this was intentional, please add \${error.constructor.name} to\` +
                        \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).json(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.post(\\"/store-workspace-submission-status/:submissionId\\", async (req, res, next) => {
            try {
                req.body = await serializers.WorkspaceSubmissionStatus.parse(req.body);
                await this.updateWorkspaceSubmissionStatus(req);
                res.sendStatus(204);
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'updateWorkspaceSubmissionStatus' unexpectedly threw \${error.constructor.name}.\` +
                        \` If this was intentional, please add \${error.constructor.name} to\` +
                        \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).json(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.post(\\"/store-workspace-submission-status-v2/:submissionId\\", async (req, res, next) => {
            try {
                req.body = await serializers.WorkspaceSubmissionUpdate.parse(req.body);
                await this.sendWorkspaceSubmissionUpdate(req);
                res.sendStatus(204);
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'sendWorkspaceSubmissionUpdate' unexpectedly threw \${error.constructor.name}.\` +
                        \` If this was intentional, please add \${error.constructor.name} to\` +
                        \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).json(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.post(\\"/store-test-trace/submission/:submissionId/testCase/:testCaseId\\", async (req, res, next) => {
            try {
                req.body = await serializers.StoreTracedTestCaseRequest.parse(req.body);
                await this.storeTracedTestCase(req);
                res.sendStatus(204);
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'storeTracedTestCase' unexpectedly threw \${error.constructor.name}.\` +
                        \` If this was intentional, please add \${error.constructor.name} to\` +
                        \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).json(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.post(\\"/store-test-trace-v2/submission/:submissionId/testCase/:testCaseId\\", async (req, res, next) => {
            try {
                req.body = await serializers.admin.storeTracedTestCaseV2.Request.parse(req.body);
                await this.storeTracedTestCaseV2(req);
                res.sendStatus(204);
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'storeTracedTestCaseV2' unexpectedly threw \${error.constructor.name}.\` +
                        \` If this was intentional, please add \${error.constructor.name} to\` +
                        \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).json(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.post(\\"/store-workspace-trace/submission/:submissionId\\", async (req, res, next) => {
            try {
                req.body = await serializers.StoreTracedWorkspaceRequest.parse(req.body);
                await this.storeTracedWorkspace(req);
                res.sendStatus(204);
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'storeTracedWorkspace' unexpectedly threw \${error.constructor.name}.\` +
                        \` If this was intentional, please add \${error.constructor.name} to\` +
                        \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).json(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.post(\\"/store-workspace-trace-v2/submission/:submissionId\\", async (req, res, next) => {
            try {
                req.body = await serializers.admin.storeTracedWorkspaceV2.Request.parse(req.body);
                await this.storeTracedWorkspaceV2(req);
                res.sendStatus(204);
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'storeTracedWorkspaceV2' unexpectedly threw \${error.constructor.name}.\` +
                        \` If this was intentional, please add \${error.constructor.name} to\` +
                        \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).json(\\"Internal Server Error\\");
                }
            }
            next();
        });
        return this.router;
    }
}
",
                    "name": "AbstractAdminService.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./requests\\";
export { AbstractAdminService } from \\"./AbstractAdminService\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./requests\\";
export { AbstractAdminService } from \\"./AbstractAdminService\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../..\\";
export interface StoreTracedTestCaseRequest {
    result: TraceApi.TestCaseResultWithStdout;
    traceResponses: TraceApi.TraceResponse[];
}
",
                        "name": "StoreTracedTestCaseRequest.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                        "name": "StoreTracedTestCaseRequest.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../..\\";
export interface StoreTracedWorkspaceRequest {
    workspaceRunDetails: TraceApi.WorkspaceRunDetails;
    traceResponses: TraceApi.TraceResponse[];
}
",
                        "name": "StoreTracedWorkspaceRequest.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                        "name": "StoreTracedWorkspaceRequest.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { StoreTracedTestCaseRequest } from \\"./StoreTracedTestCaseRequest\\";
export { StoreTracedWorkspaceRequest } from \\"./StoreTracedWorkspaceRequest\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export {};
",
                        "name": "index.js",
                        "type": "file",
                      },
                    ],
                    "name": "requests",
                    "type": "directory",
                  },
                ],
                "name": "service",
                "type": "directory",
              },
            ],
            "name": "admin",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./types\\";
",
                "name": "index.d.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./types\\";
",
                "name": "index.js",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface BinaryTreeNodeAndTreeValue {
    nodeId: TraceApi.NodeId;
    fullTree: TraceApi.BinaryTreeValue;
}
",
                    "name": "BinaryTreeNodeAndTreeValue.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "BinaryTreeNodeAndTreeValue.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface BinaryTreeNodeValue {
    nodeId: TraceApi.NodeId;
    val: number;
    right?: TraceApi.NodeId;
    left?: TraceApi.NodeId;
}
",
                    "name": "BinaryTreeNodeValue.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "BinaryTreeNodeValue.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface BinaryTreeValue {
    root?: TraceApi.NodeId;
    nodes: Record<TraceApi.NodeId, TraceApi.BinaryTreeNodeValue>;
}
",
                    "name": "BinaryTreeValue.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "BinaryTreeValue.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
/**
 * ISO 8601 date; formatted YYYY-MM-DD (i.e. 2012-02-01)
 */
export declare type Date = string;
",
                    "name": "Date.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "Date.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface DebugKeyValuePairs {
    key: TraceApi.DebugVariableValue;
    value: TraceApi.DebugVariableValue;
}
",
                    "name": "DebugKeyValuePairs.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "DebugKeyValuePairs.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface DebugMapValue {
    keyValuePairs: TraceApi.DebugKeyValuePairs[];
}
",
                    "name": "DebugMapValue.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "DebugMapValue.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export declare type DebugVariableValue = TraceApi.DebugVariableValue.IntegerValue | TraceApi.DebugVariableValue.BooleanValue | TraceApi.DebugVariableValue.DoubleValue | TraceApi.DebugVariableValue.StringValue | TraceApi.DebugVariableValue.CharValue | TraceApi.DebugVariableValue.MapValue | TraceApi.DebugVariableValue.ListValue | TraceApi.DebugVariableValue.BinaryTreeNodeValue | TraceApi.DebugVariableValue.SinglyLinkedListNodeValue | TraceApi.DebugVariableValue.DoublyLinkedListNodeValue | TraceApi.DebugVariableValue.UndefinedValue | TraceApi.DebugVariableValue.NullValue | TraceApi.DebugVariableValue.GenericValue | TraceApi.DebugVariableValue._Unknown;
export declare namespace DebugVariableValue {
    interface IntegerValue extends _Utils {
        type: \\"integerValue\\";
        value: number;
    }
    interface BooleanValue extends _Utils {
        type: \\"booleanValue\\";
        value: boolean;
    }
    interface DoubleValue extends _Utils {
        type: \\"doubleValue\\";
        value: number;
    }
    interface StringValue extends _Utils {
        type: \\"stringValue\\";
        value: string;
    }
    interface CharValue extends _Utils {
        type: \\"charValue\\";
        value: string;
    }
    interface MapValue extends TraceApi.DebugMapValue, _Utils {
        type: \\"mapValue\\";
    }
    interface ListValue extends _Utils {
        type: \\"listValue\\";
        value: TraceApi.DebugVariableValue[];
    }
    interface BinaryTreeNodeValue extends TraceApi.BinaryTreeNodeAndTreeValue, _Utils {
        type: \\"binaryTreeNodeValue\\";
    }
    interface SinglyLinkedListNodeValue extends TraceApi.SinglyLinkedListNodeAndListValue, _Utils {
        type: \\"singlyLinkedListNodeValue\\";
    }
    interface DoublyLinkedListNodeValue extends TraceApi.DoublyLinkedListNodeAndListValue, _Utils {
        type: \\"doublyLinkedListNodeValue\\";
    }
    interface UndefinedValue extends _Utils {
        type: \\"undefinedValue\\";
    }
    interface NullValue extends _Utils {
        type: \\"nullValue\\";
    }
    interface GenericValue extends TraceApi.GenericValue, _Utils {
        type: \\"genericValue\\";
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.DebugVariableValue._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        integerValue: (value: number) => _Result;
        booleanValue: (value: boolean) => _Result;
        doubleValue: (value: number) => _Result;
        stringValue: (value: string) => _Result;
        charValue: (value: string) => _Result;
        mapValue: (value: TraceApi.DebugMapValue) => _Result;
        listValue: (value: TraceApi.DebugVariableValue[]) => _Result;
        binaryTreeNodeValue: (value: TraceApi.BinaryTreeNodeAndTreeValue) => _Result;
        singlyLinkedListNodeValue: (value: TraceApi.SinglyLinkedListNodeAndListValue) => _Result;
        doublyLinkedListNodeValue: (value: TraceApi.DoublyLinkedListNodeAndListValue) => _Result;
        undefinedValue: () => _Result;
        nullValue: () => _Result;
        genericValue: (value: TraceApi.GenericValue) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const DebugVariableValue: {
    readonly integerValue: (value: number) => TraceApi.DebugVariableValue.IntegerValue;
    readonly booleanValue: (value: boolean) => TraceApi.DebugVariableValue.BooleanValue;
    readonly doubleValue: (value: number) => TraceApi.DebugVariableValue.DoubleValue;
    readonly stringValue: (value: string) => TraceApi.DebugVariableValue.StringValue;
    readonly charValue: (value: string) => TraceApi.DebugVariableValue.CharValue;
    readonly mapValue: (value: TraceApi.DebugMapValue) => TraceApi.DebugVariableValue.MapValue;
    readonly listValue: (value: TraceApi.DebugVariableValue[]) => TraceApi.DebugVariableValue.ListValue;
    readonly binaryTreeNodeValue: (value: TraceApi.BinaryTreeNodeAndTreeValue) => TraceApi.DebugVariableValue.BinaryTreeNodeValue;
    readonly singlyLinkedListNodeValue: (value: TraceApi.SinglyLinkedListNodeAndListValue) => TraceApi.DebugVariableValue.SinglyLinkedListNodeValue;
    readonly doublyLinkedListNodeValue: (value: TraceApi.DoublyLinkedListNodeAndListValue) => TraceApi.DebugVariableValue.DoublyLinkedListNodeValue;
    readonly undefinedValue: () => TraceApi.DebugVariableValue.UndefinedValue;
    readonly nullValue: () => TraceApi.DebugVariableValue.NullValue;
    readonly genericValue: (value: TraceApi.GenericValue) => TraceApi.DebugVariableValue.GenericValue;
    readonly _unknown: (value: {
        type: string;
    }) => TraceApi.DebugVariableValue._Unknown;
    readonly _visit: <_Result>(value: TraceApi.DebugVariableValue, visitor: TraceApi.DebugVariableValue._Visitor<_Result>) => _Result;
};
",
                    "name": "DebugVariableValue.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export const DebugVariableValue = {
    integerValue: (value) => {
        return {
            value: value,
            type: \\"integerValue\\",
            _visit: function (visitor) {
                return TraceApi.DebugVariableValue._visit(this, visitor);
            },
        };
    },
    booleanValue: (value) => {
        return {
            value: value,
            type: \\"booleanValue\\",
            _visit: function (visitor) {
                return TraceApi.DebugVariableValue._visit(this, visitor);
            },
        };
    },
    doubleValue: (value) => {
        return {
            value: value,
            type: \\"doubleValue\\",
            _visit: function (visitor) {
                return TraceApi.DebugVariableValue._visit(this, visitor);
            },
        };
    },
    stringValue: (value) => {
        return {
            value: value,
            type: \\"stringValue\\",
            _visit: function (visitor) {
                return TraceApi.DebugVariableValue._visit(this, visitor);
            },
        };
    },
    charValue: (value) => {
        return {
            value: value,
            type: \\"charValue\\",
            _visit: function (visitor) {
                return TraceApi.DebugVariableValue._visit(this, visitor);
            },
        };
    },
    mapValue: (value) => {
        return {
            ...value,
            type: \\"mapValue\\",
            _visit: function (visitor) {
                return TraceApi.DebugVariableValue._visit(this, visitor);
            },
        };
    },
    listValue: (value) => {
        return {
            value: value,
            type: \\"listValue\\",
            _visit: function (visitor) {
                return TraceApi.DebugVariableValue._visit(this, visitor);
            },
        };
    },
    binaryTreeNodeValue: (value) => {
        return {
            ...value,
            type: \\"binaryTreeNodeValue\\",
            _visit: function (visitor) {
                return TraceApi.DebugVariableValue._visit(this, visitor);
            },
        };
    },
    singlyLinkedListNodeValue: (value) => {
        return {
            ...value,
            type: \\"singlyLinkedListNodeValue\\",
            _visit: function (visitor) {
                return TraceApi.DebugVariableValue._visit(this, visitor);
            },
        };
    },
    doublyLinkedListNodeValue: (value) => {
        return {
            ...value,
            type: \\"doublyLinkedListNodeValue\\",
            _visit: function (visitor) {
                return TraceApi.DebugVariableValue._visit(this, visitor);
            },
        };
    },
    undefinedValue: () => {
        return {
            type: \\"undefinedValue\\",
            _visit: function (visitor) {
                return TraceApi.DebugVariableValue._visit(this, visitor);
            },
        };
    },
    nullValue: () => {
        return {
            type: \\"nullValue\\",
            _visit: function (visitor) {
                return TraceApi.DebugVariableValue._visit(this, visitor);
            },
        };
    },
    genericValue: (value) => {
        return {
            ...value,
            type: \\"genericValue\\",
            _visit: function (visitor) {
                return TraceApi.DebugVariableValue._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.DebugVariableValue._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case \\"integerValue\\":
                return visitor.integerValue(value.value);
            case \\"booleanValue\\":
                return visitor.booleanValue(value.value);
            case \\"doubleValue\\":
                return visitor.doubleValue(value.value);
            case \\"stringValue\\":
                return visitor.stringValue(value.value);
            case \\"charValue\\":
                return visitor.charValue(value.value);
            case \\"mapValue\\":
                return visitor.mapValue(value);
            case \\"listValue\\":
                return visitor.listValue(value.value);
            case \\"binaryTreeNodeValue\\":
                return visitor.binaryTreeNodeValue(value);
            case \\"singlyLinkedListNodeValue\\":
                return visitor.singlyLinkedListNodeValue(value);
            case \\"doublyLinkedListNodeValue\\":
                return visitor.doublyLinkedListNodeValue(value);
            case \\"undefinedValue\\":
                return visitor.undefinedValue();
            case \\"nullValue\\":
                return visitor.nullValue();
            case \\"genericValue\\":
                return visitor.genericValue(value);
            default:
                return visitor._other(value);
        }
    },
};
",
                    "name": "DebugVariableValue.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface DoublyLinkedListNodeAndListValue {
    nodeId: TraceApi.NodeId;
    fullList: TraceApi.DoublyLinkedListValue;
}
",
                    "name": "DoublyLinkedListNodeAndListValue.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "DoublyLinkedListNodeAndListValue.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface DoublyLinkedListNodeValue {
    nodeId: TraceApi.NodeId;
    val: number;
    next?: TraceApi.NodeId;
    prev?: TraceApi.NodeId;
}
",
                    "name": "DoublyLinkedListNodeValue.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "DoublyLinkedListNodeValue.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface DoublyLinkedListValue {
    head?: TraceApi.NodeId;
    nodes: Record<TraceApi.NodeId, TraceApi.DoublyLinkedListNodeValue>;
}
",
                    "name": "DoublyLinkedListValue.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "DoublyLinkedListValue.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface FileInfo {
    filename: string;
    contents: string;
}
",
                    "name": "FileInfo.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "FileInfo.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface GenericValue {
    stringifiedType?: string;
    stringifiedValue: string;
}
",
                    "name": "GenericValue.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "GenericValue.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface KeyValuePair {
    key: TraceApi.VariableValue;
    value: TraceApi.VariableValue;
}
",
                    "name": "KeyValuePair.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "KeyValuePair.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
/**
 * @example
 *     TraceApi.Language.Java
 */
export declare type Language = \\"JAVA\\" | \\"JAVASCRIPT\\" | \\"PYTHON\\";
export declare const Language: {
    readonly Java: \\"JAVA\\";
    readonly Javascript: \\"JAVASCRIPT\\";
    readonly Python: \\"PYTHON\\";
};
",
                    "name": "Language.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export const Language = {
    Java: \\"JAVA\\",
    Javascript: \\"JAVASCRIPT\\",
    Python: \\"PYTHON\\",
};
",
                    "name": "Language.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface ListType {
    valueType: TraceApi.VariableType;
    /** Whether this list is fixed-size (for languages that supports fixed-size lists). Defaults to false. */
    isFixedLength?: boolean;
}
",
                    "name": "ListType.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "ListType.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface MapType {
    keyType: TraceApi.VariableType;
    valueType: TraceApi.VariableType;
}
",
                    "name": "MapType.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "MapType.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface MapValue {
    keyValuePairs: TraceApi.KeyValuePair[];
}
",
                    "name": "MapValue.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "MapValue.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export declare type NodeId = string;
",
                    "name": "NodeId.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "NodeId.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export declare type ProblemId = string;
",
                    "name": "ProblemId.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "ProblemId.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
/**
 * @example
 *     {
 *         \\"foo\\": \\"hello\\",
 *         \\"bar\\": {
 *             \\"yo\\": 123
 *         }
 *     }
 */
export declare type RandomUnknownType = unknown;
",
                    "name": "RandomUnknownType.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "RandomUnknownType.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface SinglyLinkedListNodeAndListValue {
    nodeId: TraceApi.NodeId;
    fullList: TraceApi.SinglyLinkedListValue;
}
",
                    "name": "SinglyLinkedListNodeAndListValue.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "SinglyLinkedListNodeAndListValue.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface SinglyLinkedListNodeValue {
    nodeId: TraceApi.NodeId;
    val: number;
    next?: TraceApi.NodeId;
}
",
                    "name": "SinglyLinkedListNodeValue.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "SinglyLinkedListNodeValue.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface SinglyLinkedListValue {
    head?: TraceApi.NodeId;
    nodes: Record<TraceApi.NodeId, TraceApi.SinglyLinkedListNodeValue>;
}
",
                    "name": "SinglyLinkedListValue.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "SinglyLinkedListValue.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface TestCase {
    id: string;
    params: TraceApi.VariableValue[];
}
",
                    "name": "TestCase.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "TestCase.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface TestCaseWithExpectedResult {
    testCase: TraceApi.TestCase;
    expectedResult: TraceApi.VariableValue;
}
",
                    "name": "TestCaseWithExpectedResult.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "TestCaseWithExpectedResult.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
/**
 * @example
 *     \\"user12345\\"
 */
export declare type UserId = string;
",
                    "name": "UserId.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "UserId.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export declare type VariableType = TraceApi.VariableType.IntegerType | TraceApi.VariableType.DoubleType | TraceApi.VariableType.BooleanType | TraceApi.VariableType.StringType | TraceApi.VariableType.CharType | TraceApi.VariableType.ListType | TraceApi.VariableType.MapType | TraceApi.VariableType.BinaryTreeType | TraceApi.VariableType.SinglyLinkedListType | TraceApi.VariableType.DoublyLinkedListType | TraceApi.VariableType._Unknown;
export declare namespace VariableType {
    interface IntegerType extends _Utils {
        type: \\"integerType\\";
    }
    interface DoubleType extends _Utils {
        type: \\"doubleType\\";
    }
    interface BooleanType extends _Utils {
        type: \\"booleanType\\";
    }
    interface StringType extends _Utils {
        type: \\"stringType\\";
    }
    interface CharType extends _Utils {
        type: \\"charType\\";
    }
    interface ListType extends TraceApi.ListType, _Utils {
        type: \\"listType\\";
    }
    interface MapType extends TraceApi.MapType, _Utils {
        type: \\"mapType\\";
    }
    interface BinaryTreeType extends _Utils {
        type: \\"binaryTreeType\\";
    }
    interface SinglyLinkedListType extends _Utils {
        type: \\"singlyLinkedListType\\";
    }
    interface DoublyLinkedListType extends _Utils {
        type: \\"doublyLinkedListType\\";
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.VariableType._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        integerType: () => _Result;
        doubleType: () => _Result;
        booleanType: () => _Result;
        stringType: () => _Result;
        charType: () => _Result;
        listType: (value: TraceApi.ListType) => _Result;
        mapType: (value: TraceApi.MapType) => _Result;
        binaryTreeType: () => _Result;
        singlyLinkedListType: () => _Result;
        doublyLinkedListType: () => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const VariableType: {
    readonly integerType: () => TraceApi.VariableType.IntegerType;
    readonly doubleType: () => TraceApi.VariableType.DoubleType;
    readonly booleanType: () => TraceApi.VariableType.BooleanType;
    readonly stringType: () => TraceApi.VariableType.StringType;
    readonly charType: () => TraceApi.VariableType.CharType;
    readonly listType: (value: TraceApi.ListType) => TraceApi.VariableType.ListType;
    readonly mapType: (value: TraceApi.MapType) => TraceApi.VariableType.MapType;
    readonly binaryTreeType: () => TraceApi.VariableType.BinaryTreeType;
    readonly singlyLinkedListType: () => TraceApi.VariableType.SinglyLinkedListType;
    readonly doublyLinkedListType: () => TraceApi.VariableType.DoublyLinkedListType;
    readonly _unknown: (value: {
        type: string;
    }) => TraceApi.VariableType._Unknown;
    readonly _visit: <_Result>(value: TraceApi.VariableType, visitor: TraceApi.VariableType._Visitor<_Result>) => _Result;
};
",
                    "name": "VariableType.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export const VariableType = {
    integerType: () => {
        return {
            type: \\"integerType\\",
            _visit: function (visitor) {
                return TraceApi.VariableType._visit(this, visitor);
            },
        };
    },
    doubleType: () => {
        return {
            type: \\"doubleType\\",
            _visit: function (visitor) {
                return TraceApi.VariableType._visit(this, visitor);
            },
        };
    },
    booleanType: () => {
        return {
            type: \\"booleanType\\",
            _visit: function (visitor) {
                return TraceApi.VariableType._visit(this, visitor);
            },
        };
    },
    stringType: () => {
        return {
            type: \\"stringType\\",
            _visit: function (visitor) {
                return TraceApi.VariableType._visit(this, visitor);
            },
        };
    },
    charType: () => {
        return {
            type: \\"charType\\",
            _visit: function (visitor) {
                return TraceApi.VariableType._visit(this, visitor);
            },
        };
    },
    listType: (value) => {
        return {
            ...value,
            type: \\"listType\\",
            _visit: function (visitor) {
                return TraceApi.VariableType._visit(this, visitor);
            },
        };
    },
    mapType: (value) => {
        return {
            ...value,
            type: \\"mapType\\",
            _visit: function (visitor) {
                return TraceApi.VariableType._visit(this, visitor);
            },
        };
    },
    binaryTreeType: () => {
        return {
            type: \\"binaryTreeType\\",
            _visit: function (visitor) {
                return TraceApi.VariableType._visit(this, visitor);
            },
        };
    },
    singlyLinkedListType: () => {
        return {
            type: \\"singlyLinkedListType\\",
            _visit: function (visitor) {
                return TraceApi.VariableType._visit(this, visitor);
            },
        };
    },
    doublyLinkedListType: () => {
        return {
            type: \\"doublyLinkedListType\\",
            _visit: function (visitor) {
                return TraceApi.VariableType._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.VariableType._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case \\"integerType\\":
                return visitor.integerType();
            case \\"doubleType\\":
                return visitor.doubleType();
            case \\"booleanType\\":
                return visitor.booleanType();
            case \\"stringType\\":
                return visitor.stringType();
            case \\"charType\\":
                return visitor.charType();
            case \\"listType\\":
                return visitor.listType(value);
            case \\"mapType\\":
                return visitor.mapType(value);
            case \\"binaryTreeType\\":
                return visitor.binaryTreeType();
            case \\"singlyLinkedListType\\":
                return visitor.singlyLinkedListType();
            case \\"doublyLinkedListType\\":
                return visitor.doublyLinkedListType();
            default:
                return visitor._other(value);
        }
    },
};
",
                    "name": "VariableType.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export declare type VariableValue = TraceApi.VariableValue.IntegerValue | TraceApi.VariableValue.BooleanValue | TraceApi.VariableValue.DoubleValue | TraceApi.VariableValue.StringValue | TraceApi.VariableValue.CharValue | TraceApi.VariableValue.MapValue | TraceApi.VariableValue.ListValue | TraceApi.VariableValue.BinaryTreeValue | TraceApi.VariableValue.SinglyLinkedListValue | TraceApi.VariableValue.DoublyLinkedListValue | TraceApi.VariableValue.NullValue | TraceApi.VariableValue._Unknown;
export declare namespace VariableValue {
    interface IntegerValue extends _Utils {
        type: \\"integerValue\\";
        value: number;
    }
    interface BooleanValue extends _Utils {
        type: \\"booleanValue\\";
        value: boolean;
    }
    interface DoubleValue extends _Utils {
        type: \\"doubleValue\\";
        value: number;
    }
    interface StringValue extends _Utils {
        type: \\"stringValue\\";
        value: string;
    }
    interface CharValue extends _Utils {
        type: \\"charValue\\";
        value: string;
    }
    interface MapValue extends TraceApi.MapValue, _Utils {
        type: \\"mapValue\\";
    }
    interface ListValue extends _Utils {
        type: \\"listValue\\";
        value: TraceApi.VariableValue[];
    }
    interface BinaryTreeValue extends TraceApi.BinaryTreeValue, _Utils {
        type: \\"binaryTreeValue\\";
    }
    interface SinglyLinkedListValue extends TraceApi.SinglyLinkedListValue, _Utils {
        type: \\"singlyLinkedListValue\\";
    }
    interface DoublyLinkedListValue extends TraceApi.DoublyLinkedListValue, _Utils {
        type: \\"doublyLinkedListValue\\";
    }
    interface NullValue extends _Utils {
        type: \\"nullValue\\";
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.VariableValue._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        integerValue: (value: number) => _Result;
        booleanValue: (value: boolean) => _Result;
        doubleValue: (value: number) => _Result;
        stringValue: (value: string) => _Result;
        charValue: (value: string) => _Result;
        mapValue: (value: TraceApi.MapValue) => _Result;
        listValue: (value: TraceApi.VariableValue[]) => _Result;
        binaryTreeValue: (value: TraceApi.BinaryTreeValue) => _Result;
        singlyLinkedListValue: (value: TraceApi.SinglyLinkedListValue) => _Result;
        doublyLinkedListValue: (value: TraceApi.DoublyLinkedListValue) => _Result;
        nullValue: () => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const VariableValue: {
    readonly integerValue: (value: number) => TraceApi.VariableValue.IntegerValue;
    readonly booleanValue: (value: boolean) => TraceApi.VariableValue.BooleanValue;
    readonly doubleValue: (value: number) => TraceApi.VariableValue.DoubleValue;
    readonly stringValue: (value: string) => TraceApi.VariableValue.StringValue;
    readonly charValue: (value: string) => TraceApi.VariableValue.CharValue;
    readonly mapValue: (value: TraceApi.MapValue) => TraceApi.VariableValue.MapValue;
    readonly listValue: (value: TraceApi.VariableValue[]) => TraceApi.VariableValue.ListValue;
    readonly binaryTreeValue: (value: TraceApi.BinaryTreeValue) => TraceApi.VariableValue.BinaryTreeValue;
    readonly singlyLinkedListValue: (value: TraceApi.SinglyLinkedListValue) => TraceApi.VariableValue.SinglyLinkedListValue;
    readonly doublyLinkedListValue: (value: TraceApi.DoublyLinkedListValue) => TraceApi.VariableValue.DoublyLinkedListValue;
    readonly nullValue: () => TraceApi.VariableValue.NullValue;
    readonly _unknown: (value: {
        type: string;
    }) => TraceApi.VariableValue._Unknown;
    readonly _visit: <_Result>(value: TraceApi.VariableValue, visitor: TraceApi.VariableValue._Visitor<_Result>) => _Result;
};
",
                    "name": "VariableValue.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export const VariableValue = {
    integerValue: (value) => {
        return {
            value: value,
            type: \\"integerValue\\",
            _visit: function (visitor) {
                return TraceApi.VariableValue._visit(this, visitor);
            },
        };
    },
    booleanValue: (value) => {
        return {
            value: value,
            type: \\"booleanValue\\",
            _visit: function (visitor) {
                return TraceApi.VariableValue._visit(this, visitor);
            },
        };
    },
    doubleValue: (value) => {
        return {
            value: value,
            type: \\"doubleValue\\",
            _visit: function (visitor) {
                return TraceApi.VariableValue._visit(this, visitor);
            },
        };
    },
    stringValue: (value) => {
        return {
            value: value,
            type: \\"stringValue\\",
            _visit: function (visitor) {
                return TraceApi.VariableValue._visit(this, visitor);
            },
        };
    },
    charValue: (value) => {
        return {
            value: value,
            type: \\"charValue\\",
            _visit: function (visitor) {
                return TraceApi.VariableValue._visit(this, visitor);
            },
        };
    },
    mapValue: (value) => {
        return {
            ...value,
            type: \\"mapValue\\",
            _visit: function (visitor) {
                return TraceApi.VariableValue._visit(this, visitor);
            },
        };
    },
    listValue: (value) => {
        return {
            value: value,
            type: \\"listValue\\",
            _visit: function (visitor) {
                return TraceApi.VariableValue._visit(this, visitor);
            },
        };
    },
    binaryTreeValue: (value) => {
        return {
            ...value,
            type: \\"binaryTreeValue\\",
            _visit: function (visitor) {
                return TraceApi.VariableValue._visit(this, visitor);
            },
        };
    },
    singlyLinkedListValue: (value) => {
        return {
            ...value,
            type: \\"singlyLinkedListValue\\",
            _visit: function (visitor) {
                return TraceApi.VariableValue._visit(this, visitor);
            },
        };
    },
    doublyLinkedListValue: (value) => {
        return {
            ...value,
            type: \\"doublyLinkedListValue\\",
            _visit: function (visitor) {
                return TraceApi.VariableValue._visit(this, visitor);
            },
        };
    },
    nullValue: () => {
        return {
            type: \\"nullValue\\",
            _visit: function (visitor) {
                return TraceApi.VariableValue._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.VariableValue._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case \\"integerValue\\":
                return visitor.integerValue(value.value);
            case \\"booleanValue\\":
                return visitor.booleanValue(value.value);
            case \\"doubleValue\\":
                return visitor.doubleValue(value.value);
            case \\"stringValue\\":
                return visitor.stringValue(value.value);
            case \\"charValue\\":
                return visitor.charValue(value.value);
            case \\"mapValue\\":
                return visitor.mapValue(value);
            case \\"listValue\\":
                return visitor.listValue(value.value);
            case \\"binaryTreeValue\\":
                return visitor.binaryTreeValue(value);
            case \\"singlyLinkedListValue\\":
                return visitor.singlyLinkedListValue(value);
            case \\"doublyLinkedListValue\\":
                return visitor.doublyLinkedListValue(value);
            case \\"nullValue\\":
                return visitor.nullValue();
            default:
                return visitor._other(value);
        }
    },
};
",
                    "name": "VariableValue.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./UserId\\";
export * from \\"./ProblemId\\";
export * from \\"./NodeId\\";
export * from \\"./VariableType\\";
export * from \\"./ListType\\";
export * from \\"./MapType\\";
export * from \\"./VariableValue\\";
export * from \\"./DebugVariableValue\\";
export * from \\"./GenericValue\\";
export * from \\"./MapValue\\";
export * from \\"./KeyValuePair\\";
export * from \\"./BinaryTreeValue\\";
export * from \\"./BinaryTreeNodeValue\\";
export * from \\"./BinaryTreeNodeAndTreeValue\\";
export * from \\"./SinglyLinkedListValue\\";
export * from \\"./SinglyLinkedListNodeValue\\";
export * from \\"./SinglyLinkedListNodeAndListValue\\";
export * from \\"./DoublyLinkedListValue\\";
export * from \\"./DoublyLinkedListNodeValue\\";
export * from \\"./DoublyLinkedListNodeAndListValue\\";
export * from \\"./DebugMapValue\\";
export * from \\"./DebugKeyValuePairs\\";
export * from \\"./TestCase\\";
export * from \\"./TestCaseWithExpectedResult\\";
export * from \\"./FileInfo\\";
export * from \\"./Language\\";
export * from \\"./RandomUnknownType\\";
export * from \\"./Date\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./UserId\\";
export * from \\"./ProblemId\\";
export * from \\"./NodeId\\";
export * from \\"./VariableType\\";
export * from \\"./ListType\\";
export * from \\"./MapType\\";
export * from \\"./VariableValue\\";
export * from \\"./DebugVariableValue\\";
export * from \\"./GenericValue\\";
export * from \\"./MapValue\\";
export * from \\"./KeyValuePair\\";
export * from \\"./BinaryTreeValue\\";
export * from \\"./BinaryTreeNodeValue\\";
export * from \\"./BinaryTreeNodeAndTreeValue\\";
export * from \\"./SinglyLinkedListValue\\";
export * from \\"./SinglyLinkedListNodeValue\\";
export * from \\"./SinglyLinkedListNodeAndListValue\\";
export * from \\"./DoublyLinkedListValue\\";
export * from \\"./DoublyLinkedListNodeValue\\";
export * from \\"./DoublyLinkedListNodeAndListValue\\";
export * from \\"./DebugMapValue\\";
export * from \\"./DebugKeyValuePairs\\";
export * from \\"./TestCase\\";
export * from \\"./TestCaseWithExpectedResult\\";
export * from \\"./FileInfo\\";
export * from \\"./Language\\";
export * from \\"./RandomUnknownType\\";
export * from \\"./Date\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "commons",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./service\\";
",
                "name": "index.d.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./service\\";
",
                "name": "index.js",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import express from \\"express\\";
import { TraceApi } from \\"../../../..\\";
export declare abstract class AbstractHomepageService {
    private router;
    abstract getHomepageProblems(request: express.Request<never, TraceApi.ProblemId[], never, never>): Promise<TraceApi.ProblemId[]>;
    abstract setHomepageProblems(request: express.Request<never, never, TraceApi.ProblemId[], never>): Promise<void>;
    addMiddleware(handler: express.RequestHandler): this;
    toRouter(): express.Router;
}
",
                    "name": "AbstractHomepageService.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import express from \\"express\\";
import * as serializers from \\"../../../../serialization\\";
import * as errors from \\"../../../../errors\\";
export class AbstractHomepageService {
    router = express.Router({ mergeParams: true }).use(express.json());
    addMiddleware(handler) {
        this.router.use(handler);
        return this;
    }
    toRouter() {
        this.router.get(\\"/\\", async (req, res, next) => {
            try {
                const response = await this.getHomepageProblems(req);
                res.json(await serializers.homepage.getHomepageProblems.Response.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'getHomepageProblems' unexpectedly threw \${error.constructor.name}.\` +
                        \` If this was intentional, please add \${error.constructor.name} to\` +
                        \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).json(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.post(\\"/\\", async (req, res, next) => {
            try {
                req.body = await serializers.homepage.setHomepageProblems.Request.parse(req.body);
                await this.setHomepageProblems(req);
                res.sendStatus(204);
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'setHomepageProblems' unexpectedly threw \${error.constructor.name}.\` +
                        \` If this was intentional, please add \${error.constructor.name} to\` +
                        \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).json(\\"Internal Server Error\\");
                }
            }
            next();
        });
        return this.router;
    }
}
",
                    "name": "AbstractHomepageService.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { AbstractHomepageService } from \\"./AbstractHomepageService\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { AbstractHomepageService } from \\"./AbstractHomepageService\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                ],
                "name": "service",
                "type": "directory",
              },
            ],
            "name": "homepage",
            "type": "directory",
          },
          Object {
            "contents": "export * as commons from \\"./commons\\";
export * from \\"./commons/types\\";
export * as langServer from \\"./langServer\\";
export * from \\"./langServer/types\\";
export * as migration from \\"./migration\\";
export * from \\"./migration/types\\";
export * as playlist from \\"./playlist\\";
export * from \\"./playlist/types\\";
export * as problem from \\"./problem\\";
export * from \\"./problem/types\\";
export * as submission from \\"./submission\\";
export * from \\"./submission/types\\";
export * as v2 from \\"./v2\\";
export * as admin from \\"./admin\\";
export * from \\"./admin/service/requests\\";
export * from \\"./problem/service/requests\\";
export * as homepage from \\"./homepage\\";
export * as sysprop from \\"./sysprop\\";
export * from \\"./playlist/errors\\";
",
            "name": "index.d.ts",
            "type": "file",
          },
          Object {
            "contents": "export * as commons from \\"./commons\\";
export * from \\"./commons/types\\";
export * as langServer from \\"./langServer\\";
export * from \\"./langServer/types\\";
export * as migration from \\"./migration\\";
export * from \\"./migration/types\\";
export * as playlist from \\"./playlist\\";
export * from \\"./playlist/types\\";
export * as problem from \\"./problem\\";
export * from \\"./problem/types\\";
export * as submission from \\"./submission\\";
export * from \\"./submission/types\\";
export * as v2 from \\"./v2\\";
export * as admin from \\"./admin\\";
export * from \\"./admin/service/requests\\";
export * from \\"./problem/service/requests\\";
export * as homepage from \\"./homepage\\";
export * as sysprop from \\"./sysprop\\";
export * from \\"./playlist/errors\\";
",
            "name": "index.js",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./types\\";
",
                "name": "index.d.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./types\\";
",
                "name": "index.js",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface LangServerRequest {
    request?: unknown;
}
",
                    "name": "LangServerRequest.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "LangServerRequest.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface LangServerResponse {
    response?: unknown;
}
",
                    "name": "LangServerResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "LangServerResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./LangServerRequest\\";
export * from \\"./LangServerResponse\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./LangServerRequest\\";
export * from \\"./LangServerResponse\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "langServer",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./types\\";
export * from \\"./service\\";
",
                "name": "index.d.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./types\\";
export * from \\"./service\\";
",
                "name": "index.js",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import express from \\"express\\";
import { TraceApi } from \\"../../../..\\";
export declare abstract class AbstractMigrationService {
    private router;
    abstract getAttemptedMigrations(request: express.Request<never, TraceApi.Migration[], never, never>): Promise<TraceApi.Migration[]>;
    addMiddleware(handler: express.RequestHandler): this;
    toRouter(): express.Router;
}
",
                    "name": "AbstractMigrationService.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import express from \\"express\\";
import * as serializers from \\"../../../../serialization\\";
import * as errors from \\"../../../../errors\\";
export class AbstractMigrationService {
    router = express.Router({ mergeParams: true }).use(express.json());
    addMiddleware(handler) {
        this.router.use(handler);
        return this;
    }
    toRouter() {
        this.router.get(\\"/all\\", async (req, res, next) => {
            try {
                const response = await this.getAttemptedMigrations(req);
                res.json(await serializers.migration.getAttemptedMigrations.Response.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'getAttemptedMigrations' unexpectedly threw \${error.constructor.name}.\` +
                        \` If this was intentional, please add \${error.constructor.name} to\` +
                        \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).json(\\"Internal Server Error\\");
                }
            }
            next();
        });
        return this.router;
    }
}
",
                    "name": "AbstractMigrationService.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { AbstractMigrationService } from \\"./AbstractMigrationService\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { AbstractMigrationService } from \\"./AbstractMigrationService\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                ],
                "name": "service",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface Migration {
    name: string;
    status: TraceApi.MigrationStatus;
}
",
                    "name": "Migration.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "Migration.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export declare type MigrationStatus = \\"RUNNING\\" | \\"FAILED\\" | \\"FINISHED\\";
export declare const MigrationStatus: {
    readonly Running: \\"RUNNING\\";
    readonly Failed: \\"FAILED\\";
    readonly Finished: \\"FINISHED\\";
};
",
                    "name": "MigrationStatus.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export const MigrationStatus = {
    Running: \\"RUNNING\\",
    Failed: \\"FAILED\\",
    Finished: \\"FINISHED\\",
};
",
                    "name": "MigrationStatus.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./MigrationStatus\\";
export * from \\"./Migration\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./MigrationStatus\\";
export * from \\"./Migration\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "migration",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as errors from \\"../../../../errors\\";
import express from \\"express\\";
export declare class PlaylistIdNotFoundError extends errors.TraceApiError {
    constructor();
    send(res: express.Response): void;
}
",
                    "name": "PlaylistIdNotFoundError.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as errors from \\"../../../../errors\\";
export class PlaylistIdNotFoundError extends errors.TraceApiError {
    constructor() {
        super();
        Object.setPrototypeOf(this, PlaylistIdNotFoundError.prototype);
    }
    send(res) {
        res.sendStatus(404);
    }
}
",
                    "name": "PlaylistIdNotFoundError.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as errors from \\"../../../../errors\\";
import express from \\"express\\";
export declare class UnauthorizedError extends errors.TraceApiError {
    constructor();
    send(res: express.Response): void;
}
",
                    "name": "UnauthorizedError.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as errors from \\"../../../../errors\\";
export class UnauthorizedError extends errors.TraceApiError {
    constructor() {
        super();
        Object.setPrototypeOf(this, UnauthorizedError.prototype);
    }
    send(res) {
        res.sendStatus(401);
    }
}
",
                    "name": "UnauthorizedError.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./PlaylistIdNotFoundError\\";
export * from \\"./UnauthorizedError\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./PlaylistIdNotFoundError\\";
export * from \\"./UnauthorizedError\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                ],
                "name": "errors",
                "type": "directory",
              },
              Object {
                "contents": "export * from \\"./types\\";
export * from \\"./service\\";
export * from \\"./errors\\";
",
                "name": "index.d.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./types\\";
export * from \\"./service\\";
export * from \\"./errors\\";
",
                "name": "index.js",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import express from \\"express\\";
import { TraceApi } from \\"../../../..\\";
import * as serializers from \\"../../../../serialization\\";
export declare abstract class AbstractPlaylistService {
    private router;
    abstract createPlaylist(request: express.Request<{
        serviceParam: number;
    }, TraceApi.Playlist, TraceApi.PlaylistCreateRequest, {
        multiple: number;
        multipleOptional?: boolean | null;
    }>): Promise<TraceApi.Playlist>;
    abstract getPlaylists(request: express.Request<{
        serviceParam: number;
    }, TraceApi.Playlist[], never, {
        limit?: number | null;
        otherField: string;
    }>): Promise<TraceApi.Playlist[]>;
    abstract getPlaylist(request: express.Request<{
        serviceParam: number;
        playlistId: serializers.PlaylistId.Raw;
    }, TraceApi.Playlist, never, never>): Promise<TraceApi.Playlist>;
    abstract updatePlaylist(request: express.Request<{
        serviceParam: number;
        playlistId: serializers.PlaylistId.Raw;
    }, TraceApi.Playlist | undefined, TraceApi.UpdatePlaylistRequest | undefined, never>): Promise<TraceApi.Playlist | undefined>;
    abstract deletePlaylist(request: express.Request<{
        serviceParam: number;
        playlist_id: serializers.PlaylistId.Raw;
    }, never, never, never>): Promise<void>;
    addMiddleware(handler: express.RequestHandler): this;
    toRouter(): express.Router;
}
",
                    "name": "AbstractPlaylistService.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import express from \\"express\\";
import * as serializers from \\"../../../../serialization\\";
import * as errors from \\"../../../../errors\\";
export class AbstractPlaylistService {
    router = express.Router({ mergeParams: true }).use(express.json());
    addMiddleware(handler) {
        this.router.use(handler);
        return this;
    }
    toRouter() {
        this.router.post(\\"/create\\", async (req, res, next) => {
            try {
                req.body = await serializers.PlaylistCreateRequest.parse(req.body);
                const response = await this.createPlaylist(req);
                res.json(await serializers.Playlist.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'createPlaylist' unexpectedly threw \${error.constructor.name}.\` +
                        \` If this was intentional, please add \${error.constructor.name} to\` +
                        \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).json(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.get(\\"/all\\", async (req, res, next) => {
            try {
                const response = await this.getPlaylists(req);
                res.json(await serializers.playlist.getPlaylists.Response.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'getPlaylists' unexpectedly threw \${error.constructor.name}.\` +
                        \` If this was intentional, please add \${error.constructor.name} to\` +
                        \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).json(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.get(\\"/:playlistId\\", async (req, res, next) => {
            try {
                const response = await this.getPlaylist(req);
                res.json(await serializers.Playlist.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    switch (error.constructor.name) {
                        case \\"PlaylistIdNotFoundError\\":
                        case \\"UnauthorizedError\\":
                            break;
                        default:
                            console.warn(\`Endpoint 'getPlaylist' unexpectedly threw \${error.constructor.name}.\` +
                                \` If this was intentional, please add \${error.constructor.name} to\` +
                                \\" the endpoint's errors list in your Fern Definition.\\");
                    }
                    error.send(res);
                }
                else {
                    res.status(500).json(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.put(\\"/:playlistId\\", async (req, res, next) => {
            try {
                req.body = await serializers.playlist.updatePlaylist.Request.parse(req.body);
                const response = await this.updatePlaylist(req);
                res.json(await serializers.playlist.updatePlaylist.Response.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    switch (error.constructor.name) {
                        case \\"PlaylistIdNotFoundError\\":
                            break;
                        default:
                            console.warn(\`Endpoint 'updatePlaylist' unexpectedly threw \${error.constructor.name}.\` +
                                \` If this was intentional, please add \${error.constructor.name} to\` +
                                \\" the endpoint's errors list in your Fern Definition.\\");
                    }
                    error.send(res);
                }
                else {
                    res.status(500).json(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.delete(\\"/:playlist_id\\", async (req, res, next) => {
            try {
                await this.deletePlaylist(req);
                res.sendStatus(204);
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'deletePlaylist' unexpectedly threw \${error.constructor.name}.\` +
                        \` If this was intentional, please add \${error.constructor.name} to\` +
                        \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).json(\\"Internal Server Error\\");
                }
            }
            next();
        });
        return this.router;
    }
}
",
                    "name": "AbstractPlaylistService.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { AbstractPlaylistService } from \\"./AbstractPlaylistService\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { AbstractPlaylistService } from \\"./AbstractPlaylistService\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                ],
                "name": "service",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export declare type Color = \\"RED\\" | \\"BLUE\\";
export declare const Color: {
    readonly Red: \\"RED\\";
    readonly Blue: \\"BLUE\\";
};
",
                    "name": "Color.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export const Color = {
    Red: \\"RED\\",
    Blue: \\"BLUE\\",
};
",
                    "name": "Color.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export declare type DateUnion = TraceApi.DateUnion.Date_ | TraceApi.DateUnion.Datetime | TraceApi.DateUnion._Unknown;
export declare namespace DateUnion {
    interface Date_ extends _Utils {
        type: \\"date\\";
        value: TraceApi.Date;
    }
    interface Datetime extends _Utils {
        type: \\"datetime\\";
        value: Date;
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.DateUnion._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        date: (value: TraceApi.Date) => _Result;
        datetime: (value: Date) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const DateUnion: {
    readonly date: (value: TraceApi.Date) => TraceApi.DateUnion.Date_;
    readonly datetime: (value: Date) => TraceApi.DateUnion.Datetime;
    readonly _unknown: (value: {
        type: string;
    }) => TraceApi.DateUnion._Unknown;
    readonly _visit: <_Result>(value: TraceApi.DateUnion, visitor: TraceApi.DateUnion._Visitor<_Result>) => _Result;
};
",
                    "name": "DateUnion.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export const DateUnion = {
    date: (value) => {
        return {
            value: value,
            type: \\"date\\",
            _visit: function (visitor) {
                return TraceApi.DateUnion._visit(this, visitor);
            },
        };
    },
    datetime: (value) => {
        return {
            value: value,
            type: \\"datetime\\",
            _visit: function (visitor) {
                return TraceApi.DateUnion._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.DateUnion._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case \\"date\\":
                return visitor.date(value.value);
            case \\"datetime\\":
                return visitor.datetime(value.value);
            default:
                return visitor._other(value);
        }
    },
};
",
                    "name": "DateUnion.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
/**
 * @example
 *     {
 *         [TraceApi.Color.Red]: true
 *     }
 */
export declare type MapWithEnumKey = Record<TraceApi.Color, boolean | undefined>;
",
                    "name": "MapWithEnumKey.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "MapWithEnumKey.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
/**
 * @example
 *     {
 *         [TraceApi.Color.Red]: true
 *     }
 */
export declare type MapWithEnumKeyAndOptionalValue = Record<TraceApi.Color, boolean | undefined>;
",
                    "name": "MapWithEnumKeyAndOptionalValue.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "MapWithEnumKeyAndOptionalValue.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface Playlist extends TraceApi.PlaylistCreateRequest {
    playlistId: TraceApi.PlaylistId;
    ownerId: TraceApi.UserId;
}
",
                    "name": "Playlist.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "Playlist.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface PlaylistCreateRequest {
    name: string;
    problems: TraceApi.ProblemId[];
}
",
                    "name": "PlaylistCreateRequest.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "PlaylistCreateRequest.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export declare type PlaylistId = string;
",
                    "name": "PlaylistId.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "PlaylistId.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export declare type PlaylistIdNotFoundErrorBody = TraceApi.PlaylistIdNotFoundErrorBody.PlaylistId | TraceApi.PlaylistIdNotFoundErrorBody._Unknown;
export declare namespace PlaylistIdNotFoundErrorBody {
    interface PlaylistId extends _Utils {
        type: \\"playlistId\\";
        value: TraceApi.PlaylistId;
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.PlaylistIdNotFoundErrorBody._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        playlistId: (value: TraceApi.PlaylistId) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const PlaylistIdNotFoundErrorBody: {
    readonly playlistId: (value: TraceApi.PlaylistId) => TraceApi.PlaylistIdNotFoundErrorBody.PlaylistId;
    readonly _unknown: (value: {
        type: string;
    }) => TraceApi.PlaylistIdNotFoundErrorBody._Unknown;
    readonly _visit: <_Result>(value: TraceApi.PlaylistIdNotFoundErrorBody, visitor: TraceApi.PlaylistIdNotFoundErrorBody._Visitor<_Result>) => _Result;
};
",
                    "name": "PlaylistIdNotFoundErrorBody.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export const PlaylistIdNotFoundErrorBody = {
    playlistId: (value) => {
        return {
            value: value,
            type: \\"playlistId\\",
            _visit: function (visitor) {
                return TraceApi.PlaylistIdNotFoundErrorBody._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.PlaylistIdNotFoundErrorBody._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case \\"playlistId\\":
                return visitor.playlistId(value.value);
            default:
                return visitor._other(value);
        }
    },
};
",
                    "name": "PlaylistIdNotFoundErrorBody.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export declare type ReservedKeywordEnum = \\"is\\" | \\"as\\" | \\"date\\";
export declare const ReservedKeywordEnum: {
    readonly Is: \\"is\\";
    readonly As: \\"as\\";
    readonly Date: \\"date\\";
};
",
                    "name": "ReservedKeywordEnum.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export const ReservedKeywordEnum = {
    Is: \\"is\\",
    As: \\"as\\",
    Date: \\"date\\",
};
",
                    "name": "ReservedKeywordEnum.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface UpdatePlaylistRequest {
    name: string;
    problems: TraceApi.ProblemId[];
}
",
                    "name": "UpdatePlaylistRequest.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "UpdatePlaylistRequest.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./PlaylistId\\";
export * from \\"./Playlist\\";
export * from \\"./PlaylistCreateRequest\\";
export * from \\"./UpdatePlaylistRequest\\";
export * from \\"./PlaylistIdNotFoundErrorBody\\";
export * from \\"./DateUnion\\";
export * from \\"./ReservedKeywordEnum\\";
export * from \\"./MapWithEnumKey\\";
export * from \\"./MapWithEnumKeyAndOptionalValue\\";
export * from \\"./Color\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./PlaylistId\\";
export * from \\"./Playlist\\";
export * from \\"./PlaylistCreateRequest\\";
export * from \\"./UpdatePlaylistRequest\\";
export * from \\"./PlaylistIdNotFoundErrorBody\\";
export * from \\"./DateUnion\\";
export * from \\"./ReservedKeywordEnum\\";
export * from \\"./MapWithEnumKey\\";
export * from \\"./MapWithEnumKeyAndOptionalValue\\";
export * from \\"./Color\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "playlist",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./types\\";
export * from \\"./service\\";
",
                "name": "index.d.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./types\\";
export * from \\"./service\\";
",
                "name": "index.js",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import express from \\"express\\";
import { TraceApi } from \\"../../../..\\";
import * as serializers from \\"../../../../serialization\\";
export declare abstract class AbstractProblemService {
    private router;
    abstract createProblem(request: express.Request<never, TraceApi.CreateProblemResponse, TraceApi.CreateProblemRequest, never>): Promise<TraceApi.CreateProblemResponse>;
    abstract updateProblem(request: express.Request<{
        problemId: serializers.ProblemId.Raw;
    }, TraceApi.UpdateProblemResponse, TraceApi.CreateProblemRequest, never>): Promise<TraceApi.UpdateProblemResponse>;
    abstract deleteProblem(request: express.Request<{
        problemId: serializers.ProblemId.Raw;
    }, never, never, never>): Promise<void>;
    abstract getDefaultStarterFiles(request: express.Request<never, TraceApi.GetDefaultStarterFilesResponse, TraceApi.GetDefaultStarterFilesRequest, never>): Promise<TraceApi.GetDefaultStarterFilesResponse>;
    addMiddleware(handler: express.RequestHandler): this;
    toRouter(): express.Router;
}
",
                    "name": "AbstractProblemService.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import express from \\"express\\";
import * as serializers from \\"../../../../serialization\\";
import * as errors from \\"../../../../errors\\";
export class AbstractProblemService {
    router = express.Router({ mergeParams: true }).use(express.json());
    addMiddleware(handler) {
        this.router.use(handler);
        return this;
    }
    toRouter() {
        this.router.post(\\"/create\\", async (req, res, next) => {
            try {
                req.body = await serializers.CreateProblemRequest.parse(req.body);
                const response = await this.createProblem(req);
                res.json(await serializers.CreateProblemResponse.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'createProblem' unexpectedly threw \${error.constructor.name}.\` +
                        \` If this was intentional, please add \${error.constructor.name} to\` +
                        \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).json(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.post(\\"/update/:problemId\\", async (req, res, next) => {
            try {
                req.body = await serializers.CreateProblemRequest.parse(req.body);
                const response = await this.updateProblem(req);
                res.json(await serializers.UpdateProblemResponse.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'updateProblem' unexpectedly threw \${error.constructor.name}.\` +
                        \` If this was intentional, please add \${error.constructor.name} to\` +
                        \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).json(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.delete(\\"/delete/:problemId\\", async (req, res, next) => {
            try {
                await this.deleteProblem(req);
                res.sendStatus(204);
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'deleteProblem' unexpectedly threw \${error.constructor.name}.\` +
                        \` If this was intentional, please add \${error.constructor.name} to\` +
                        \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).json(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.post(\\"/default-starter-files\\", async (req, res, next) => {
            try {
                req.body = await serializers.GetDefaultStarterFilesRequest.parse(req.body);
                const response = await this.getDefaultStarterFiles(req);
                res.json(await serializers.GetDefaultStarterFilesResponse.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'getDefaultStarterFiles' unexpectedly threw \${error.constructor.name}.\` +
                        \` If this was intentional, please add \${error.constructor.name} to\` +
                        \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).json(\\"Internal Server Error\\");
                }
            }
            next();
        });
        return this.router;
    }
}
",
                    "name": "AbstractProblemService.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./requests\\";
export { AbstractProblemService } from \\"./AbstractProblemService\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./requests\\";
export { AbstractProblemService } from \\"./AbstractProblemService\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../..\\";
export interface GetDefaultStarterFilesRequest {
    inputParams: TraceApi.VariableTypeAndName[];
    outputType: TraceApi.VariableType;
    methodName: string;
}
",
                        "name": "GetDefaultStarterFilesRequest.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                        "name": "GetDefaultStarterFilesRequest.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { GetDefaultStarterFilesRequest } from \\"./GetDefaultStarterFilesRequest\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export {};
",
                        "name": "index.js",
                        "type": "file",
                      },
                    ],
                    "name": "requests",
                    "type": "directory",
                  },
                ],
                "name": "service",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export declare type CreateProblemError = TraceApi.CreateProblemError.Generic | TraceApi.CreateProblemError._Unknown;
export declare namespace CreateProblemError {
    interface Generic extends TraceApi.GenericCreateProblemError, _Utils {
        errorType: \\"generic\\";
    }
    interface _Unknown extends _Utils {
        errorType: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.CreateProblemError._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        generic: (value: TraceApi.GenericCreateProblemError) => _Result;
        _other: (value: {
            errorType: string;
        }) => _Result;
    }
}
export declare const CreateProblemError: {
    readonly generic: (value: TraceApi.GenericCreateProblemError) => TraceApi.CreateProblemError.Generic;
    readonly _unknown: (value: {
        errorType: string;
    }) => TraceApi.CreateProblemError._Unknown;
    readonly _visit: <_Result>(value: TraceApi.CreateProblemError, visitor: TraceApi.CreateProblemError._Visitor<_Result>) => _Result;
};
",
                    "name": "CreateProblemError.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export const CreateProblemError = {
    generic: (value) => {
        return {
            ...value,
            errorType: \\"generic\\",
            _visit: function (visitor) {
                return TraceApi.CreateProblemError._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.CreateProblemError._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.errorType) {
            case \\"generic\\":
                return visitor.generic(value);
            default:
                return visitor._other(value);
        }
    },
};
",
                    "name": "CreateProblemError.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface CreateProblemRequest {
    problemName: string;
    problemDescription: TraceApi.ProblemDescription;
    files: Record<TraceApi.Language, TraceApi.ProblemFiles | undefined>;
    inputParams: TraceApi.VariableTypeAndName[];
    outputType: TraceApi.VariableType;
    testcases: TraceApi.TestCaseWithExpectedResult[];
    methodName: string;
}
",
                    "name": "CreateProblemRequest.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "CreateProblemRequest.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export declare type CreateProblemResponse = TraceApi.CreateProblemResponse.Success | TraceApi.CreateProblemResponse.Error_ | TraceApi.CreateProblemResponse._Unknown;
export declare namespace CreateProblemResponse {
    interface Success extends _Utils {
        type: \\"success\\";
        value: TraceApi.ProblemId;
    }
    interface Error_ extends _Utils {
        type: \\"error\\";
        value: TraceApi.CreateProblemError;
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.CreateProblemResponse._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        success: (value: TraceApi.ProblemId) => _Result;
        error: (value: TraceApi.CreateProblemError) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const CreateProblemResponse: {
    readonly success: (value: TraceApi.ProblemId) => TraceApi.CreateProblemResponse.Success;
    readonly error: (value: TraceApi.CreateProblemError) => TraceApi.CreateProblemResponse.Error_;
    readonly _unknown: (value: {
        type: string;
    }) => TraceApi.CreateProblemResponse._Unknown;
    readonly _visit: <_Result>(value: TraceApi.CreateProblemResponse, visitor: TraceApi.CreateProblemResponse._Visitor<_Result>) => _Result;
};
",
                    "name": "CreateProblemResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export const CreateProblemResponse = {
    success: (value) => {
        return {
            value: value,
            type: \\"success\\",
            _visit: function (visitor) {
                return TraceApi.CreateProblemResponse._visit(this, visitor);
            },
        };
    },
    error: (value) => {
        return {
            value: value,
            type: \\"error\\",
            _visit: function (visitor) {
                return TraceApi.CreateProblemResponse._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.CreateProblemResponse._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case \\"success\\":
                return visitor.success(value.value);
            case \\"error\\":
                return visitor.error(value.value);
            default:
                return visitor._other(value);
        }
    },
};
",
                    "name": "CreateProblemResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface GenericCreateProblemError {
    message: string;
    type: string;
    stacktrace: string;
}
",
                    "name": "GenericCreateProblemError.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "GenericCreateProblemError.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface GetDefaultStarterFilesResponse {
    files: Record<TraceApi.Language, TraceApi.ProblemFiles | undefined>;
}
",
                    "name": "GetDefaultStarterFilesResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "GetDefaultStarterFilesResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface ProblemDescription {
    boards: TraceApi.ProblemDescriptionBoard[];
}
",
                    "name": "ProblemDescription.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "ProblemDescription.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
/**
 * @example
 *     TraceApi.ProblemDescriptionBoard.html(\\"<div>hello world</div>\\")
 *
 * @example
 *     TraceApi.ProblemDescriptionBoard.testCaseId(\\"test-case-id-1\\")
 */
export declare type ProblemDescriptionBoard = TraceApi.ProblemDescriptionBoard.Html | TraceApi.ProblemDescriptionBoard.Variable | TraceApi.ProblemDescriptionBoard.TestCaseId | TraceApi.ProblemDescriptionBoard._Unknown;
export declare namespace ProblemDescriptionBoard {
    interface Html extends _Utils {
        type: \\"html\\";
        value: string;
    }
    interface Variable extends _Utils {
        type: \\"variable\\";
        value: TraceApi.VariableValue;
    }
    interface TestCaseId extends _Utils {
        type: \\"testCaseId\\";
        value: string;
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.ProblemDescriptionBoard._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        html: (value: string) => _Result;
        variable: (value: TraceApi.VariableValue) => _Result;
        testCaseId: (value: string) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const ProblemDescriptionBoard: {
    readonly html: (value: string) => TraceApi.ProblemDescriptionBoard.Html;
    readonly variable: (value: TraceApi.VariableValue) => TraceApi.ProblemDescriptionBoard.Variable;
    readonly testCaseId: (value: string) => TraceApi.ProblemDescriptionBoard.TestCaseId;
    readonly _unknown: (value: {
        type: string;
    }) => TraceApi.ProblemDescriptionBoard._Unknown;
    readonly _visit: <_Result>(value: TraceApi.ProblemDescriptionBoard, visitor: TraceApi.ProblemDescriptionBoard._Visitor<_Result>) => _Result;
};
",
                    "name": "ProblemDescriptionBoard.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export const ProblemDescriptionBoard = {
    html: (value) => {
        return {
            value: value,
            type: \\"html\\",
            _visit: function (visitor) {
                return TraceApi.ProblemDescriptionBoard._visit(this, visitor);
            },
        };
    },
    variable: (value) => {
        return {
            value: value,
            type: \\"variable\\",
            _visit: function (visitor) {
                return TraceApi.ProblemDescriptionBoard._visit(this, visitor);
            },
        };
    },
    testCaseId: (value) => {
        return {
            value: value,
            type: \\"testCaseId\\",
            _visit: function (visitor) {
                return TraceApi.ProblemDescriptionBoard._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.ProblemDescriptionBoard._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case \\"html\\":
                return visitor.html(value.value);
            case \\"variable\\":
                return visitor.variable(value.value);
            case \\"testCaseId\\":
                return visitor.testCaseId(value.value);
            default:
                return visitor._other(value);
        }
    },
};
",
                    "name": "ProblemDescriptionBoard.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
/**
 * @example
 *     {
 *         solutionFile: {
 *             filename: \\"hello.txt\\",
 *             contents: \\"I'm some file content\\"
 *         },
 *         readOnlyFiles: []
 *     }
 */
export interface ProblemFiles {
    solutionFile: TraceApi.FileInfo;
    readOnlyFiles: TraceApi.FileInfo[];
}
",
                    "name": "ProblemFiles.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "ProblemFiles.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface ProblemInfo {
    problemId: TraceApi.ProblemId;
    problemDescription: TraceApi.ProblemDescription;
    problemName: string;
    problemVersion: number;
    files: Record<TraceApi.Language, TraceApi.ProblemFiles | undefined>;
    inputParams: TraceApi.VariableTypeAndName[];
    outputType: TraceApi.VariableType;
    testcases: TraceApi.TestCaseWithExpectedResult[];
    methodName: string;
    supportsCustomTestCases: boolean;
}
",
                    "name": "ProblemInfo.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "ProblemInfo.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface ProblemsMap {
    problemsById: Record<TraceApi.ProblemId, TraceApi.ProblemInfo>;
}
",
                    "name": "ProblemsMap.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "ProblemsMap.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface UpdateProblemResponse {
    problemVersion: number;
}
",
                    "name": "UpdateProblemResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "UpdateProblemResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface VariableTypeAndName {
    variableType: TraceApi.VariableType;
    name: string;
}
",
                    "name": "VariableTypeAndName.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "VariableTypeAndName.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./ProblemInfo\\";
export * from \\"./ProblemsMap\\";
export * from \\"./ProblemDescription\\";
export * from \\"./ProblemDescriptionBoard\\";
export * from \\"./ProblemFiles\\";
export * from \\"./VariableTypeAndName\\";
export * from \\"./CreateProblemRequest\\";
export * from \\"./CreateProblemResponse\\";
export * from \\"./UpdateProblemResponse\\";
export * from \\"./CreateProblemError\\";
export * from \\"./GenericCreateProblemError\\";
export * from \\"./GetDefaultStarterFilesResponse\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./ProblemInfo\\";
export * from \\"./ProblemsMap\\";
export * from \\"./ProblemDescription\\";
export * from \\"./ProblemDescriptionBoard\\";
export * from \\"./ProblemFiles\\";
export * from \\"./VariableTypeAndName\\";
export * from \\"./CreateProblemRequest\\";
export * from \\"./CreateProblemResponse\\";
export * from \\"./UpdateProblemResponse\\";
export * from \\"./CreateProblemError\\";
export * from \\"./GenericCreateProblemError\\";
export * from \\"./GetDefaultStarterFilesResponse\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "problem",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./types\\";
export * from \\"./service\\";
",
                "name": "index.d.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./types\\";
export * from \\"./service\\";
",
                "name": "index.js",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import express from \\"express\\";
import * as serializers from \\"../../../../serialization\\";
import { TraceApi } from \\"../../../..\\";
/**
 * Responsible for spinning up and spinning down execution.
 */
export declare abstract class AbstractSubmissionService {
    private router;
    abstract createExecutionSession(request: express.Request<{
        language: serializers.Language.Raw;
    }, TraceApi.ExecutionSessionResponse, never, never>): Promise<TraceApi.ExecutionSessionResponse>;
    abstract getExecutionSession(request: express.Request<{
        sessionId: string;
    }, TraceApi.ExecutionSessionResponse | undefined, never, never>): Promise<TraceApi.ExecutionSessionResponse | undefined>;
    abstract stopExecutionSession(request: express.Request<{
        sessionId: string;
    }, never, never, never>): Promise<void>;
    abstract getExecutionSessionsState(request: express.Request<never, TraceApi.GetExecutionSessionStateResponse, never, never>): Promise<TraceApi.GetExecutionSessionStateResponse>;
    addMiddleware(handler: express.RequestHandler): this;
    toRouter(): express.Router;
}
",
                    "name": "AbstractSubmissionService.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import express from \\"express\\";
import * as serializers from \\"../../../../serialization\\";
import * as errors from \\"../../../../errors\\";
/**
 * Responsible for spinning up and spinning down execution.
 */
export class AbstractSubmissionService {
    router = express.Router({ mergeParams: true }).use(express.json());
    addMiddleware(handler) {
        this.router.use(handler);
        return this;
    }
    toRouter() {
        this.router.post(\\"/create-session/:language\\", async (req, res, next) => {
            try {
                const response = await this.createExecutionSession(req);
                res.json(await serializers.ExecutionSessionResponse.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'createExecutionSession' unexpectedly threw \${error.constructor.name}.\` +
                        \` If this was intentional, please add \${error.constructor.name} to\` +
                        \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).json(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.get(\\"/:sessionId\\", async (req, res, next) => {
            try {
                const response = await this.getExecutionSession(req);
                res.json(await serializers.submission.getExecutionSession.Response.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'getExecutionSession' unexpectedly threw \${error.constructor.name}.\` +
                        \` If this was intentional, please add \${error.constructor.name} to\` +
                        \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).json(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.delete(\\"/stop/:sessionId\\", async (req, res, next) => {
            try {
                await this.stopExecutionSession(req);
                res.sendStatus(204);
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'stopExecutionSession' unexpectedly threw \${error.constructor.name}.\` +
                        \` If this was intentional, please add \${error.constructor.name} to\` +
                        \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).json(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.get(\\"/execution-sessions-state\\", async (req, res, next) => {
            try {
                const response = await this.getExecutionSessionsState(req);
                res.json(await serializers.GetExecutionSessionStateResponse.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'getExecutionSessionsState' unexpectedly threw \${error.constructor.name}.\` +
                        \` If this was intentional, please add \${error.constructor.name} to\` +
                        \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).json(\\"Internal Server Error\\");
                }
            }
            next();
        });
        return this.router;
    }
}
",
                    "name": "AbstractSubmissionService.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { AbstractSubmissionService } from \\"./AbstractSubmissionService\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { AbstractSubmissionService } from \\"./AbstractSubmissionService\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                ],
                "name": "service",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export declare type ActualResult = TraceApi.ActualResult.Value | TraceApi.ActualResult.Exception | TraceApi.ActualResult.ExceptionV2 | TraceApi.ActualResult._Unknown;
export declare namespace ActualResult {
    interface Value extends _Utils {
        type: \\"value\\";
        value: TraceApi.VariableValue;
    }
    interface Exception extends TraceApi.ExceptionInfo, _Utils {
        type: \\"exception\\";
    }
    interface ExceptionV2 extends _Utils {
        type: \\"exceptionV2\\";
        value: TraceApi.ExceptionV2;
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.ActualResult._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        value: (value: TraceApi.VariableValue) => _Result;
        exception: (value: TraceApi.ExceptionInfo) => _Result;
        exceptionV2: (value: TraceApi.ExceptionV2) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const ActualResult: {
    readonly value: (value: TraceApi.VariableValue) => TraceApi.ActualResult.Value;
    readonly exception: (value: TraceApi.ExceptionInfo) => TraceApi.ActualResult.Exception;
    readonly exceptionV2: (value: TraceApi.ExceptionV2) => TraceApi.ActualResult.ExceptionV2;
    readonly _unknown: (value: {
        type: string;
    }) => TraceApi.ActualResult._Unknown;
    readonly _visit: <_Result>(value: TraceApi.ActualResult, visitor: TraceApi.ActualResult._Visitor<_Result>) => _Result;
};
",
                    "name": "ActualResult.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export const ActualResult = {
    value: (value) => {
        return {
            value: value,
            type: \\"value\\",
            _visit: function (visitor) {
                return TraceApi.ActualResult._visit(this, visitor);
            },
        };
    },
    exception: (value) => {
        return {
            ...value,
            type: \\"exception\\",
            _visit: function (visitor) {
                return TraceApi.ActualResult._visit(this, visitor);
            },
        };
    },
    exceptionV2: (value) => {
        return {
            value: value,
            type: \\"exceptionV2\\",
            _visit: function (visitor) {
                return TraceApi.ActualResult._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.ActualResult._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case \\"value\\":
                return visitor.value(value.value);
            case \\"exception\\":
                return visitor.exception(value);
            case \\"exceptionV2\\":
                return visitor.exceptionV2(value.value);
            default:
                return visitor._other(value);
        }
    },
};
",
                    "name": "ActualResult.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface BuildingExecutorResponse {
    submissionId: TraceApi.SubmissionId;
    status: TraceApi.ExecutionSessionStatus;
}
",
                    "name": "BuildingExecutorResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "BuildingExecutorResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export declare type CodeExecutionUpdate = 
/**
 * Statuses if an executor for the session isn't ready (Before RunningResponse). */
TraceApi.CodeExecutionUpdate.BuildingExecutor
/**
 * Sent once a test submission is executing. */
 | TraceApi.CodeExecutionUpdate.Running
/**
 * Sent if a submission cannot be run (i.e. Compile Error). */
 | TraceApi.CodeExecutionUpdate.Errored
/**
 * Sent if a submission is stopped. */
 | TraceApi.CodeExecutionUpdate.Stopped
/**
 * Graded testcases without trace information. */
 | TraceApi.CodeExecutionUpdate.Graded
/**
 * Graded submission for v2 problems. */
 | TraceApi.CodeExecutionUpdate.GradedV2
/**
 * Workspace run without trace information. */
 | TraceApi.CodeExecutionUpdate.WorkspaceRan
/**
 * Gives progress about what is being recorded. */
 | TraceApi.CodeExecutionUpdate.Recording
/**
 * Graded testcases with trace information. */
 | TraceApi.CodeExecutionUpdate.Recorded
/**
 * Sent if an invalid request is sent for a submission. */
 | TraceApi.CodeExecutionUpdate.InvalidRequest
/**
 * Sent once a submission is graded and fully recorded. */
 | TraceApi.CodeExecutionUpdate.Finished | TraceApi.CodeExecutionUpdate._Unknown;
export declare namespace CodeExecutionUpdate {
    interface BuildingExecutor extends TraceApi.BuildingExecutorResponse, _Utils {
        type: \\"buildingExecutor\\";
    }
    interface Running extends TraceApi.RunningResponse, _Utils {
        type: \\"running\\";
    }
    interface Errored extends TraceApi.ErroredResponse, _Utils {
        type: \\"errored\\";
    }
    interface Stopped extends TraceApi.StoppedResponse, _Utils {
        type: \\"stopped\\";
    }
    interface Graded extends TraceApi.GradedResponse, _Utils {
        type: \\"graded\\";
    }
    interface GradedV2 extends TraceApi.GradedResponseV2, _Utils {
        type: \\"gradedV2\\";
    }
    interface WorkspaceRan extends TraceApi.WorkspaceRanResponse, _Utils {
        type: \\"workspaceRan\\";
    }
    interface Recording extends TraceApi.RecordingResponseNotification, _Utils {
        type: \\"recording\\";
    }
    interface Recorded extends TraceApi.RecordedResponseNotification, _Utils {
        type: \\"recorded\\";
    }
    interface InvalidRequest extends TraceApi.InvalidRequestResponse, _Utils {
        type: \\"invalidRequest\\";
    }
    interface Finished extends TraceApi.FinishedResponse, _Utils {
        type: \\"finished\\";
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.CodeExecutionUpdate._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        buildingExecutor: (value: TraceApi.BuildingExecutorResponse) => _Result;
        running: (value: TraceApi.RunningResponse) => _Result;
        errored: (value: TraceApi.ErroredResponse) => _Result;
        stopped: (value: TraceApi.StoppedResponse) => _Result;
        graded: (value: TraceApi.GradedResponse) => _Result;
        gradedV2: (value: TraceApi.GradedResponseV2) => _Result;
        workspaceRan: (value: TraceApi.WorkspaceRanResponse) => _Result;
        recording: (value: TraceApi.RecordingResponseNotification) => _Result;
        recorded: (value: TraceApi.RecordedResponseNotification) => _Result;
        invalidRequest: (value: TraceApi.InvalidRequestResponse) => _Result;
        finished: (value: TraceApi.FinishedResponse) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const CodeExecutionUpdate: {
    readonly buildingExecutor: (value: TraceApi.BuildingExecutorResponse) => TraceApi.CodeExecutionUpdate.BuildingExecutor;
    readonly running: (value: TraceApi.RunningResponse) => TraceApi.CodeExecutionUpdate.Running;
    readonly errored: (value: TraceApi.ErroredResponse) => TraceApi.CodeExecutionUpdate.Errored;
    readonly stopped: (value: TraceApi.StoppedResponse) => TraceApi.CodeExecutionUpdate.Stopped;
    readonly graded: (value: TraceApi.GradedResponse) => TraceApi.CodeExecutionUpdate.Graded;
    readonly gradedV2: (value: TraceApi.GradedResponseV2) => TraceApi.CodeExecutionUpdate.GradedV2;
    readonly workspaceRan: (value: TraceApi.WorkspaceRanResponse) => TraceApi.CodeExecutionUpdate.WorkspaceRan;
    readonly recording: (value: TraceApi.RecordingResponseNotification) => TraceApi.CodeExecutionUpdate.Recording;
    readonly recorded: (value: TraceApi.RecordedResponseNotification) => TraceApi.CodeExecutionUpdate.Recorded;
    readonly invalidRequest: (value: TraceApi.InvalidRequestResponse) => TraceApi.CodeExecutionUpdate.InvalidRequest;
    readonly finished: (value: TraceApi.FinishedResponse) => TraceApi.CodeExecutionUpdate.Finished;
    readonly _unknown: (value: {
        type: string;
    }) => TraceApi.CodeExecutionUpdate._Unknown;
    readonly _visit: <_Result>(value: TraceApi.CodeExecutionUpdate, visitor: TraceApi.CodeExecutionUpdate._Visitor<_Result>) => _Result;
};
",
                    "name": "CodeExecutionUpdate.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export const CodeExecutionUpdate = {
    buildingExecutor: (value) => {
        return {
            ...value,
            type: \\"buildingExecutor\\",
            _visit: function (visitor) {
                return TraceApi.CodeExecutionUpdate._visit(this, visitor);
            },
        };
    },
    running: (value) => {
        return {
            ...value,
            type: \\"running\\",
            _visit: function (visitor) {
                return TraceApi.CodeExecutionUpdate._visit(this, visitor);
            },
        };
    },
    errored: (value) => {
        return {
            ...value,
            type: \\"errored\\",
            _visit: function (visitor) {
                return TraceApi.CodeExecutionUpdate._visit(this, visitor);
            },
        };
    },
    stopped: (value) => {
        return {
            ...value,
            type: \\"stopped\\",
            _visit: function (visitor) {
                return TraceApi.CodeExecutionUpdate._visit(this, visitor);
            },
        };
    },
    graded: (value) => {
        return {
            ...value,
            type: \\"graded\\",
            _visit: function (visitor) {
                return TraceApi.CodeExecutionUpdate._visit(this, visitor);
            },
        };
    },
    gradedV2: (value) => {
        return {
            ...value,
            type: \\"gradedV2\\",
            _visit: function (visitor) {
                return TraceApi.CodeExecutionUpdate._visit(this, visitor);
            },
        };
    },
    workspaceRan: (value) => {
        return {
            ...value,
            type: \\"workspaceRan\\",
            _visit: function (visitor) {
                return TraceApi.CodeExecutionUpdate._visit(this, visitor);
            },
        };
    },
    recording: (value) => {
        return {
            ...value,
            type: \\"recording\\",
            _visit: function (visitor) {
                return TraceApi.CodeExecutionUpdate._visit(this, visitor);
            },
        };
    },
    recorded: (value) => {
        return {
            ...value,
            type: \\"recorded\\",
            _visit: function (visitor) {
                return TraceApi.CodeExecutionUpdate._visit(this, visitor);
            },
        };
    },
    invalidRequest: (value) => {
        return {
            ...value,
            type: \\"invalidRequest\\",
            _visit: function (visitor) {
                return TraceApi.CodeExecutionUpdate._visit(this, visitor);
            },
        };
    },
    finished: (value) => {
        return {
            ...value,
            type: \\"finished\\",
            _visit: function (visitor) {
                return TraceApi.CodeExecutionUpdate._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.CodeExecutionUpdate._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case \\"buildingExecutor\\":
                return visitor.buildingExecutor(value);
            case \\"running\\":
                return visitor.running(value);
            case \\"errored\\":
                return visitor.errored(value);
            case \\"stopped\\":
                return visitor.stopped(value);
            case \\"graded\\":
                return visitor.graded(value);
            case \\"gradedV2\\":
                return visitor.gradedV2(value);
            case \\"workspaceRan\\":
                return visitor.workspaceRan(value);
            case \\"recording\\":
                return visitor.recording(value);
            case \\"recorded\\":
                return visitor.recorded(value);
            case \\"invalidRequest\\":
                return visitor.invalidRequest(value);
            case \\"finished\\":
                return visitor.finished(value);
            default:
                return visitor._other(value);
        }
    },
};
",
                    "name": "CodeExecutionUpdate.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface CompileError {
    message: string;
}
",
                    "name": "CompileError.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "CompileError.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface CustomTestCasesUnsupported {
    problemId: TraceApi.ProblemId;
    submissionId: TraceApi.SubmissionId;
}
",
                    "name": "CustomTestCasesUnsupported.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "CustomTestCasesUnsupported.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export declare type ErrorInfo = TraceApi.ErrorInfo.CompileError
/**
 * If the submission cannot be executed and throws a runtime error before getting to any of the testcases.
 *  */
 | TraceApi.ErrorInfo.RuntimeError
/**
 * If the trace backend encounters an unexpected error.
 *  */
 | TraceApi.ErrorInfo.InternalError | TraceApi.ErrorInfo._Unknown;
export declare namespace ErrorInfo {
    interface CompileError extends TraceApi.CompileError, _Utils {
        type: \\"compileError\\";
    }
    interface RuntimeError extends TraceApi.RuntimeError, _Utils {
        type: \\"runtimeError\\";
    }
    interface InternalError extends TraceApi.InternalError, _Utils {
        type: \\"internalError\\";
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.ErrorInfo._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        compileError: (value: TraceApi.CompileError) => _Result;
        runtimeError: (value: TraceApi.RuntimeError) => _Result;
        internalError: (value: TraceApi.InternalError) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const ErrorInfo: {
    readonly compileError: (value: TraceApi.CompileError) => TraceApi.ErrorInfo.CompileError;
    readonly runtimeError: (value: TraceApi.RuntimeError) => TraceApi.ErrorInfo.RuntimeError;
    readonly internalError: (value: TraceApi.InternalError) => TraceApi.ErrorInfo.InternalError;
    readonly _unknown: (value: {
        type: string;
    }) => TraceApi.ErrorInfo._Unknown;
    readonly _visit: <_Result>(value: TraceApi.ErrorInfo, visitor: TraceApi.ErrorInfo._Visitor<_Result>) => _Result;
};
",
                    "name": "ErrorInfo.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export const ErrorInfo = {
    compileError: (value) => {
        return {
            ...value,
            type: \\"compileError\\",
            _visit: function (visitor) {
                return TraceApi.ErrorInfo._visit(this, visitor);
            },
        };
    },
    runtimeError: (value) => {
        return {
            ...value,
            type: \\"runtimeError\\",
            _visit: function (visitor) {
                return TraceApi.ErrorInfo._visit(this, visitor);
            },
        };
    },
    internalError: (value) => {
        return {
            ...value,
            type: \\"internalError\\",
            _visit: function (visitor) {
                return TraceApi.ErrorInfo._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.ErrorInfo._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case \\"compileError\\":
                return visitor.compileError(value);
            case \\"runtimeError\\":
                return visitor.runtimeError(value);
            case \\"internalError\\":
                return visitor.internalError(value);
            default:
                return visitor._other(value);
        }
    },
};
",
                    "name": "ErrorInfo.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface ErroredResponse {
    submissionId: TraceApi.SubmissionId;
    errorInfo: TraceApi.ErrorInfo;
}
",
                    "name": "ErroredResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "ErroredResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface ExceptionInfo {
    exceptionType: string;
    exceptionMessage: string;
    exceptionStacktrace: string;
}
",
                    "name": "ExceptionInfo.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "ExceptionInfo.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export declare type ExceptionV2 = TraceApi.ExceptionV2.Generic | TraceApi.ExceptionV2.Timeout | TraceApi.ExceptionV2._Unknown;
export declare namespace ExceptionV2 {
    interface Generic extends TraceApi.ExceptionInfo, _Utils {
        type: \\"generic\\";
    }
    interface Timeout extends _Utils {
        type: \\"timeout\\";
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.ExceptionV2._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        generic: (value: TraceApi.ExceptionInfo) => _Result;
        timeout: () => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const ExceptionV2: {
    readonly generic: (value: TraceApi.ExceptionInfo) => TraceApi.ExceptionV2.Generic;
    readonly timeout: () => TraceApi.ExceptionV2.Timeout;
    readonly _unknown: (value: {
        type: string;
    }) => TraceApi.ExceptionV2._Unknown;
    readonly _visit: <_Result>(value: TraceApi.ExceptionV2, visitor: TraceApi.ExceptionV2._Visitor<_Result>) => _Result;
};
",
                    "name": "ExceptionV2.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export const ExceptionV2 = {
    generic: (value) => {
        return {
            ...value,
            type: \\"generic\\",
            _visit: function (visitor) {
                return TraceApi.ExceptionV2._visit(this, visitor);
            },
        };
    },
    timeout: () => {
        return {
            type: \\"timeout\\",
            _visit: function (visitor) {
                return TraceApi.ExceptionV2._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.ExceptionV2._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case \\"generic\\":
                return visitor.generic(value);
            case \\"timeout\\":
                return visitor.timeout();
            default:
                return visitor._other(value);
        }
    },
};
",
                    "name": "ExceptionV2.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface ExecutionSessionResponse {
    sessionId: string;
    executionSessionUrl?: string;
    language: TraceApi.Language;
    status: TraceApi.ExecutionSessionStatus;
}
",
                    "name": "ExecutionSessionResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "ExecutionSessionResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface ExecutionSessionState {
    lastTimeContacted?: string;
    sessionId: string;
    isWarmInstance: boolean;
    awsTaskId?: string;
    language: TraceApi.Language;
    status: TraceApi.ExecutionSessionStatus;
}
",
                    "name": "ExecutionSessionState.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "ExecutionSessionState.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export declare type ExecutionSessionStatus = \\"CREATING_CONTAINER\\" | \\"PROVISIONING_CONTAINER\\" | \\"PENDING_CONTAINER\\" | \\"RUNNING_CONTAINER\\" | \\"LIVE_CONTAINER\\" | \\"FAILED_TO_LAUNCH\\";
export declare const ExecutionSessionStatus: {
    readonly CreatingContainer: \\"CREATING_CONTAINER\\";
    readonly ProvisioningContainer: \\"PROVISIONING_CONTAINER\\";
    readonly PendingContainer: \\"PENDING_CONTAINER\\";
    readonly RunningContainer: \\"RUNNING_CONTAINER\\";
    readonly LiveContainer: \\"LIVE_CONTAINER\\";
    readonly FailedToLaunch: \\"FAILED_TO_LAUNCH\\";
};
",
                    "name": "ExecutionSessionStatus.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export const ExecutionSessionStatus = {
    CreatingContainer: \\"CREATING_CONTAINER\\",
    ProvisioningContainer: \\"PROVISIONING_CONTAINER\\",
    PendingContainer: \\"PENDING_CONTAINER\\",
    RunningContainer: \\"RUNNING_CONTAINER\\",
    LiveContainer: \\"LIVE_CONTAINER\\",
    FailedToLaunch: \\"FAILED_TO_LAUNCH\\",
};
",
                    "name": "ExecutionSessionStatus.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface ExistingSubmissionExecuting {
    submissionId: TraceApi.SubmissionId;
}
",
                    "name": "ExistingSubmissionExecuting.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "ExistingSubmissionExecuting.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface ExpressionLocation {
    start: number;
    offset: number;
}
",
                    "name": "ExpressionLocation.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "ExpressionLocation.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface FinishedResponse {
    submissionId: TraceApi.SubmissionId;
}
",
                    "name": "FinishedResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "FinishedResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface GetExecutionSessionStateResponse {
    states: Record<string, TraceApi.ExecutionSessionState>;
    numWarmingInstances?: number;
    warmingSessionIds: string[];
}
",
                    "name": "GetExecutionSessionStateResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "GetExecutionSessionStateResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface GetSubmissionStateResponse {
    timeSubmitted?: Date;
    submission: string;
    language: TraceApi.Language;
    submissionTypeState: TraceApi.SubmissionTypeState;
}
",
                    "name": "GetSubmissionStateResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "GetSubmissionStateResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface GetTraceResponsesPageRequest {
    offset?: number;
}
",
                    "name": "GetTraceResponsesPageRequest.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "GetTraceResponsesPageRequest.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface GradedResponse {
    submissionId: TraceApi.SubmissionId;
    testCases: Record<string, TraceApi.TestCaseResultWithStdout>;
}
",
                    "name": "GradedResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "GradedResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface GradedResponseV2 {
    submissionId: TraceApi.SubmissionId;
    testCases: Record<TraceApi.v2.TestCaseId, TraceApi.TestCaseGrade>;
}
",
                    "name": "GradedResponseV2.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "GradedResponseV2.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface GradedTestCaseUpdate {
    testCaseId: TraceApi.v2.TestCaseId;
    grade: TraceApi.TestCaseGrade;
}
",
                    "name": "GradedTestCaseUpdate.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "GradedTestCaseUpdate.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface InitializeProblemRequest {
    problemId: TraceApi.ProblemId;
    problemVersion?: number;
}
",
                    "name": "InitializeProblemRequest.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "InitializeProblemRequest.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface InternalError {
    exceptionInfo: TraceApi.ExceptionInfo;
}
",
                    "name": "InternalError.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "InternalError.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export declare type InvalidRequestCause = 
/**
 * The submission request references a submission id that doesn't exist. */
TraceApi.InvalidRequestCause.SubmissionIdNotFound | TraceApi.InvalidRequestCause.CustomTestCasesUnsupported
/**
 * The submission request was routed to an incorrect language executor. */
 | TraceApi.InvalidRequestCause.UnexpectedLanguage | TraceApi.InvalidRequestCause._Unknown;
export declare namespace InvalidRequestCause {
    interface SubmissionIdNotFound extends TraceApi.SubmissionIdNotFound, _Utils {
        type: \\"submissionIdNotFound\\";
    }
    interface CustomTestCasesUnsupported extends TraceApi.CustomTestCasesUnsupported, _Utils {
        type: \\"customTestCasesUnsupported\\";
    }
    interface UnexpectedLanguage extends TraceApi.UnexpectedLanguageError, _Utils {
        type: \\"unexpectedLanguage\\";
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.InvalidRequestCause._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        submissionIdNotFound: (value: TraceApi.SubmissionIdNotFound) => _Result;
        customTestCasesUnsupported: (value: TraceApi.CustomTestCasesUnsupported) => _Result;
        unexpectedLanguage: (value: TraceApi.UnexpectedLanguageError) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const InvalidRequestCause: {
    readonly submissionIdNotFound: (value: TraceApi.SubmissionIdNotFound) => TraceApi.InvalidRequestCause.SubmissionIdNotFound;
    readonly customTestCasesUnsupported: (value: TraceApi.CustomTestCasesUnsupported) => TraceApi.InvalidRequestCause.CustomTestCasesUnsupported;
    readonly unexpectedLanguage: (value: TraceApi.UnexpectedLanguageError) => TraceApi.InvalidRequestCause.UnexpectedLanguage;
    readonly _unknown: (value: {
        type: string;
    }) => TraceApi.InvalidRequestCause._Unknown;
    readonly _visit: <_Result>(value: TraceApi.InvalidRequestCause, visitor: TraceApi.InvalidRequestCause._Visitor<_Result>) => _Result;
};
",
                    "name": "InvalidRequestCause.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export const InvalidRequestCause = {
    submissionIdNotFound: (value) => {
        return {
            ...value,
            type: \\"submissionIdNotFound\\",
            _visit: function (visitor) {
                return TraceApi.InvalidRequestCause._visit(this, visitor);
            },
        };
    },
    customTestCasesUnsupported: (value) => {
        return {
            ...value,
            type: \\"customTestCasesUnsupported\\",
            _visit: function (visitor) {
                return TraceApi.InvalidRequestCause._visit(this, visitor);
            },
        };
    },
    unexpectedLanguage: (value) => {
        return {
            ...value,
            type: \\"unexpectedLanguage\\",
            _visit: function (visitor) {
                return TraceApi.InvalidRequestCause._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.InvalidRequestCause._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case \\"submissionIdNotFound\\":
                return visitor.submissionIdNotFound(value);
            case \\"customTestCasesUnsupported\\":
                return visitor.customTestCasesUnsupported(value);
            case \\"unexpectedLanguage\\":
                return visitor.unexpectedLanguage(value);
            default:
                return visitor._other(value);
        }
    },
};
",
                    "name": "InvalidRequestCause.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface InvalidRequestResponse {
    request: TraceApi.SubmissionRequest;
    cause: TraceApi.InvalidRequestCause;
}
",
                    "name": "InvalidRequestResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "InvalidRequestResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface LightweightStackframeInformation {
    numStackFrames: number;
    topStackFrameMethodName: string;
}
",
                    "name": "LightweightStackframeInformation.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "LightweightStackframeInformation.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface RecordedResponseNotification {
    submissionId: TraceApi.SubmissionId;
    traceResponsesSize: number;
    testCaseId?: string;
}
",
                    "name": "RecordedResponseNotification.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "RecordedResponseNotification.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface RecordedTestCaseUpdate {
    testCaseId: TraceApi.v2.TestCaseId;
    traceResponsesSize: number;
}
",
                    "name": "RecordedTestCaseUpdate.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "RecordedTestCaseUpdate.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface RecordingResponseNotification {
    submissionId: TraceApi.SubmissionId;
    testCaseId?: string;
    lineNumber: number;
    lightweightStackInfo: TraceApi.LightweightStackframeInformation;
    tracedFile?: TraceApi.TracedFile;
}
",
                    "name": "RecordingResponseNotification.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "RecordingResponseNotification.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface RunningResponse {
    submissionId: TraceApi.SubmissionId;
    state: TraceApi.RunningSubmissionState;
}
",
                    "name": "RunningResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "RunningResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export declare type RunningSubmissionState = \\"QUEUEING_SUBMISSION\\" | \\"KILLING_HISTORICAL_SUBMISSIONS\\" | \\"WRITING_SUBMISSION_TO_FILE\\" | \\"COMPILING_SUBMISSION\\" | \\"RUNNING_SUBMISSION\\";
export declare const RunningSubmissionState: {
    readonly QueueingSubmission: \\"QUEUEING_SUBMISSION\\";
    readonly KillingHistoricalSubmissions: \\"KILLING_HISTORICAL_SUBMISSIONS\\";
    readonly WritingSubmissionToFile: \\"WRITING_SUBMISSION_TO_FILE\\";
    readonly CompilingSubmission: \\"COMPILING_SUBMISSION\\";
    readonly RunningSubmission: \\"RUNNING_SUBMISSION\\";
};
",
                    "name": "RunningSubmissionState.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export const RunningSubmissionState = {
    QueueingSubmission: \\"QUEUEING_SUBMISSION\\",
    KillingHistoricalSubmissions: \\"KILLING_HISTORICAL_SUBMISSIONS\\",
    WritingSubmissionToFile: \\"WRITING_SUBMISSION_TO_FILE\\",
    CompilingSubmission: \\"COMPILING_SUBMISSION\\",
    RunningSubmission: \\"RUNNING_SUBMISSION\\",
};
",
                    "name": "RunningSubmissionState.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface RuntimeError {
    message: string;
}
",
                    "name": "RuntimeError.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "RuntimeError.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface Scope {
    variables: Record<string, TraceApi.DebugVariableValue>;
}
",
                    "name": "Scope.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "Scope.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export declare type ShareId = string;
",
                    "name": "ShareId.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "ShareId.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface StackFrame {
    methodName: string;
    lineNumber: number;
    scopes: TraceApi.Scope[];
}
",
                    "name": "StackFrame.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "StackFrame.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface StackInformation {
    numStackFrames: number;
    topStackFrame?: TraceApi.StackFrame;
}
",
                    "name": "StackInformation.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "StackInformation.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface StderrResponse {
    submissionId: TraceApi.SubmissionId;
    stderr: string;
}
",
                    "name": "StderrResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "StderrResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface StdoutResponse {
    submissionId: TraceApi.SubmissionId;
    stdout: string;
}
",
                    "name": "StdoutResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "StdoutResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface StopRequest {
    submissionId: TraceApi.SubmissionId;
}
",
                    "name": "StopRequest.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "StopRequest.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface StoppedResponse {
    submissionId: TraceApi.SubmissionId;
}
",
                    "name": "StoppedResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "StoppedResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface SubmissionFileInfo {
    directory: string;
    filename: string;
    contents: string;
}
",
                    "name": "SubmissionFileInfo.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "SubmissionFileInfo.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export declare type SubmissionId = string;
",
                    "name": "SubmissionId.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "SubmissionId.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface SubmissionIdNotFound {
    missingSubmissionId: TraceApi.SubmissionId;
}
",
                    "name": "SubmissionIdNotFound.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "SubmissionIdNotFound.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export declare type SubmissionRequest = TraceApi.SubmissionRequest.InitializeProblemRequest | TraceApi.SubmissionRequest.InitializeWorkspaceRequest | TraceApi.SubmissionRequest.SubmitV2 | TraceApi.SubmissionRequest.WorkspaceSubmit | TraceApi.SubmissionRequest.Stop | TraceApi.SubmissionRequest._Unknown;
export declare namespace SubmissionRequest {
    interface InitializeProblemRequest extends TraceApi.InitializeProblemRequest, _Utils {
        type: \\"initializeProblemRequest\\";
    }
    interface InitializeWorkspaceRequest extends _Utils {
        type: \\"initializeWorkspaceRequest\\";
    }
    interface SubmitV2 extends TraceApi.SubmitRequestV2, _Utils {
        type: \\"submitV2\\";
    }
    interface WorkspaceSubmit extends TraceApi.WorkspaceSubmitRequest, _Utils {
        type: \\"workspaceSubmit\\";
    }
    interface Stop extends TraceApi.StopRequest, _Utils {
        type: \\"stop\\";
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.SubmissionRequest._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        initializeProblemRequest: (value: TraceApi.InitializeProblemRequest) => _Result;
        initializeWorkspaceRequest: () => _Result;
        submitV2: (value: TraceApi.SubmitRequestV2) => _Result;
        workspaceSubmit: (value: TraceApi.WorkspaceSubmitRequest) => _Result;
        stop: (value: TraceApi.StopRequest) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const SubmissionRequest: {
    readonly initializeProblemRequest: (value: TraceApi.InitializeProblemRequest) => TraceApi.SubmissionRequest.InitializeProblemRequest;
    readonly initializeWorkspaceRequest: () => TraceApi.SubmissionRequest.InitializeWorkspaceRequest;
    readonly submitV2: (value: TraceApi.SubmitRequestV2) => TraceApi.SubmissionRequest.SubmitV2;
    readonly workspaceSubmit: (value: TraceApi.WorkspaceSubmitRequest) => TraceApi.SubmissionRequest.WorkspaceSubmit;
    readonly stop: (value: TraceApi.StopRequest) => TraceApi.SubmissionRequest.Stop;
    readonly _unknown: (value: {
        type: string;
    }) => TraceApi.SubmissionRequest._Unknown;
    readonly _visit: <_Result>(value: TraceApi.SubmissionRequest, visitor: TraceApi.SubmissionRequest._Visitor<_Result>) => _Result;
};
",
                    "name": "SubmissionRequest.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export const SubmissionRequest = {
    initializeProblemRequest: (value) => {
        return {
            ...value,
            type: \\"initializeProblemRequest\\",
            _visit: function (visitor) {
                return TraceApi.SubmissionRequest._visit(this, visitor);
            },
        };
    },
    initializeWorkspaceRequest: () => {
        return {
            type: \\"initializeWorkspaceRequest\\",
            _visit: function (visitor) {
                return TraceApi.SubmissionRequest._visit(this, visitor);
            },
        };
    },
    submitV2: (value) => {
        return {
            ...value,
            type: \\"submitV2\\",
            _visit: function (visitor) {
                return TraceApi.SubmissionRequest._visit(this, visitor);
            },
        };
    },
    workspaceSubmit: (value) => {
        return {
            ...value,
            type: \\"workspaceSubmit\\",
            _visit: function (visitor) {
                return TraceApi.SubmissionRequest._visit(this, visitor);
            },
        };
    },
    stop: (value) => {
        return {
            ...value,
            type: \\"stop\\",
            _visit: function (visitor) {
                return TraceApi.SubmissionRequest._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.SubmissionRequest._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case \\"initializeProblemRequest\\":
                return visitor.initializeProblemRequest(value);
            case \\"initializeWorkspaceRequest\\":
                return visitor.initializeWorkspaceRequest();
            case \\"submitV2\\":
                return visitor.submitV2(value);
            case \\"workspaceSubmit\\":
                return visitor.workspaceSubmit(value);
            case \\"stop\\":
                return visitor.stop(value);
            default:
                return visitor._other(value);
        }
    },
};
",
                    "name": "SubmissionRequest.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export declare type SubmissionResponse = TraceApi.SubmissionResponse.ServerInitialized | TraceApi.SubmissionResponse.ProblemInitialized | TraceApi.SubmissionResponse.WorkspaceInitialized | TraceApi.SubmissionResponse.ServerErrored | TraceApi.SubmissionResponse.CodeExecutionUpdate | TraceApi.SubmissionResponse.Terminated | TraceApi.SubmissionResponse._Unknown;
export declare namespace SubmissionResponse {
    interface ServerInitialized extends _Utils {
        type: \\"serverInitialized\\";
    }
    interface ProblemInitialized extends _Utils {
        type: \\"problemInitialized\\";
        value: TraceApi.ProblemId;
    }
    interface WorkspaceInitialized extends _Utils {
        type: \\"workspaceInitialized\\";
    }
    interface ServerErrored extends TraceApi.ExceptionInfo, _Utils {
        type: \\"serverErrored\\";
    }
    interface CodeExecutionUpdate extends _Utils {
        type: \\"codeExecutionUpdate\\";
        value: TraceApi.CodeExecutionUpdate;
    }
    interface Terminated extends TraceApi.TerminatedResponse, _Utils {
        type: \\"terminated\\";
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.SubmissionResponse._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        serverInitialized: () => _Result;
        problemInitialized: (value: TraceApi.ProblemId) => _Result;
        workspaceInitialized: () => _Result;
        serverErrored: (value: TraceApi.ExceptionInfo) => _Result;
        codeExecutionUpdate: (value: TraceApi.CodeExecutionUpdate) => _Result;
        terminated: (value: TraceApi.TerminatedResponse) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const SubmissionResponse: {
    readonly serverInitialized: () => TraceApi.SubmissionResponse.ServerInitialized;
    readonly problemInitialized: (value: TraceApi.ProblemId) => TraceApi.SubmissionResponse.ProblemInitialized;
    readonly workspaceInitialized: () => TraceApi.SubmissionResponse.WorkspaceInitialized;
    readonly serverErrored: (value: TraceApi.ExceptionInfo) => TraceApi.SubmissionResponse.ServerErrored;
    readonly codeExecutionUpdate: (value: TraceApi.CodeExecutionUpdate) => TraceApi.SubmissionResponse.CodeExecutionUpdate;
    readonly terminated: (value: TraceApi.TerminatedResponse) => TraceApi.SubmissionResponse.Terminated;
    readonly _unknown: (value: {
        type: string;
    }) => TraceApi.SubmissionResponse._Unknown;
    readonly _visit: <_Result>(value: TraceApi.SubmissionResponse, visitor: TraceApi.SubmissionResponse._Visitor<_Result>) => _Result;
};
",
                    "name": "SubmissionResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export const SubmissionResponse = {
    serverInitialized: () => {
        return {
            type: \\"serverInitialized\\",
            _visit: function (visitor) {
                return TraceApi.SubmissionResponse._visit(this, visitor);
            },
        };
    },
    problemInitialized: (value) => {
        return {
            value: value,
            type: \\"problemInitialized\\",
            _visit: function (visitor) {
                return TraceApi.SubmissionResponse._visit(this, visitor);
            },
        };
    },
    workspaceInitialized: () => {
        return {
            type: \\"workspaceInitialized\\",
            _visit: function (visitor) {
                return TraceApi.SubmissionResponse._visit(this, visitor);
            },
        };
    },
    serverErrored: (value) => {
        return {
            ...value,
            type: \\"serverErrored\\",
            _visit: function (visitor) {
                return TraceApi.SubmissionResponse._visit(this, visitor);
            },
        };
    },
    codeExecutionUpdate: (value) => {
        return {
            value: value,
            type: \\"codeExecutionUpdate\\",
            _visit: function (visitor) {
                return TraceApi.SubmissionResponse._visit(this, visitor);
            },
        };
    },
    terminated: (value) => {
        return {
            ...value,
            type: \\"terminated\\",
            _visit: function (visitor) {
                return TraceApi.SubmissionResponse._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.SubmissionResponse._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case \\"serverInitialized\\":
                return visitor.serverInitialized();
            case \\"problemInitialized\\":
                return visitor.problemInitialized(value.value);
            case \\"workspaceInitialized\\":
                return visitor.workspaceInitialized();
            case \\"serverErrored\\":
                return visitor.serverErrored(value);
            case \\"codeExecutionUpdate\\":
                return visitor.codeExecutionUpdate(value.value);
            case \\"terminated\\":
                return visitor.terminated(value);
            default:
                return visitor._other(value);
        }
    },
};
",
                    "name": "SubmissionResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export declare type SubmissionStatusForTestCase = TraceApi.SubmissionStatusForTestCase.Graded | TraceApi.SubmissionStatusForTestCase.GradedV2 | TraceApi.SubmissionStatusForTestCase.Traced | TraceApi.SubmissionStatusForTestCase._Unknown;
export declare namespace SubmissionStatusForTestCase {
    interface Graded extends TraceApi.TestCaseResultWithStdout, _Utils {
        type: \\"graded\\";
    }
    interface GradedV2 extends _Utils {
        type: \\"gradedV2\\";
        value: TraceApi.TestCaseGrade;
    }
    interface Traced extends TraceApi.TracedTestCase, _Utils {
        type: \\"traced\\";
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.SubmissionStatusForTestCase._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        graded: (value: TraceApi.TestCaseResultWithStdout) => _Result;
        gradedV2: (value: TraceApi.TestCaseGrade) => _Result;
        traced: (value: TraceApi.TracedTestCase) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const SubmissionStatusForTestCase: {
    readonly graded: (value: TraceApi.TestCaseResultWithStdout) => TraceApi.SubmissionStatusForTestCase.Graded;
    readonly gradedV2: (value: TraceApi.TestCaseGrade) => TraceApi.SubmissionStatusForTestCase.GradedV2;
    readonly traced: (value: TraceApi.TracedTestCase) => TraceApi.SubmissionStatusForTestCase.Traced;
    readonly _unknown: (value: {
        type: string;
    }) => TraceApi.SubmissionStatusForTestCase._Unknown;
    readonly _visit: <_Result>(value: TraceApi.SubmissionStatusForTestCase, visitor: TraceApi.SubmissionStatusForTestCase._Visitor<_Result>) => _Result;
};
",
                    "name": "SubmissionStatusForTestCase.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export const SubmissionStatusForTestCase = {
    graded: (value) => {
        return {
            ...value,
            type: \\"graded\\",
            _visit: function (visitor) {
                return TraceApi.SubmissionStatusForTestCase._visit(this, visitor);
            },
        };
    },
    gradedV2: (value) => {
        return {
            value: value,
            type: \\"gradedV2\\",
            _visit: function (visitor) {
                return TraceApi.SubmissionStatusForTestCase._visit(this, visitor);
            },
        };
    },
    traced: (value) => {
        return {
            ...value,
            type: \\"traced\\",
            _visit: function (visitor) {
                return TraceApi.SubmissionStatusForTestCase._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.SubmissionStatusForTestCase._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case \\"graded\\":
                return visitor.graded(value);
            case \\"gradedV2\\":
                return visitor.gradedV2(value.value);
            case \\"traced\\":
                return visitor.traced(value);
            default:
                return visitor._other(value);
        }
    },
};
",
                    "name": "SubmissionStatusForTestCase.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export declare type SubmissionStatusV2 = TraceApi.SubmissionStatusV2.Test | TraceApi.SubmissionStatusV2.Workspace | TraceApi.SubmissionStatusV2._Unknown;
export declare namespace SubmissionStatusV2 {
    interface Test extends TraceApi.TestSubmissionStatusV2, _Utils {
        type: \\"test\\";
    }
    interface Workspace extends TraceApi.WorkspaceSubmissionStatusV2, _Utils {
        type: \\"workspace\\";
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.SubmissionStatusV2._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        test: (value: TraceApi.TestSubmissionStatusV2) => _Result;
        workspace: (value: TraceApi.WorkspaceSubmissionStatusV2) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const SubmissionStatusV2: {
    readonly test: (value: TraceApi.TestSubmissionStatusV2) => TraceApi.SubmissionStatusV2.Test;
    readonly workspace: (value: TraceApi.WorkspaceSubmissionStatusV2) => TraceApi.SubmissionStatusV2.Workspace;
    readonly _unknown: (value: {
        type: string;
    }) => TraceApi.SubmissionStatusV2._Unknown;
    readonly _visit: <_Result>(value: TraceApi.SubmissionStatusV2, visitor: TraceApi.SubmissionStatusV2._Visitor<_Result>) => _Result;
};
",
                    "name": "SubmissionStatusV2.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export const SubmissionStatusV2 = {
    test: (value) => {
        return {
            ...value,
            type: \\"test\\",
            _visit: function (visitor) {
                return TraceApi.SubmissionStatusV2._visit(this, visitor);
            },
        };
    },
    workspace: (value) => {
        return {
            ...value,
            type: \\"workspace\\",
            _visit: function (visitor) {
                return TraceApi.SubmissionStatusV2._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.SubmissionStatusV2._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case \\"test\\":
                return visitor.test(value);
            case \\"workspace\\":
                return visitor.workspace(value);
            default:
                return visitor._other(value);
        }
    },
};
",
                    "name": "SubmissionStatusV2.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
/**
 * Keep in sync with SubmissionType.
 */
export declare type SubmissionTypeEnum = \\"TEST\\";
export declare const SubmissionTypeEnum: {
    readonly Test: \\"TEST\\";
};
",
                    "name": "SubmissionTypeEnum.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export const SubmissionTypeEnum = {
    Test: \\"TEST\\",
};
",
                    "name": "SubmissionTypeEnum.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export declare type SubmissionTypeState = TraceApi.SubmissionTypeState.Test | TraceApi.SubmissionTypeState.Workspace | TraceApi.SubmissionTypeState._Unknown;
export declare namespace SubmissionTypeState {
    interface Test extends TraceApi.TestSubmissionState, _Utils {
        type: \\"test\\";
    }
    interface Workspace extends TraceApi.WorkspaceSubmissionState, _Utils {
        type: \\"workspace\\";
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.SubmissionTypeState._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        test: (value: TraceApi.TestSubmissionState) => _Result;
        workspace: (value: TraceApi.WorkspaceSubmissionState) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const SubmissionTypeState: {
    readonly test: (value: TraceApi.TestSubmissionState) => TraceApi.SubmissionTypeState.Test;
    readonly workspace: (value: TraceApi.WorkspaceSubmissionState) => TraceApi.SubmissionTypeState.Workspace;
    readonly _unknown: (value: {
        type: string;
    }) => TraceApi.SubmissionTypeState._Unknown;
    readonly _visit: <_Result>(value: TraceApi.SubmissionTypeState, visitor: TraceApi.SubmissionTypeState._Visitor<_Result>) => _Result;
};
",
                    "name": "SubmissionTypeState.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export const SubmissionTypeState = {
    test: (value) => {
        return {
            ...value,
            type: \\"test\\",
            _visit: function (visitor) {
                return TraceApi.SubmissionTypeState._visit(this, visitor);
            },
        };
    },
    workspace: (value) => {
        return {
            ...value,
            type: \\"workspace\\",
            _visit: function (visitor) {
                return TraceApi.SubmissionTypeState._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.SubmissionTypeState._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case \\"test\\":
                return visitor.test(value);
            case \\"workspace\\":
                return visitor.workspace(value);
            default:
                return visitor._other(value);
        }
    },
};
",
                    "name": "SubmissionTypeState.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface SubmitRequestV2 {
    submissionId: TraceApi.SubmissionId;
    language: TraceApi.Language;
    submissionFiles: TraceApi.SubmissionFileInfo[];
    problemId: TraceApi.ProblemId;
    problemVersion?: number;
    userId?: string;
}
",
                    "name": "SubmitRequestV2.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "SubmitRequestV2.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface TerminatedResponse {
}
",
                    "name": "TerminatedResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "TerminatedResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export declare type TestCaseGrade = TraceApi.TestCaseGrade.Hidden | TraceApi.TestCaseGrade.NonHidden | TraceApi.TestCaseGrade._Unknown;
export declare namespace TestCaseGrade {
    interface Hidden extends TraceApi.TestCaseHiddenGrade, _Utils {
        type: \\"hidden\\";
    }
    interface NonHidden extends TraceApi.TestCaseNonHiddenGrade, _Utils {
        type: \\"nonHidden\\";
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.TestCaseGrade._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        hidden: (value: TraceApi.TestCaseHiddenGrade) => _Result;
        nonHidden: (value: TraceApi.TestCaseNonHiddenGrade) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const TestCaseGrade: {
    readonly hidden: (value: TraceApi.TestCaseHiddenGrade) => TraceApi.TestCaseGrade.Hidden;
    readonly nonHidden: (value: TraceApi.TestCaseNonHiddenGrade) => TraceApi.TestCaseGrade.NonHidden;
    readonly _unknown: (value: {
        type: string;
    }) => TraceApi.TestCaseGrade._Unknown;
    readonly _visit: <_Result>(value: TraceApi.TestCaseGrade, visitor: TraceApi.TestCaseGrade._Visitor<_Result>) => _Result;
};
",
                    "name": "TestCaseGrade.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export const TestCaseGrade = {
    hidden: (value) => {
        return {
            ...value,
            type: \\"hidden\\",
            _visit: function (visitor) {
                return TraceApi.TestCaseGrade._visit(this, visitor);
            },
        };
    },
    nonHidden: (value) => {
        return {
            ...value,
            type: \\"nonHidden\\",
            _visit: function (visitor) {
                return TraceApi.TestCaseGrade._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.TestCaseGrade._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case \\"hidden\\":
                return visitor.hidden(value);
            case \\"nonHidden\\":
                return visitor.nonHidden(value);
            default:
                return visitor._other(value);
        }
    },
};
",
                    "name": "TestCaseGrade.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface TestCaseHiddenGrade {
    passed: boolean;
}
",
                    "name": "TestCaseHiddenGrade.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "TestCaseHiddenGrade.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface TestCaseNonHiddenGrade {
    passed: boolean;
    actualResult?: TraceApi.VariableValue;
    exception?: TraceApi.ExceptionV2;
    stdout: string;
}
",
                    "name": "TestCaseNonHiddenGrade.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "TestCaseNonHiddenGrade.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface TestCaseResult {
    expectedResult: TraceApi.VariableValue;
    actualResult: TraceApi.ActualResult;
    passed: boolean;
}
",
                    "name": "TestCaseResult.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "TestCaseResult.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface TestCaseResultWithStdout {
    result: TraceApi.TestCaseResult;
    stdout: string;
}
",
                    "name": "TestCaseResultWithStdout.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "TestCaseResultWithStdout.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface TestSubmissionState {
    problemId: TraceApi.ProblemId;
    defaultTestCases: TraceApi.TestCase[];
    customTestCases: TraceApi.TestCase[];
    status: TraceApi.TestSubmissionStatus;
}
",
                    "name": "TestSubmissionState.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "TestSubmissionState.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export declare type TestSubmissionStatus = TraceApi.TestSubmissionStatus.Stopped | TraceApi.TestSubmissionStatus.Errored | TraceApi.TestSubmissionStatus.Running | TraceApi.TestSubmissionStatus.TestCaseIdToState | TraceApi.TestSubmissionStatus._Unknown;
export declare namespace TestSubmissionStatus {
    interface Stopped extends _Utils {
        type: \\"stopped\\";
    }
    interface Errored extends _Utils {
        type: \\"errored\\";
        value: TraceApi.ErrorInfo;
    }
    interface Running extends _Utils {
        type: \\"running\\";
        value: TraceApi.RunningSubmissionState;
    }
    interface TestCaseIdToState extends _Utils {
        type: \\"testCaseIdToState\\";
        value: Record<string, TraceApi.SubmissionStatusForTestCase>;
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.TestSubmissionStatus._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        stopped: () => _Result;
        errored: (value: TraceApi.ErrorInfo) => _Result;
        running: (value: TraceApi.RunningSubmissionState) => _Result;
        testCaseIdToState: (value: Record<string, TraceApi.SubmissionStatusForTestCase>) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const TestSubmissionStatus: {
    readonly stopped: () => TraceApi.TestSubmissionStatus.Stopped;
    readonly errored: (value: TraceApi.ErrorInfo) => TraceApi.TestSubmissionStatus.Errored;
    readonly running: (value: TraceApi.RunningSubmissionState) => TraceApi.TestSubmissionStatus.Running;
    readonly testCaseIdToState: (value: Record<string, TraceApi.SubmissionStatusForTestCase>) => TraceApi.TestSubmissionStatus.TestCaseIdToState;
    readonly _unknown: (value: {
        type: string;
    }) => TraceApi.TestSubmissionStatus._Unknown;
    readonly _visit: <_Result>(value: TraceApi.TestSubmissionStatus, visitor: TraceApi.TestSubmissionStatus._Visitor<_Result>) => _Result;
};
",
                    "name": "TestSubmissionStatus.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export const TestSubmissionStatus = {
    stopped: () => {
        return {
            type: \\"stopped\\",
            _visit: function (visitor) {
                return TraceApi.TestSubmissionStatus._visit(this, visitor);
            },
        };
    },
    errored: (value) => {
        return {
            value: value,
            type: \\"errored\\",
            _visit: function (visitor) {
                return TraceApi.TestSubmissionStatus._visit(this, visitor);
            },
        };
    },
    running: (value) => {
        return {
            value: value,
            type: \\"running\\",
            _visit: function (visitor) {
                return TraceApi.TestSubmissionStatus._visit(this, visitor);
            },
        };
    },
    testCaseIdToState: (value) => {
        return {
            value: value,
            type: \\"testCaseIdToState\\",
            _visit: function (visitor) {
                return TraceApi.TestSubmissionStatus._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.TestSubmissionStatus._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case \\"stopped\\":
                return visitor.stopped();
            case \\"errored\\":
                return visitor.errored(value.value);
            case \\"running\\":
                return visitor.running(value.value);
            case \\"testCaseIdToState\\":
                return visitor.testCaseIdToState(value.value);
            default:
                return visitor._other(value);
        }
    },
};
",
                    "name": "TestSubmissionStatus.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface TestSubmissionStatusV2 {
    updates: TraceApi.TestSubmissionUpdate[];
    problemId: TraceApi.ProblemId;
    problemVersion: number;
    problemInfo: TraceApi.v2.ProblemInfoV2;
}
",
                    "name": "TestSubmissionStatusV2.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "TestSubmissionStatusV2.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface TestSubmissionUpdate {
    updateTime: Date;
    updateInfo: TraceApi.TestSubmissionUpdateInfo;
}
",
                    "name": "TestSubmissionUpdate.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "TestSubmissionUpdate.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export declare type TestSubmissionUpdateInfo = TraceApi.TestSubmissionUpdateInfo.Running | TraceApi.TestSubmissionUpdateInfo.Stopped | TraceApi.TestSubmissionUpdateInfo.Errored | TraceApi.TestSubmissionUpdateInfo.GradedTestCase | TraceApi.TestSubmissionUpdateInfo.RecordedTestCase | TraceApi.TestSubmissionUpdateInfo.Finished | TraceApi.TestSubmissionUpdateInfo._Unknown;
export declare namespace TestSubmissionUpdateInfo {
    interface Running extends _Utils {
        type: \\"running\\";
        value: TraceApi.RunningSubmissionState;
    }
    interface Stopped extends _Utils {
        type: \\"stopped\\";
    }
    interface Errored extends _Utils {
        type: \\"errored\\";
        value: TraceApi.ErrorInfo;
    }
    interface GradedTestCase extends TraceApi.GradedTestCaseUpdate, _Utils {
        type: \\"gradedTestCase\\";
    }
    interface RecordedTestCase extends TraceApi.RecordedTestCaseUpdate, _Utils {
        type: \\"recordedTestCase\\";
    }
    interface Finished extends _Utils {
        type: \\"finished\\";
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.TestSubmissionUpdateInfo._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        running: (value: TraceApi.RunningSubmissionState) => _Result;
        stopped: () => _Result;
        errored: (value: TraceApi.ErrorInfo) => _Result;
        gradedTestCase: (value: TraceApi.GradedTestCaseUpdate) => _Result;
        recordedTestCase: (value: TraceApi.RecordedTestCaseUpdate) => _Result;
        finished: () => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const TestSubmissionUpdateInfo: {
    readonly running: (value: TraceApi.RunningSubmissionState) => TraceApi.TestSubmissionUpdateInfo.Running;
    readonly stopped: () => TraceApi.TestSubmissionUpdateInfo.Stopped;
    readonly errored: (value: TraceApi.ErrorInfo) => TraceApi.TestSubmissionUpdateInfo.Errored;
    readonly gradedTestCase: (value: TraceApi.GradedTestCaseUpdate) => TraceApi.TestSubmissionUpdateInfo.GradedTestCase;
    readonly recordedTestCase: (value: TraceApi.RecordedTestCaseUpdate) => TraceApi.TestSubmissionUpdateInfo.RecordedTestCase;
    readonly finished: () => TraceApi.TestSubmissionUpdateInfo.Finished;
    readonly _unknown: (value: {
        type: string;
    }) => TraceApi.TestSubmissionUpdateInfo._Unknown;
    readonly _visit: <_Result>(value: TraceApi.TestSubmissionUpdateInfo, visitor: TraceApi.TestSubmissionUpdateInfo._Visitor<_Result>) => _Result;
};
",
                    "name": "TestSubmissionUpdateInfo.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export const TestSubmissionUpdateInfo = {
    running: (value) => {
        return {
            value: value,
            type: \\"running\\",
            _visit: function (visitor) {
                return TraceApi.TestSubmissionUpdateInfo._visit(this, visitor);
            },
        };
    },
    stopped: () => {
        return {
            type: \\"stopped\\",
            _visit: function (visitor) {
                return TraceApi.TestSubmissionUpdateInfo._visit(this, visitor);
            },
        };
    },
    errored: (value) => {
        return {
            value: value,
            type: \\"errored\\",
            _visit: function (visitor) {
                return TraceApi.TestSubmissionUpdateInfo._visit(this, visitor);
            },
        };
    },
    gradedTestCase: (value) => {
        return {
            ...value,
            type: \\"gradedTestCase\\",
            _visit: function (visitor) {
                return TraceApi.TestSubmissionUpdateInfo._visit(this, visitor);
            },
        };
    },
    recordedTestCase: (value) => {
        return {
            ...value,
            type: \\"recordedTestCase\\",
            _visit: function (visitor) {
                return TraceApi.TestSubmissionUpdateInfo._visit(this, visitor);
            },
        };
    },
    finished: () => {
        return {
            type: \\"finished\\",
            _visit: function (visitor) {
                return TraceApi.TestSubmissionUpdateInfo._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.TestSubmissionUpdateInfo._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case \\"running\\":
                return visitor.running(value.value);
            case \\"stopped\\":
                return visitor.stopped();
            case \\"errored\\":
                return visitor.errored(value.value);
            case \\"gradedTestCase\\":
                return visitor.gradedTestCase(value);
            case \\"recordedTestCase\\":
                return visitor.recordedTestCase(value);
            case \\"finished\\":
                return visitor.finished();
            default:
                return visitor._other(value);
        }
    },
};
",
                    "name": "TestSubmissionUpdateInfo.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface TraceResponse {
    submissionId: TraceApi.SubmissionId;
    lineNumber: number;
    returnValue?: TraceApi.DebugVariableValue;
    expressionLocation?: TraceApi.ExpressionLocation;
    stack: TraceApi.StackInformation;
    stdout?: string;
}
",
                    "name": "TraceResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "TraceResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface TraceResponseV2 {
    submissionId: TraceApi.SubmissionId;
    lineNumber: number;
    file: TraceApi.TracedFile;
    returnValue?: TraceApi.DebugVariableValue;
    expressionLocation?: TraceApi.ExpressionLocation;
    stack: TraceApi.StackInformation;
    stdout?: string;
}
",
                    "name": "TraceResponseV2.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "TraceResponseV2.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface TraceResponsesPage {
    /**
     * If present, use this to load subseqent pages.
     * The offset is the id of the next trace response to load.
     *
     */
    offset?: number;
    traceResponses: TraceApi.TraceResponse[];
}
",
                    "name": "TraceResponsesPage.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "TraceResponsesPage.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface TraceResponsesPageV2 {
    /**
     * If present, use this to load subseqent pages.
     * The offset is the id of the next trace response to load.
     *
     */
    offset?: number;
    traceResponses: TraceApi.TraceResponseV2[];
}
",
                    "name": "TraceResponsesPageV2.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "TraceResponsesPageV2.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface TracedFile {
    filename: string;
    directory: string;
}
",
                    "name": "TracedFile.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "TracedFile.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface TracedTestCase {
    result: TraceApi.TestCaseResultWithStdout;
    traceResponsesSize: number;
}
",
                    "name": "TracedTestCase.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "TracedTestCase.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface UnexpectedLanguageError {
    expectedLanguage: TraceApi.Language;
    actualLanguage: TraceApi.Language;
}
",
                    "name": "UnexpectedLanguageError.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "UnexpectedLanguageError.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface WorkspaceFiles {
    mainFile: TraceApi.FileInfo;
    readOnlyFiles: TraceApi.FileInfo[];
}
",
                    "name": "WorkspaceFiles.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "WorkspaceFiles.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface WorkspaceRanResponse {
    submissionId: TraceApi.SubmissionId;
    runDetails: TraceApi.WorkspaceRunDetails;
}
",
                    "name": "WorkspaceRanResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "WorkspaceRanResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface WorkspaceRunDetails {
    exceptionV2?: TraceApi.ExceptionV2;
    exception?: TraceApi.ExceptionInfo;
    stdout: string;
}
",
                    "name": "WorkspaceRunDetails.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "WorkspaceRunDetails.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface WorkspaceStarterFilesResponse {
    files: Record<TraceApi.Language, TraceApi.WorkspaceFiles | undefined>;
}
",
                    "name": "WorkspaceStarterFilesResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "WorkspaceStarterFilesResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface WorkspaceStarterFilesResponseV2 {
    filesByLanguage: Record<TraceApi.Language, TraceApi.v2.Files | undefined>;
}
",
                    "name": "WorkspaceStarterFilesResponseV2.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "WorkspaceStarterFilesResponseV2.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface WorkspaceSubmissionState {
    status: TraceApi.WorkspaceSubmissionStatus;
}
",
                    "name": "WorkspaceSubmissionState.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "WorkspaceSubmissionState.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export declare type WorkspaceSubmissionStatus = TraceApi.WorkspaceSubmissionStatus.Stopped | TraceApi.WorkspaceSubmissionStatus.Errored | TraceApi.WorkspaceSubmissionStatus.Running | TraceApi.WorkspaceSubmissionStatus.Ran | TraceApi.WorkspaceSubmissionStatus.Traced | TraceApi.WorkspaceSubmissionStatus._Unknown;
export declare namespace WorkspaceSubmissionStatus {
    interface Stopped extends _Utils {
        type: \\"stopped\\";
    }
    interface Errored extends _Utils {
        type: \\"errored\\";
        value: TraceApi.ErrorInfo;
    }
    interface Running extends _Utils {
        type: \\"running\\";
        value: TraceApi.RunningSubmissionState;
    }
    interface Ran extends TraceApi.WorkspaceRunDetails, _Utils {
        type: \\"ran\\";
    }
    interface Traced extends TraceApi.WorkspaceRunDetails, _Utils {
        type: \\"traced\\";
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.WorkspaceSubmissionStatus._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        stopped: () => _Result;
        errored: (value: TraceApi.ErrorInfo) => _Result;
        running: (value: TraceApi.RunningSubmissionState) => _Result;
        ran: (value: TraceApi.WorkspaceRunDetails) => _Result;
        traced: (value: TraceApi.WorkspaceRunDetails) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const WorkspaceSubmissionStatus: {
    readonly stopped: () => TraceApi.WorkspaceSubmissionStatus.Stopped;
    readonly errored: (value: TraceApi.ErrorInfo) => TraceApi.WorkspaceSubmissionStatus.Errored;
    readonly running: (value: TraceApi.RunningSubmissionState) => TraceApi.WorkspaceSubmissionStatus.Running;
    readonly ran: (value: TraceApi.WorkspaceRunDetails) => TraceApi.WorkspaceSubmissionStatus.Ran;
    readonly traced: (value: TraceApi.WorkspaceRunDetails) => TraceApi.WorkspaceSubmissionStatus.Traced;
    readonly _unknown: (value: {
        type: string;
    }) => TraceApi.WorkspaceSubmissionStatus._Unknown;
    readonly _visit: <_Result>(value: TraceApi.WorkspaceSubmissionStatus, visitor: TraceApi.WorkspaceSubmissionStatus._Visitor<_Result>) => _Result;
};
",
                    "name": "WorkspaceSubmissionStatus.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export const WorkspaceSubmissionStatus = {
    stopped: () => {
        return {
            type: \\"stopped\\",
            _visit: function (visitor) {
                return TraceApi.WorkspaceSubmissionStatus._visit(this, visitor);
            },
        };
    },
    errored: (value) => {
        return {
            value: value,
            type: \\"errored\\",
            _visit: function (visitor) {
                return TraceApi.WorkspaceSubmissionStatus._visit(this, visitor);
            },
        };
    },
    running: (value) => {
        return {
            value: value,
            type: \\"running\\",
            _visit: function (visitor) {
                return TraceApi.WorkspaceSubmissionStatus._visit(this, visitor);
            },
        };
    },
    ran: (value) => {
        return {
            ...value,
            type: \\"ran\\",
            _visit: function (visitor) {
                return TraceApi.WorkspaceSubmissionStatus._visit(this, visitor);
            },
        };
    },
    traced: (value) => {
        return {
            ...value,
            type: \\"traced\\",
            _visit: function (visitor) {
                return TraceApi.WorkspaceSubmissionStatus._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.WorkspaceSubmissionStatus._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case \\"stopped\\":
                return visitor.stopped();
            case \\"errored\\":
                return visitor.errored(value.value);
            case \\"running\\":
                return visitor.running(value.value);
            case \\"ran\\":
                return visitor.ran(value);
            case \\"traced\\":
                return visitor.traced(value);
            default:
                return visitor._other(value);
        }
    },
};
",
                    "name": "WorkspaceSubmissionStatus.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface WorkspaceSubmissionStatusV2 {
    updates: TraceApi.WorkspaceSubmissionUpdate[];
}
",
                    "name": "WorkspaceSubmissionStatusV2.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "WorkspaceSubmissionStatusV2.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface WorkspaceSubmissionUpdate {
    updateTime: Date;
    updateInfo: TraceApi.WorkspaceSubmissionUpdateInfo;
}
",
                    "name": "WorkspaceSubmissionUpdate.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "WorkspaceSubmissionUpdate.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export declare type WorkspaceSubmissionUpdateInfo = TraceApi.WorkspaceSubmissionUpdateInfo.Running | TraceApi.WorkspaceSubmissionUpdateInfo.Ran | TraceApi.WorkspaceSubmissionUpdateInfo.Stopped | TraceApi.WorkspaceSubmissionUpdateInfo.Traced | TraceApi.WorkspaceSubmissionUpdateInfo.TracedV2 | TraceApi.WorkspaceSubmissionUpdateInfo.Errored | TraceApi.WorkspaceSubmissionUpdateInfo.Finished | TraceApi.WorkspaceSubmissionUpdateInfo._Unknown;
export declare namespace WorkspaceSubmissionUpdateInfo {
    interface Running extends _Utils {
        type: \\"running\\";
        value: TraceApi.RunningSubmissionState;
    }
    interface Ran extends TraceApi.WorkspaceRunDetails, _Utils {
        type: \\"ran\\";
    }
    interface Stopped extends _Utils {
        type: \\"stopped\\";
    }
    interface Traced extends _Utils {
        type: \\"traced\\";
    }
    interface TracedV2 extends TraceApi.WorkspaceTracedUpdate, _Utils {
        type: \\"tracedV2\\";
    }
    interface Errored extends _Utils {
        type: \\"errored\\";
        value: TraceApi.ErrorInfo;
    }
    interface Finished extends _Utils {
        type: \\"finished\\";
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.WorkspaceSubmissionUpdateInfo._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        running: (value: TraceApi.RunningSubmissionState) => _Result;
        ran: (value: TraceApi.WorkspaceRunDetails) => _Result;
        stopped: () => _Result;
        traced: () => _Result;
        tracedV2: (value: TraceApi.WorkspaceTracedUpdate) => _Result;
        errored: (value: TraceApi.ErrorInfo) => _Result;
        finished: () => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const WorkspaceSubmissionUpdateInfo: {
    readonly running: (value: TraceApi.RunningSubmissionState) => TraceApi.WorkspaceSubmissionUpdateInfo.Running;
    readonly ran: (value: TraceApi.WorkspaceRunDetails) => TraceApi.WorkspaceSubmissionUpdateInfo.Ran;
    readonly stopped: () => TraceApi.WorkspaceSubmissionUpdateInfo.Stopped;
    readonly traced: () => TraceApi.WorkspaceSubmissionUpdateInfo.Traced;
    readonly tracedV2: (value: TraceApi.WorkspaceTracedUpdate) => TraceApi.WorkspaceSubmissionUpdateInfo.TracedV2;
    readonly errored: (value: TraceApi.ErrorInfo) => TraceApi.WorkspaceSubmissionUpdateInfo.Errored;
    readonly finished: () => TraceApi.WorkspaceSubmissionUpdateInfo.Finished;
    readonly _unknown: (value: {
        type: string;
    }) => TraceApi.WorkspaceSubmissionUpdateInfo._Unknown;
    readonly _visit: <_Result>(value: TraceApi.WorkspaceSubmissionUpdateInfo, visitor: TraceApi.WorkspaceSubmissionUpdateInfo._Visitor<_Result>) => _Result;
};
",
                    "name": "WorkspaceSubmissionUpdateInfo.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export const WorkspaceSubmissionUpdateInfo = {
    running: (value) => {
        return {
            value: value,
            type: \\"running\\",
            _visit: function (visitor) {
                return TraceApi.WorkspaceSubmissionUpdateInfo._visit(this, visitor);
            },
        };
    },
    ran: (value) => {
        return {
            ...value,
            type: \\"ran\\",
            _visit: function (visitor) {
                return TraceApi.WorkspaceSubmissionUpdateInfo._visit(this, visitor);
            },
        };
    },
    stopped: () => {
        return {
            type: \\"stopped\\",
            _visit: function (visitor) {
                return TraceApi.WorkspaceSubmissionUpdateInfo._visit(this, visitor);
            },
        };
    },
    traced: () => {
        return {
            type: \\"traced\\",
            _visit: function (visitor) {
                return TraceApi.WorkspaceSubmissionUpdateInfo._visit(this, visitor);
            },
        };
    },
    tracedV2: (value) => {
        return {
            ...value,
            type: \\"tracedV2\\",
            _visit: function (visitor) {
                return TraceApi.WorkspaceSubmissionUpdateInfo._visit(this, visitor);
            },
        };
    },
    errored: (value) => {
        return {
            value: value,
            type: \\"errored\\",
            _visit: function (visitor) {
                return TraceApi.WorkspaceSubmissionUpdateInfo._visit(this, visitor);
            },
        };
    },
    finished: () => {
        return {
            type: \\"finished\\",
            _visit: function (visitor) {
                return TraceApi.WorkspaceSubmissionUpdateInfo._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.WorkspaceSubmissionUpdateInfo._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case \\"running\\":
                return visitor.running(value.value);
            case \\"ran\\":
                return visitor.ran(value);
            case \\"stopped\\":
                return visitor.stopped();
            case \\"traced\\":
                return visitor.traced();
            case \\"tracedV2\\":
                return visitor.tracedV2(value);
            case \\"errored\\":
                return visitor.errored(value.value);
            case \\"finished\\":
                return visitor.finished();
            default:
                return visitor._other(value);
        }
    },
};
",
                    "name": "WorkspaceSubmissionUpdateInfo.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
export interface WorkspaceSubmitRequest {
    submissionId: TraceApi.SubmissionId;
    language: TraceApi.Language;
    submissionFiles: TraceApi.SubmissionFileInfo[];
    userId?: string;
}
",
                    "name": "WorkspaceSubmitRequest.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "WorkspaceSubmitRequest.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface WorkspaceTracedUpdate {
    traceResponsesSize: number;
}
",
                    "name": "WorkspaceTracedUpdate.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                    "name": "WorkspaceTracedUpdate.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./SubmissionId\\";
export * from \\"./ShareId\\";
export * from \\"./SubmissionRequest\\";
export * from \\"./InitializeProblemRequest\\";
export * from \\"./SubmitRequestV2\\";
export * from \\"./WorkspaceSubmitRequest\\";
export * from \\"./SubmissionFileInfo\\";
export * from \\"./SubmissionTypeEnum\\";
export * from \\"./StopRequest\\";
export * from \\"./SubmissionResponse\\";
export * from \\"./CodeExecutionUpdate\\";
export * from \\"./BuildingExecutorResponse\\";
export * from \\"./RunningResponse\\";
export * from \\"./RunningSubmissionState\\";
export * from \\"./ErroredResponse\\";
export * from \\"./ErrorInfo\\";
export * from \\"./CompileError\\";
export * from \\"./RuntimeError\\";
export * from \\"./InternalError\\";
export * from \\"./StoppedResponse\\";
export * from \\"./WorkspaceRanResponse\\";
export * from \\"./WorkspaceRunDetails\\";
export * from \\"./GradedResponse\\";
export * from \\"./GradedResponseV2\\";
export * from \\"./TestCaseGrade\\";
export * from \\"./TestCaseHiddenGrade\\";
export * from \\"./TestCaseNonHiddenGrade\\";
export * from \\"./RecordedResponseNotification\\";
export * from \\"./RecordingResponseNotification\\";
export * from \\"./LightweightStackframeInformation\\";
export * from \\"./TestCaseResultWithStdout\\";
export * from \\"./TestCaseResult\\";
export * from \\"./ActualResult\\";
export * from \\"./ExceptionV2\\";
export * from \\"./ExceptionInfo\\";
export * from \\"./InvalidRequestResponse\\";
export * from \\"./InvalidRequestCause\\";
export * from \\"./ExistingSubmissionExecuting\\";
export * from \\"./SubmissionIdNotFound\\";
export * from \\"./CustomTestCasesUnsupported\\";
export * from \\"./UnexpectedLanguageError\\";
export * from \\"./TerminatedResponse\\";
export * from \\"./FinishedResponse\\";
export * from \\"./StdoutResponse\\";
export * from \\"./StderrResponse\\";
export * from \\"./TraceResponse\\";
export * from \\"./TraceResponseV2\\";
export * from \\"./TracedFile\\";
export * from \\"./ExpressionLocation\\";
export * from \\"./StackInformation\\";
export * from \\"./StackFrame\\";
export * from \\"./Scope\\";
export * from \\"./ExecutionSessionResponse\\";
export * from \\"./ExecutionSessionStatus\\";
export * from \\"./SubmissionStatusV2\\";
export * from \\"./TestSubmissionStatusV2\\";
export * from \\"./WorkspaceSubmissionStatusV2\\";
export * from \\"./TestSubmissionUpdate\\";
export * from \\"./TestSubmissionUpdateInfo\\";
export * from \\"./WorkspaceSubmissionUpdate\\";
export * from \\"./WorkspaceSubmissionUpdateInfo\\";
export * from \\"./GradedTestCaseUpdate\\";
export * from \\"./RecordedTestCaseUpdate\\";
export * from \\"./WorkspaceTracedUpdate\\";
export * from \\"./SubmissionTypeState\\";
export * from \\"./WorkspaceSubmissionState\\";
export * from \\"./WorkspaceSubmissionStatus\\";
export * from \\"./TestSubmissionState\\";
export * from \\"./TestSubmissionStatus\\";
export * from \\"./SubmissionStatusForTestCase\\";
export * from \\"./TracedTestCase\\";
export * from \\"./TraceResponsesPage\\";
export * from \\"./TraceResponsesPageV2\\";
export * from \\"./GetTraceResponsesPageRequest\\";
export * from \\"./WorkspaceStarterFilesResponse\\";
export * from \\"./WorkspaceStarterFilesResponseV2\\";
export * from \\"./WorkspaceFiles\\";
export * from \\"./ExecutionSessionState\\";
export * from \\"./GetExecutionSessionStateResponse\\";
export * from \\"./GetSubmissionStateResponse\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./SubmissionId\\";
export * from \\"./ShareId\\";
export * from \\"./SubmissionRequest\\";
export * from \\"./InitializeProblemRequest\\";
export * from \\"./SubmitRequestV2\\";
export * from \\"./WorkspaceSubmitRequest\\";
export * from \\"./SubmissionFileInfo\\";
export * from \\"./SubmissionTypeEnum\\";
export * from \\"./StopRequest\\";
export * from \\"./SubmissionResponse\\";
export * from \\"./CodeExecutionUpdate\\";
export * from \\"./BuildingExecutorResponse\\";
export * from \\"./RunningResponse\\";
export * from \\"./RunningSubmissionState\\";
export * from \\"./ErroredResponse\\";
export * from \\"./ErrorInfo\\";
export * from \\"./CompileError\\";
export * from \\"./RuntimeError\\";
export * from \\"./InternalError\\";
export * from \\"./StoppedResponse\\";
export * from \\"./WorkspaceRanResponse\\";
export * from \\"./WorkspaceRunDetails\\";
export * from \\"./GradedResponse\\";
export * from \\"./GradedResponseV2\\";
export * from \\"./TestCaseGrade\\";
export * from \\"./TestCaseHiddenGrade\\";
export * from \\"./TestCaseNonHiddenGrade\\";
export * from \\"./RecordedResponseNotification\\";
export * from \\"./RecordingResponseNotification\\";
export * from \\"./LightweightStackframeInformation\\";
export * from \\"./TestCaseResultWithStdout\\";
export * from \\"./TestCaseResult\\";
export * from \\"./ActualResult\\";
export * from \\"./ExceptionV2\\";
export * from \\"./ExceptionInfo\\";
export * from \\"./InvalidRequestResponse\\";
export * from \\"./InvalidRequestCause\\";
export * from \\"./ExistingSubmissionExecuting\\";
export * from \\"./SubmissionIdNotFound\\";
export * from \\"./CustomTestCasesUnsupported\\";
export * from \\"./UnexpectedLanguageError\\";
export * from \\"./TerminatedResponse\\";
export * from \\"./FinishedResponse\\";
export * from \\"./StdoutResponse\\";
export * from \\"./StderrResponse\\";
export * from \\"./TraceResponse\\";
export * from \\"./TraceResponseV2\\";
export * from \\"./TracedFile\\";
export * from \\"./ExpressionLocation\\";
export * from \\"./StackInformation\\";
export * from \\"./StackFrame\\";
export * from \\"./Scope\\";
export * from \\"./ExecutionSessionResponse\\";
export * from \\"./ExecutionSessionStatus\\";
export * from \\"./SubmissionStatusV2\\";
export * from \\"./TestSubmissionStatusV2\\";
export * from \\"./WorkspaceSubmissionStatusV2\\";
export * from \\"./TestSubmissionUpdate\\";
export * from \\"./TestSubmissionUpdateInfo\\";
export * from \\"./WorkspaceSubmissionUpdate\\";
export * from \\"./WorkspaceSubmissionUpdateInfo\\";
export * from \\"./GradedTestCaseUpdate\\";
export * from \\"./RecordedTestCaseUpdate\\";
export * from \\"./WorkspaceTracedUpdate\\";
export * from \\"./SubmissionTypeState\\";
export * from \\"./WorkspaceSubmissionState\\";
export * from \\"./WorkspaceSubmissionStatus\\";
export * from \\"./TestSubmissionState\\";
export * from \\"./TestSubmissionStatus\\";
export * from \\"./SubmissionStatusForTestCase\\";
export * from \\"./TracedTestCase\\";
export * from \\"./TraceResponsesPage\\";
export * from \\"./TraceResponsesPageV2\\";
export * from \\"./GetTraceResponsesPageRequest\\";
export * from \\"./WorkspaceStarterFilesResponse\\";
export * from \\"./WorkspaceStarterFilesResponseV2\\";
export * from \\"./WorkspaceFiles\\";
export * from \\"./ExecutionSessionState\\";
export * from \\"./GetExecutionSessionStateResponse\\";
export * from \\"./GetSubmissionStateResponse\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "submission",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./service\\";
",
                "name": "index.d.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./service\\";
",
                "name": "index.js",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import express from \\"express\\";
import * as serializers from \\"../../../../serialization\\";
import { TraceApi } from \\"../../../..\\";
export declare abstract class AbstractSyspropService {
    private router;
    abstract setNumWarmInstances(request: express.Request<{
        language: serializers.Language.Raw;
        numWarmInstances: number;
    }, never, never, never>): Promise<void>;
    abstract getNumWarmInstances(request: express.Request<never, Record<TraceApi.Language, number | undefined>, never, never>): Promise<Record<TraceApi.Language, number | undefined>>;
    addMiddleware(handler: express.RequestHandler): this;
    toRouter(): express.Router;
}
",
                    "name": "AbstractSyspropService.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import express from \\"express\\";
import * as serializers from \\"../../../../serialization\\";
import * as errors from \\"../../../../errors\\";
export class AbstractSyspropService {
    router = express.Router({ mergeParams: true }).use(express.json());
    addMiddleware(handler) {
        this.router.use(handler);
        return this;
    }
    toRouter() {
        this.router.put(\\"/num-warm-instances/:language/:numWarmInstances\\", async (req, res, next) => {
            try {
                await this.setNumWarmInstances(req);
                res.sendStatus(204);
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'setNumWarmInstances' unexpectedly threw \${error.constructor.name}.\` +
                        \` If this was intentional, please add \${error.constructor.name} to\` +
                        \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).json(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.get(\\"/num-warm-instances\\", async (req, res, next) => {
            try {
                const response = await this.getNumWarmInstances(req);
                res.json(await serializers.sysprop.getNumWarmInstances.Response.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'getNumWarmInstances' unexpectedly threw \${error.constructor.name}.\` +
                        \` If this was intentional, please add \${error.constructor.name} to\` +
                        \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).json(\\"Internal Server Error\\");
                }
            }
            next();
        });
        return this.router;
    }
}
",
                    "name": "AbstractSyspropService.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { AbstractSyspropService } from \\"./AbstractSyspropService\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { AbstractSyspropService } from \\"./AbstractSyspropService\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                ],
                "name": "service",
                "type": "directory",
              },
            ],
            "name": "sysprop",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./resources\\";
",
                "name": "index.d.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./resources\\";
",
                "name": "index.js",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export * as problem from \\"./problem\\";
export * from \\"./problem/types\\";
export * as v3 from \\"./v3\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * as problem from \\"./problem\\";
export * from \\"./problem/types\\";
export * as v3 from \\"./v3\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export * from \\"./types\\";
export * from \\"./service\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export * from \\"./types\\";
export * from \\"./service\\";
",
                        "name": "index.js",
                        "type": "file",
                      },
                      Object {
                        "contents": Array [
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import express from \\"express\\";
import { TraceApi } from \\"../../../../../..\\";
import * as serializers from \\"../../../../../../serialization\\";
export declare abstract class AbstractProblemService {
    private router;
    abstract getLightweightProblems(request: express.Request<never, TraceApi.v2.LightweightProblemInfoV2[], never, never>): Promise<TraceApi.v2.LightweightProblemInfoV2[]>;
    abstract getProblems(request: express.Request<never, TraceApi.v2.ProblemInfoV2[], never, never>): Promise<TraceApi.v2.ProblemInfoV2[]>;
    abstract getLatestProblem(request: express.Request<{
        problemId: serializers.ProblemId.Raw;
    }, TraceApi.v2.ProblemInfoV2, never, never>): Promise<TraceApi.v2.ProblemInfoV2>;
    abstract getProblemVersion(request: express.Request<{
        problemId: serializers.ProblemId.Raw;
        problemVersion: number;
    }, TraceApi.v2.ProblemInfoV2, never, never>): Promise<TraceApi.v2.ProblemInfoV2>;
    addMiddleware(handler: express.RequestHandler): this;
    toRouter(): express.Router;
}
",
                            "name": "AbstractProblemService.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import express from \\"express\\";
import * as serializers from \\"../../../../../../serialization\\";
import * as errors from \\"../../../../../../errors\\";
export class AbstractProblemService {
    router = express.Router({ mergeParams: true }).use(express.json());
    addMiddleware(handler) {
        this.router.use(handler);
        return this;
    }
    toRouter() {
        this.router.get(\\"/lightweight-problem-info\\", async (req, res, next) => {
            try {
                const response = await this.getLightweightProblems(req);
                res.json(await serializers.v2.problem.getLightweightProblems.Response.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'getLightweightProblems' unexpectedly threw \${error.constructor.name}.\` +
                        \` If this was intentional, please add \${error.constructor.name} to\` +
                        \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).json(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.get(\\"/problem-info\\", async (req, res, next) => {
            try {
                const response = await this.getProblems(req);
                res.json(await serializers.v2.problem.getProblems.Response.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'getProblems' unexpectedly threw \${error.constructor.name}.\` +
                        \` If this was intentional, please add \${error.constructor.name} to\` +
                        \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).json(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.get(\\"/problem-info/:problemId\\", async (req, res, next) => {
            try {
                const response = await this.getLatestProblem(req);
                res.json(await serializers.v2.ProblemInfoV2.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'getLatestProblem' unexpectedly threw \${error.constructor.name}.\` +
                        \` If this was intentional, please add \${error.constructor.name} to\` +
                        \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).json(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.get(\\"/problem-info/:problemId/version/:problemVersion\\", async (req, res, next) => {
            try {
                const response = await this.getProblemVersion(req);
                res.json(await serializers.v2.ProblemInfoV2.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'getProblemVersion' unexpectedly threw \${error.constructor.name}.\` +
                        \` If this was intentional, please add \${error.constructor.name} to\` +
                        \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).json(\\"Internal Server Error\\");
                }
            }
            next();
        });
        return this.router;
    }
}
",
                            "name": "AbstractProblemService.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "export { AbstractProblemService } from \\"./AbstractProblemService\\";
",
                            "name": "index.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "export { AbstractProblemService } from \\"./AbstractProblemService\\";
",
                            "name": "index.js",
                            "type": "file",
                          },
                        ],
                        "name": "service",
                        "type": "directory",
                      },
                      Object {
                        "contents": Array [
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export declare type AssertCorrectnessCheck = TraceApi.v2.AssertCorrectnessCheck.DeepEquality | TraceApi.v2.AssertCorrectnessCheck.Custom | TraceApi.v2.AssertCorrectnessCheck._Unknown;
export declare namespace AssertCorrectnessCheck {
    interface DeepEquality extends TraceApi.v2.DeepEqualityCorrectnessCheck, _Utils {
        type: \\"deepEquality\\";
    }
    interface Custom extends TraceApi.v2.VoidFunctionDefinitionThatTakesActualResult, _Utils {
        type: \\"custom\\";
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.v2.AssertCorrectnessCheck._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        deepEquality: (value: TraceApi.v2.DeepEqualityCorrectnessCheck) => _Result;
        custom: (value: TraceApi.v2.VoidFunctionDefinitionThatTakesActualResult) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const AssertCorrectnessCheck: {
    readonly deepEquality: (value: TraceApi.v2.DeepEqualityCorrectnessCheck) => TraceApi.v2.AssertCorrectnessCheck.DeepEquality;
    readonly custom: (value: TraceApi.v2.VoidFunctionDefinitionThatTakesActualResult) => TraceApi.v2.AssertCorrectnessCheck.Custom;
    readonly _unknown: (value: {
        type: string;
    }) => TraceApi.v2.AssertCorrectnessCheck._Unknown;
    readonly _visit: <_Result>(value: TraceApi.v2.AssertCorrectnessCheck, visitor: TraceApi.v2.AssertCorrectnessCheck._Visitor<_Result>) => _Result;
};
",
                            "name": "AssertCorrectnessCheck.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export const AssertCorrectnessCheck = {
    deepEquality: (value) => {
        return {
            ...value,
            type: \\"deepEquality\\",
            _visit: function (visitor) {
                return TraceApi.v2.AssertCorrectnessCheck._visit(this, visitor);
            },
        };
    },
    custom: (value) => {
        return {
            ...value,
            type: \\"custom\\",
            _visit: function (visitor) {
                return TraceApi.v2.AssertCorrectnessCheck._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.v2.AssertCorrectnessCheck._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case \\"deepEquality\\":
                return visitor.deepEquality(value);
            case \\"custom\\":
                return visitor.custom(value);
            default:
                return visitor._other(value);
        }
    },
};
",
                            "name": "AssertCorrectnessCheck.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export interface BasicCustomFiles {
    methodName: string;
    signature: TraceApi.v2.NonVoidFunctionSignature;
    additionalFiles: Record<TraceApi.Language, TraceApi.v2.Files | undefined>;
    basicTestCaseTemplate: TraceApi.v2.BasicTestCaseTemplate;
}
",
                            "name": "BasicCustomFiles.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "BasicCustomFiles.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export interface BasicTestCaseTemplate {
    templateId: TraceApi.v2.TestCaseTemplateId;
    name: string;
    description: TraceApi.v2.TestCaseImplementationDescription;
    expectedValueParameterId: TraceApi.v2.ParameterId;
}
",
                            "name": "BasicTestCaseTemplate.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "BasicTestCaseTemplate.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export interface CreateProblemRequestV2 {
    problemName: string;
    problemDescription: TraceApi.ProblemDescription;
    customFiles: TraceApi.v2.CustomFiles;
    customTestCaseTemplates: TraceApi.v2.TestCaseTemplate[];
    testcases: TraceApi.v2.TestCaseV2[];
    supportedLanguages: TraceApi.Language[];
    isPublic: boolean;
}
",
                            "name": "CreateProblemRequestV2.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "CreateProblemRequestV2.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export declare type CustomFiles = TraceApi.v2.CustomFiles.Basic | TraceApi.v2.CustomFiles.Custom | TraceApi.v2.CustomFiles._Unknown;
export declare namespace CustomFiles {
    interface Basic extends TraceApi.v2.BasicCustomFiles, _Utils {
        type: \\"basic\\";
    }
    interface Custom extends _Utils {
        type: \\"custom\\";
        value: Record<TraceApi.Language, TraceApi.v2.Files | undefined>;
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.v2.CustomFiles._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        basic: (value: TraceApi.v2.BasicCustomFiles) => _Result;
        custom: (value: Record<TraceApi.Language, TraceApi.v2.Files | undefined>) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const CustomFiles: {
    readonly basic: (value: TraceApi.v2.BasicCustomFiles) => TraceApi.v2.CustomFiles.Basic;
    readonly custom: (value: Record<TraceApi.Language, TraceApi.v2.Files | undefined>) => TraceApi.v2.CustomFiles.Custom;
    readonly _unknown: (value: {
        type: string;
    }) => TraceApi.v2.CustomFiles._Unknown;
    readonly _visit: <_Result>(value: TraceApi.v2.CustomFiles, visitor: TraceApi.v2.CustomFiles._Visitor<_Result>) => _Result;
};
",
                            "name": "CustomFiles.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export const CustomFiles = {
    basic: (value) => {
        return {
            ...value,
            type: \\"basic\\",
            _visit: function (visitor) {
                return TraceApi.v2.CustomFiles._visit(this, visitor);
            },
        };
    },
    custom: (value) => {
        return {
            value: value,
            type: \\"custom\\",
            _visit: function (visitor) {
                return TraceApi.v2.CustomFiles._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.v2.CustomFiles._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case \\"basic\\":
                return visitor.basic(value);
            case \\"custom\\":
                return visitor.custom(value.value);
            default:
                return visitor._other(value);
        }
    },
};
",
                            "name": "CustomFiles.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export interface DeepEqualityCorrectnessCheck {
    expectedValueParameterId: TraceApi.v2.ParameterId;
}
",
                            "name": "DeepEqualityCorrectnessCheck.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "DeepEqualityCorrectnessCheck.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export interface DefaultProvidedFile {
    file: TraceApi.v2.FileInfoV2;
    relatedTypes: TraceApi.VariableType[];
}
",
                            "name": "DefaultProvidedFile.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "DefaultProvidedFile.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface FileInfoV2 {
    filename: string;
    directory: string;
    contents: string;
    editable: boolean;
}
",
                            "name": "FileInfoV2.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "FileInfoV2.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export interface Files {
    files: TraceApi.v2.FileInfoV2[];
}
",
                            "name": "Files.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "Files.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface FunctionImplementation {
    impl: string;
    imports?: string;
}
",
                            "name": "FunctionImplementation.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "FunctionImplementation.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export interface FunctionImplementationForMultipleLanguages {
    codeByLanguage: Record<TraceApi.Language, TraceApi.v2.FunctionImplementation | undefined>;
}
",
                            "name": "FunctionImplementationForMultipleLanguages.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "FunctionImplementationForMultipleLanguages.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export declare type FunctionSignature = TraceApi.v2.FunctionSignature.Void | TraceApi.v2.FunctionSignature.NonVoid
/**
 * Useful when specifying custom grading for a testcase where actualResult is defined. */
 | TraceApi.v2.FunctionSignature.VoidThatTakesActualResult | TraceApi.v2.FunctionSignature._Unknown;
export declare namespace FunctionSignature {
    interface Void extends TraceApi.v2.VoidFunctionSignature, _Utils {
        type: \\"void\\";
    }
    interface NonVoid extends TraceApi.v2.NonVoidFunctionSignature, _Utils {
        type: \\"nonVoid\\";
    }
    interface VoidThatTakesActualResult extends TraceApi.v2.VoidFunctionSignatureThatTakesActualResult, _Utils {
        type: \\"voidThatTakesActualResult\\";
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.v2.FunctionSignature._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        void: (value: TraceApi.v2.VoidFunctionSignature) => _Result;
        nonVoid: (value: TraceApi.v2.NonVoidFunctionSignature) => _Result;
        voidThatTakesActualResult: (value: TraceApi.v2.VoidFunctionSignatureThatTakesActualResult) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const FunctionSignature: {
    readonly void: (value: TraceApi.v2.VoidFunctionSignature) => TraceApi.v2.FunctionSignature.Void;
    readonly nonVoid: (value: TraceApi.v2.NonVoidFunctionSignature) => TraceApi.v2.FunctionSignature.NonVoid;
    readonly voidThatTakesActualResult: (value: TraceApi.v2.VoidFunctionSignatureThatTakesActualResult) => TraceApi.v2.FunctionSignature.VoidThatTakesActualResult;
    readonly _unknown: (value: {
        type: string;
    }) => TraceApi.v2.FunctionSignature._Unknown;
    readonly _visit: <_Result>(value: TraceApi.v2.FunctionSignature, visitor: TraceApi.v2.FunctionSignature._Visitor<_Result>) => _Result;
};
",
                            "name": "FunctionSignature.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export const FunctionSignature = {
    void: (value) => {
        return {
            ...value,
            type: \\"void\\",
            _visit: function (visitor) {
                return TraceApi.v2.FunctionSignature._visit(this, visitor);
            },
        };
    },
    nonVoid: (value) => {
        return {
            ...value,
            type: \\"nonVoid\\",
            _visit: function (visitor) {
                return TraceApi.v2.FunctionSignature._visit(this, visitor);
            },
        };
    },
    voidThatTakesActualResult: (value) => {
        return {
            ...value,
            type: \\"voidThatTakesActualResult\\",
            _visit: function (visitor) {
                return TraceApi.v2.FunctionSignature._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.v2.FunctionSignature._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case \\"void\\":
                return visitor.void(value);
            case \\"nonVoid\\":
                return visitor.nonVoid(value);
            case \\"voidThatTakesActualResult\\":
                return visitor.voidThatTakesActualResult(value);
            default:
                return visitor._other(value);
        }
    },
};
",
                            "name": "FunctionSignature.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export interface GeneratedFiles {
    generatedTestCaseFiles: Record<TraceApi.Language, TraceApi.v2.Files | undefined>;
    generatedTemplateFiles: Record<TraceApi.Language, TraceApi.v2.Files | undefined>;
    other: Record<TraceApi.Language, TraceApi.v2.Files | undefined>;
}
",
                            "name": "GeneratedFiles.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "GeneratedFiles.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export interface GetBasicSolutionFileRequest {
    methodName: string;
    signature: TraceApi.v2.NonVoidFunctionSignature;
}
",
                            "name": "GetBasicSolutionFileRequest.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "GetBasicSolutionFileRequest.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export interface GetBasicSolutionFileResponse {
    solutionFileByLanguage: Record<TraceApi.Language, TraceApi.v2.FileInfoV2 | undefined>;
}
",
                            "name": "GetBasicSolutionFileResponse.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "GetBasicSolutionFileResponse.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export interface GetFunctionSignatureRequest {
    functionSignature: TraceApi.v2.FunctionSignature;
}
",
                            "name": "GetFunctionSignatureRequest.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "GetFunctionSignatureRequest.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export interface GetFunctionSignatureResponse {
    functionByLanguage: Record<TraceApi.Language, string | undefined>;
}
",
                            "name": "GetFunctionSignatureResponse.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "GetFunctionSignatureResponse.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export interface GetGeneratedTestCaseFileRequest {
    template?: TraceApi.v2.TestCaseTemplate;
    testCase: TraceApi.v2.TestCaseV2;
}
",
                            "name": "GetGeneratedTestCaseFileRequest.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "GetGeneratedTestCaseFileRequest.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export interface GetGeneratedTestCaseTemplateFileRequest {
    template: TraceApi.v2.TestCaseTemplate;
}
",
                            "name": "GetGeneratedTestCaseTemplateFileRequest.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "GetGeneratedTestCaseTemplateFileRequest.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export interface LightweightProblemInfoV2 {
    problemId: TraceApi.ProblemId;
    problemName: string;
    problemVersion: number;
    variableTypes: TraceApi.VariableType[];
}
",
                            "name": "LightweightProblemInfoV2.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "LightweightProblemInfoV2.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export interface NonVoidFunctionDefinition {
    signature: TraceApi.v2.NonVoidFunctionSignature;
    code: TraceApi.v2.FunctionImplementationForMultipleLanguages;
}
",
                            "name": "NonVoidFunctionDefinition.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "NonVoidFunctionDefinition.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export interface NonVoidFunctionSignature {
    parameters: TraceApi.v2.Parameter[];
    returnType: TraceApi.VariableType;
}
",
                            "name": "NonVoidFunctionSignature.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "NonVoidFunctionSignature.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export interface Parameter {
    parameterId: TraceApi.v2.ParameterId;
    name: string;
    variableType: TraceApi.VariableType;
}
",
                            "name": "Parameter.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "Parameter.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export declare type ParameterId = string;
",
                            "name": "ParameterId.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "ParameterId.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export interface ProblemInfoV2 {
    problemId: TraceApi.ProblemId;
    problemDescription: TraceApi.ProblemDescription;
    problemName: string;
    problemVersion: number;
    supportedLanguages: TraceApi.Language[];
    customFiles: TraceApi.v2.CustomFiles;
    generatedFiles: TraceApi.v2.GeneratedFiles;
    customTestCaseTemplates: TraceApi.v2.TestCaseTemplate[];
    testcases: TraceApi.v2.TestCaseV2[];
    isPublic: boolean;
}
",
                            "name": "ProblemInfoV2.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "ProblemInfoV2.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface TestCaseExpects {
    expectedStdout?: string;
}
",
                            "name": "TestCaseExpects.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "TestCaseExpects.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export declare type TestCaseFunction = TraceApi.v2.TestCaseFunction.WithActualResult | TraceApi.v2.TestCaseFunction.Custom | TraceApi.v2.TestCaseFunction._Unknown;
export declare namespace TestCaseFunction {
    interface WithActualResult extends TraceApi.v2.TestCaseWithActualResultImplementation, _Utils {
        type: \\"withActualResult\\";
    }
    interface Custom extends TraceApi.v2.VoidFunctionDefinition, _Utils {
        type: \\"custom\\";
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.v2.TestCaseFunction._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        withActualResult: (value: TraceApi.v2.TestCaseWithActualResultImplementation) => _Result;
        custom: (value: TraceApi.v2.VoidFunctionDefinition) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const TestCaseFunction: {
    readonly withActualResult: (value: TraceApi.v2.TestCaseWithActualResultImplementation) => TraceApi.v2.TestCaseFunction.WithActualResult;
    readonly custom: (value: TraceApi.v2.VoidFunctionDefinition) => TraceApi.v2.TestCaseFunction.Custom;
    readonly _unknown: (value: {
        type: string;
    }) => TraceApi.v2.TestCaseFunction._Unknown;
    readonly _visit: <_Result>(value: TraceApi.v2.TestCaseFunction, visitor: TraceApi.v2.TestCaseFunction._Visitor<_Result>) => _Result;
};
",
                            "name": "TestCaseFunction.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export const TestCaseFunction = {
    withActualResult: (value) => {
        return {
            ...value,
            type: \\"withActualResult\\",
            _visit: function (visitor) {
                return TraceApi.v2.TestCaseFunction._visit(this, visitor);
            },
        };
    },
    custom: (value) => {
        return {
            ...value,
            type: \\"custom\\",
            _visit: function (visitor) {
                return TraceApi.v2.TestCaseFunction._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.v2.TestCaseFunction._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case \\"withActualResult\\":
                return visitor.withActualResult(value);
            case \\"custom\\":
                return visitor.custom(value);
            default:
                return visitor._other(value);
        }
    },
};
",
                            "name": "TestCaseFunction.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export declare type TestCaseId = string;
",
                            "name": "TestCaseId.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "TestCaseId.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export interface TestCaseImplementation {
    description: TraceApi.v2.TestCaseImplementationDescription;
    function: TraceApi.v2.TestCaseFunction;
}
",
                            "name": "TestCaseImplementation.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "TestCaseImplementation.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export interface TestCaseImplementationDescription {
    boards: TraceApi.v2.TestCaseImplementationDescriptionBoard[];
}
",
                            "name": "TestCaseImplementationDescription.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "TestCaseImplementationDescription.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export declare type TestCaseImplementationDescriptionBoard = TraceApi.v2.TestCaseImplementationDescriptionBoard.Html | TraceApi.v2.TestCaseImplementationDescriptionBoard.ParamId | TraceApi.v2.TestCaseImplementationDescriptionBoard._Unknown;
export declare namespace TestCaseImplementationDescriptionBoard {
    interface Html extends _Utils {
        type: \\"html\\";
        value: string;
    }
    interface ParamId extends _Utils {
        type: \\"paramId\\";
        value: TraceApi.v2.ParameterId;
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.v2.TestCaseImplementationDescriptionBoard._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        html: (value: string) => _Result;
        paramId: (value: TraceApi.v2.ParameterId) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const TestCaseImplementationDescriptionBoard: {
    readonly html: (value: string) => TraceApi.v2.TestCaseImplementationDescriptionBoard.Html;
    readonly paramId: (value: TraceApi.v2.ParameterId) => TraceApi.v2.TestCaseImplementationDescriptionBoard.ParamId;
    readonly _unknown: (value: {
        type: string;
    }) => TraceApi.v2.TestCaseImplementationDescriptionBoard._Unknown;
    readonly _visit: <_Result>(value: TraceApi.v2.TestCaseImplementationDescriptionBoard, visitor: TraceApi.v2.TestCaseImplementationDescriptionBoard._Visitor<_Result>) => _Result;
};
",
                            "name": "TestCaseImplementationDescriptionBoard.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export const TestCaseImplementationDescriptionBoard = {
    html: (value) => {
        return {
            value: value,
            type: \\"html\\",
            _visit: function (visitor) {
                return TraceApi.v2.TestCaseImplementationDescriptionBoard._visit(this, visitor);
            },
        };
    },
    paramId: (value) => {
        return {
            value: value,
            type: \\"paramId\\",
            _visit: function (visitor) {
                return TraceApi.v2.TestCaseImplementationDescriptionBoard._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.v2.TestCaseImplementationDescriptionBoard._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case \\"html\\":
                return visitor.html(value.value);
            case \\"paramId\\":
                return visitor.paramId(value.value);
            default:
                return visitor._other(value);
        }
    },
};
",
                            "name": "TestCaseImplementationDescriptionBoard.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export declare type TestCaseImplementationReference = TraceApi.v2.TestCaseImplementationReference.TemplateId | TraceApi.v2.TestCaseImplementationReference.Implementation | TraceApi.v2.TestCaseImplementationReference._Unknown;
export declare namespace TestCaseImplementationReference {
    interface TemplateId extends _Utils {
        type: \\"templateId\\";
        value: TraceApi.v2.TestCaseTemplateId;
    }
    interface Implementation extends TraceApi.v2.TestCaseImplementation, _Utils {
        type: \\"implementation\\";
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.v2.TestCaseImplementationReference._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        templateId: (value: TraceApi.v2.TestCaseTemplateId) => _Result;
        implementation: (value: TraceApi.v2.TestCaseImplementation) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const TestCaseImplementationReference: {
    readonly templateId: (value: TraceApi.v2.TestCaseTemplateId) => TraceApi.v2.TestCaseImplementationReference.TemplateId;
    readonly implementation: (value: TraceApi.v2.TestCaseImplementation) => TraceApi.v2.TestCaseImplementationReference.Implementation;
    readonly _unknown: (value: {
        type: string;
    }) => TraceApi.v2.TestCaseImplementationReference._Unknown;
    readonly _visit: <_Result>(value: TraceApi.v2.TestCaseImplementationReference, visitor: TraceApi.v2.TestCaseImplementationReference._Visitor<_Result>) => _Result;
};
",
                            "name": "TestCaseImplementationReference.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export const TestCaseImplementationReference = {
    templateId: (value) => {
        return {
            value: value,
            type: \\"templateId\\",
            _visit: function (visitor) {
                return TraceApi.v2.TestCaseImplementationReference._visit(this, visitor);
            },
        };
    },
    implementation: (value) => {
        return {
            ...value,
            type: \\"implementation\\",
            _visit: function (visitor) {
                return TraceApi.v2.TestCaseImplementationReference._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.v2.TestCaseImplementationReference._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case \\"templateId\\":
                return visitor.templateId(value.value);
            case \\"implementation\\":
                return visitor.implementation(value);
            default:
                return visitor._other(value);
        }
    },
};
",
                            "name": "TestCaseImplementationReference.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export interface TestCaseMetadata {
    id: TraceApi.v2.TestCaseId;
    name: string;
    hidden: boolean;
}
",
                            "name": "TestCaseMetadata.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "TestCaseMetadata.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export interface TestCaseTemplate {
    templateId: TraceApi.v2.TestCaseTemplateId;
    name: string;
    implementation: TraceApi.v2.TestCaseImplementation;
}
",
                            "name": "TestCaseTemplate.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "TestCaseTemplate.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export declare type TestCaseTemplateId = string;
",
                            "name": "TestCaseTemplateId.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "TestCaseTemplateId.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export interface TestCaseV2 {
    metadata: TraceApi.v2.TestCaseMetadata;
    implementation: TraceApi.v2.TestCaseImplementationReference;
    arguments: Record<TraceApi.v2.ParameterId, TraceApi.VariableValue>;
    expects?: TraceApi.v2.TestCaseExpects;
}
",
                            "name": "TestCaseV2.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "TestCaseV2.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export interface TestCaseWithActualResultImplementation {
    getActualResult: TraceApi.v2.NonVoidFunctionDefinition;
    assertCorrectnessCheck: TraceApi.v2.AssertCorrectnessCheck;
}
",
                            "name": "TestCaseWithActualResultImplementation.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "TestCaseWithActualResultImplementation.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export interface VoidFunctionDefinition {
    parameters: TraceApi.v2.Parameter[];
    code: TraceApi.v2.FunctionImplementationForMultipleLanguages;
}
",
                            "name": "VoidFunctionDefinition.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "VoidFunctionDefinition.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
/**
 * The generated signature will include an additional param, actualResult
 */
export interface VoidFunctionDefinitionThatTakesActualResult {
    additionalParameters: TraceApi.v2.Parameter[];
    code: TraceApi.v2.FunctionImplementationForMultipleLanguages;
}
",
                            "name": "VoidFunctionDefinitionThatTakesActualResult.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "VoidFunctionDefinitionThatTakesActualResult.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export interface VoidFunctionSignature {
    parameters: TraceApi.v2.Parameter[];
}
",
                            "name": "VoidFunctionSignature.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "VoidFunctionSignature.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
export interface VoidFunctionSignatureThatTakesActualResult {
    parameters: TraceApi.v2.Parameter[];
    actualResultType: TraceApi.VariableType;
}
",
                            "name": "VoidFunctionSignatureThatTakesActualResult.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                            "name": "VoidFunctionSignatureThatTakesActualResult.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "export * from \\"./TestCaseTemplateId\\";
export * from \\"./TestCaseId\\";
export * from \\"./ParameterId\\";
export * from \\"./ProblemInfoV2\\";
export * from \\"./LightweightProblemInfoV2\\";
export * from \\"./CreateProblemRequestV2\\";
export * from \\"./TestCaseV2\\";
export * from \\"./TestCaseExpects\\";
export * from \\"./TestCaseImplementationReference\\";
export * from \\"./BasicTestCaseTemplate\\";
export * from \\"./TestCaseTemplate\\";
export * from \\"./TestCaseImplementation\\";
export * from \\"./TestCaseFunction\\";
export * from \\"./TestCaseWithActualResultImplementation\\";
export * from \\"./VoidFunctionDefinition\\";
export * from \\"./Parameter\\";
export * from \\"./NonVoidFunctionDefinition\\";
export * from \\"./VoidFunctionSignature\\";
export * from \\"./NonVoidFunctionSignature\\";
export * from \\"./VoidFunctionSignatureThatTakesActualResult\\";
export * from \\"./AssertCorrectnessCheck\\";
export * from \\"./DeepEqualityCorrectnessCheck\\";
export * from \\"./VoidFunctionDefinitionThatTakesActualResult\\";
export * from \\"./TestCaseImplementationDescription\\";
export * from \\"./TestCaseImplementationDescriptionBoard\\";
export * from \\"./TestCaseMetadata\\";
export * from \\"./FunctionImplementationForMultipleLanguages\\";
export * from \\"./FunctionImplementation\\";
export * from \\"./GeneratedFiles\\";
export * from \\"./CustomFiles\\";
export * from \\"./BasicCustomFiles\\";
export * from \\"./Files\\";
export * from \\"./FileInfoV2\\";
export * from \\"./DefaultProvidedFile\\";
export * from \\"./FunctionSignature\\";
export * from \\"./GetFunctionSignatureRequest\\";
export * from \\"./GetFunctionSignatureResponse\\";
export * from \\"./GetBasicSolutionFileRequest\\";
export * from \\"./GetBasicSolutionFileResponse\\";
export * from \\"./GetGeneratedTestCaseFileRequest\\";
export * from \\"./GetGeneratedTestCaseTemplateFileRequest\\";
",
                            "name": "index.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "export * from \\"./TestCaseTemplateId\\";
export * from \\"./TestCaseId\\";
export * from \\"./ParameterId\\";
export * from \\"./ProblemInfoV2\\";
export * from \\"./LightweightProblemInfoV2\\";
export * from \\"./CreateProblemRequestV2\\";
export * from \\"./TestCaseV2\\";
export * from \\"./TestCaseExpects\\";
export * from \\"./TestCaseImplementationReference\\";
export * from \\"./BasicTestCaseTemplate\\";
export * from \\"./TestCaseTemplate\\";
export * from \\"./TestCaseImplementation\\";
export * from \\"./TestCaseFunction\\";
export * from \\"./TestCaseWithActualResultImplementation\\";
export * from \\"./VoidFunctionDefinition\\";
export * from \\"./Parameter\\";
export * from \\"./NonVoidFunctionDefinition\\";
export * from \\"./VoidFunctionSignature\\";
export * from \\"./NonVoidFunctionSignature\\";
export * from \\"./VoidFunctionSignatureThatTakesActualResult\\";
export * from \\"./AssertCorrectnessCheck\\";
export * from \\"./DeepEqualityCorrectnessCheck\\";
export * from \\"./VoidFunctionDefinitionThatTakesActualResult\\";
export * from \\"./TestCaseImplementationDescription\\";
export * from \\"./TestCaseImplementationDescriptionBoard\\";
export * from \\"./TestCaseMetadata\\";
export * from \\"./FunctionImplementationForMultipleLanguages\\";
export * from \\"./FunctionImplementation\\";
export * from \\"./GeneratedFiles\\";
export * from \\"./CustomFiles\\";
export * from \\"./BasicCustomFiles\\";
export * from \\"./Files\\";
export * from \\"./FileInfoV2\\";
export * from \\"./DefaultProvidedFile\\";
export * from \\"./FunctionSignature\\";
export * from \\"./GetFunctionSignatureRequest\\";
export * from \\"./GetFunctionSignatureResponse\\";
export * from \\"./GetBasicSolutionFileRequest\\";
export * from \\"./GetBasicSolutionFileResponse\\";
export * from \\"./GetGeneratedTestCaseFileRequest\\";
export * from \\"./GetGeneratedTestCaseTemplateFileRequest\\";
",
                            "name": "index.js",
                            "type": "file",
                          },
                        ],
                        "name": "types",
                        "type": "directory",
                      },
                    ],
                    "name": "problem",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export * from \\"./resources\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export * from \\"./resources\\";
",
                        "name": "index.js",
                        "type": "file",
                      },
                      Object {
                        "contents": Array [
                          Object {
                            "contents": "export * as problem from \\"./problem\\";
export * from \\"./problem/types\\";
",
                            "name": "index.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "export * as problem from \\"./problem\\";
export * from \\"./problem/types\\";
",
                            "name": "index.js",
                            "type": "file",
                          },
                          Object {
                            "contents": Array [
                              Object {
                                "contents": "export * from \\"./types\\";
export * from \\"./service\\";
",
                                "name": "index.d.ts",
                                "type": "file",
                              },
                              Object {
                                "contents": "export * from \\"./types\\";
export * from \\"./service\\";
",
                                "name": "index.js",
                                "type": "file",
                              },
                              Object {
                                "contents": Array [
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import express from \\"express\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as serializers from \\"../../../../../../../../serialization\\";
export declare abstract class AbstractProblemService {
    private router;
    abstract getLightweightProblems(request: express.Request<never, TraceApi.v2.v3.LightweightProblemInfoV2[], never, never>): Promise<TraceApi.v2.v3.LightweightProblemInfoV2[]>;
    abstract getProblems(request: express.Request<never, TraceApi.v2.v3.ProblemInfoV2[], never, never>): Promise<TraceApi.v2.v3.ProblemInfoV2[]>;
    abstract getLatestProblem(request: express.Request<{
        problemId: serializers.ProblemId.Raw;
    }, TraceApi.v2.v3.ProblemInfoV2, never, never>): Promise<TraceApi.v2.v3.ProblemInfoV2>;
    abstract getProblemVersion(request: express.Request<{
        problemId: serializers.ProblemId.Raw;
        problemVersion: number;
    }, TraceApi.v2.v3.ProblemInfoV2, never, never>): Promise<TraceApi.v2.v3.ProblemInfoV2>;
    addMiddleware(handler: express.RequestHandler): this;
    toRouter(): express.Router;
}
",
                                    "name": "AbstractProblemService.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import express from \\"express\\";
import * as serializers from \\"../../../../../../../../serialization\\";
import * as errors from \\"../../../../../../../../errors\\";
export class AbstractProblemService {
    router = express.Router({ mergeParams: true }).use(express.json());
    addMiddleware(handler) {
        this.router.use(handler);
        return this;
    }
    toRouter() {
        this.router.get(\\"/lightweight-problem-info\\", async (req, res, next) => {
            try {
                const response = await this.getLightweightProblems(req);
                res.json(await serializers.v2.v3.problem.getLightweightProblems.Response.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'getLightweightProblems' unexpectedly threw \${error.constructor.name}.\` +
                        \` If this was intentional, please add \${error.constructor.name} to\` +
                        \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).json(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.get(\\"/problem-info\\", async (req, res, next) => {
            try {
                const response = await this.getProblems(req);
                res.json(await serializers.v2.v3.problem.getProblems.Response.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'getProblems' unexpectedly threw \${error.constructor.name}.\` +
                        \` If this was intentional, please add \${error.constructor.name} to\` +
                        \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).json(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.get(\\"/problem-info/:problemId\\", async (req, res, next) => {
            try {
                const response = await this.getLatestProblem(req);
                res.json(await serializers.v2.v3.ProblemInfoV2.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'getLatestProblem' unexpectedly threw \${error.constructor.name}.\` +
                        \` If this was intentional, please add \${error.constructor.name} to\` +
                        \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).json(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.get(\\"/problem-info/:problemId/version/:problemVersion\\", async (req, res, next) => {
            try {
                const response = await this.getProblemVersion(req);
                res.json(await serializers.v2.v3.ProblemInfoV2.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'getProblemVersion' unexpectedly threw \${error.constructor.name}.\` +
                        \` If this was intentional, please add \${error.constructor.name} to\` +
                        \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).json(\\"Internal Server Error\\");
                }
            }
            next();
        });
        return this.router;
    }
}
",
                                    "name": "AbstractProblemService.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "export { AbstractProblemService } from \\"./AbstractProblemService\\";
",
                                    "name": "index.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "export { AbstractProblemService } from \\"./AbstractProblemService\\";
",
                                    "name": "index.js",
                                    "type": "file",
                                  },
                                ],
                                "name": "service",
                                "type": "directory",
                              },
                              Object {
                                "contents": Array [
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export declare type AssertCorrectnessCheck = TraceApi.v2.v3.AssertCorrectnessCheck.DeepEquality | TraceApi.v2.v3.AssertCorrectnessCheck.Custom | TraceApi.v2.v3.AssertCorrectnessCheck._Unknown;
export declare namespace AssertCorrectnessCheck {
    interface DeepEquality extends TraceApi.v2.v3.DeepEqualityCorrectnessCheck, _Utils {
        type: \\"deepEquality\\";
    }
    interface Custom extends TraceApi.v2.v3.VoidFunctionDefinitionThatTakesActualResult, _Utils {
        type: \\"custom\\";
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.v2.v3.AssertCorrectnessCheck._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        deepEquality: (value: TraceApi.v2.v3.DeepEqualityCorrectnessCheck) => _Result;
        custom: (value: TraceApi.v2.v3.VoidFunctionDefinitionThatTakesActualResult) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const AssertCorrectnessCheck: {
    readonly deepEquality: (value: TraceApi.v2.v3.DeepEqualityCorrectnessCheck) => TraceApi.v2.v3.AssertCorrectnessCheck.DeepEquality;
    readonly custom: (value: TraceApi.v2.v3.VoidFunctionDefinitionThatTakesActualResult) => TraceApi.v2.v3.AssertCorrectnessCheck.Custom;
    readonly _unknown: (value: {
        type: string;
    }) => TraceApi.v2.v3.AssertCorrectnessCheck._Unknown;
    readonly _visit: <_Result>(value: TraceApi.v2.v3.AssertCorrectnessCheck, visitor: TraceApi.v2.v3.AssertCorrectnessCheck._Visitor<_Result>) => _Result;
};
",
                                    "name": "AssertCorrectnessCheck.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export const AssertCorrectnessCheck = {
    deepEquality: (value) => {
        return {
            ...value,
            type: \\"deepEquality\\",
            _visit: function (visitor) {
                return TraceApi.v2.v3.AssertCorrectnessCheck._visit(this, visitor);
            },
        };
    },
    custom: (value) => {
        return {
            ...value,
            type: \\"custom\\",
            _visit: function (visitor) {
                return TraceApi.v2.v3.AssertCorrectnessCheck._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.v2.v3.AssertCorrectnessCheck._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case \\"deepEquality\\":
                return visitor.deepEquality(value);
            case \\"custom\\":
                return visitor.custom(value);
            default:
                return visitor._other(value);
        }
    },
};
",
                                    "name": "AssertCorrectnessCheck.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export interface BasicCustomFiles {
    methodName: string;
    signature: TraceApi.v2.v3.NonVoidFunctionSignature;
    additionalFiles: Record<TraceApi.Language, TraceApi.v2.v3.Files | undefined>;
    basicTestCaseTemplate: TraceApi.v2.v3.BasicTestCaseTemplate;
}
",
                                    "name": "BasicCustomFiles.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "BasicCustomFiles.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export interface BasicTestCaseTemplate {
    templateId: TraceApi.v2.v3.TestCaseTemplateId;
    name: string;
    description: TraceApi.v2.v3.TestCaseImplementationDescription;
    expectedValueParameterId: TraceApi.v2.v3.ParameterId;
}
",
                                    "name": "BasicTestCaseTemplate.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "BasicTestCaseTemplate.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export interface CreateProblemRequestV2 {
    problemName: string;
    problemDescription: TraceApi.ProblemDescription;
    customFiles: TraceApi.v2.v3.CustomFiles;
    customTestCaseTemplates: TraceApi.v2.v3.TestCaseTemplate[];
    testcases: TraceApi.v2.v3.TestCaseV2[];
    supportedLanguages: TraceApi.Language[];
    isPublic: boolean;
}
",
                                    "name": "CreateProblemRequestV2.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "CreateProblemRequestV2.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export declare type CustomFiles = TraceApi.v2.v3.CustomFiles.Basic | TraceApi.v2.v3.CustomFiles.Custom | TraceApi.v2.v3.CustomFiles._Unknown;
export declare namespace CustomFiles {
    interface Basic extends TraceApi.v2.v3.BasicCustomFiles, _Utils {
        type: \\"basic\\";
    }
    interface Custom extends _Utils {
        type: \\"custom\\";
        value: Record<TraceApi.Language, TraceApi.v2.v3.Files | undefined>;
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.v2.v3.CustomFiles._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        basic: (value: TraceApi.v2.v3.BasicCustomFiles) => _Result;
        custom: (value: Record<TraceApi.Language, TraceApi.v2.v3.Files | undefined>) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const CustomFiles: {
    readonly basic: (value: TraceApi.v2.v3.BasicCustomFiles) => TraceApi.v2.v3.CustomFiles.Basic;
    readonly custom: (value: Record<TraceApi.Language, TraceApi.v2.v3.Files | undefined>) => TraceApi.v2.v3.CustomFiles.Custom;
    readonly _unknown: (value: {
        type: string;
    }) => TraceApi.v2.v3.CustomFiles._Unknown;
    readonly _visit: <_Result>(value: TraceApi.v2.v3.CustomFiles, visitor: TraceApi.v2.v3.CustomFiles._Visitor<_Result>) => _Result;
};
",
                                    "name": "CustomFiles.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export const CustomFiles = {
    basic: (value) => {
        return {
            ...value,
            type: \\"basic\\",
            _visit: function (visitor) {
                return TraceApi.v2.v3.CustomFiles._visit(this, visitor);
            },
        };
    },
    custom: (value) => {
        return {
            value: value,
            type: \\"custom\\",
            _visit: function (visitor) {
                return TraceApi.v2.v3.CustomFiles._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.v2.v3.CustomFiles._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case \\"basic\\":
                return visitor.basic(value);
            case \\"custom\\":
                return visitor.custom(value.value);
            default:
                return visitor._other(value);
        }
    },
};
",
                                    "name": "CustomFiles.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export interface DeepEqualityCorrectnessCheck {
    expectedValueParameterId: TraceApi.v2.v3.ParameterId;
}
",
                                    "name": "DeepEqualityCorrectnessCheck.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "DeepEqualityCorrectnessCheck.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export interface DefaultProvidedFile {
    file: TraceApi.v2.v3.FileInfoV2;
    relatedTypes: TraceApi.VariableType[];
}
",
                                    "name": "DefaultProvidedFile.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "DefaultProvidedFile.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface FileInfoV2 {
    filename: string;
    directory: string;
    contents: string;
    editable: boolean;
}
",
                                    "name": "FileInfoV2.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "FileInfoV2.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export interface Files {
    files: TraceApi.v2.v3.FileInfoV2[];
}
",
                                    "name": "Files.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "Files.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface FunctionImplementation {
    impl: string;
    imports?: string;
}
",
                                    "name": "FunctionImplementation.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "FunctionImplementation.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export interface FunctionImplementationForMultipleLanguages {
    codeByLanguage: Record<TraceApi.Language, TraceApi.v2.v3.FunctionImplementation | undefined>;
}
",
                                    "name": "FunctionImplementationForMultipleLanguages.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "FunctionImplementationForMultipleLanguages.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export declare type FunctionSignature = TraceApi.v2.v3.FunctionSignature.Void | TraceApi.v2.v3.FunctionSignature.NonVoid
/**
 * Useful when specifying custom grading for a testcase where actualResult is defined. */
 | TraceApi.v2.v3.FunctionSignature.VoidThatTakesActualResult | TraceApi.v2.v3.FunctionSignature._Unknown;
export declare namespace FunctionSignature {
    interface Void extends TraceApi.v2.v3.VoidFunctionSignature, _Utils {
        type: \\"void\\";
    }
    interface NonVoid extends TraceApi.v2.v3.NonVoidFunctionSignature, _Utils {
        type: \\"nonVoid\\";
    }
    interface VoidThatTakesActualResult extends TraceApi.v2.v3.VoidFunctionSignatureThatTakesActualResult, _Utils {
        type: \\"voidThatTakesActualResult\\";
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.v2.v3.FunctionSignature._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        void: (value: TraceApi.v2.v3.VoidFunctionSignature) => _Result;
        nonVoid: (value: TraceApi.v2.v3.NonVoidFunctionSignature) => _Result;
        voidThatTakesActualResult: (value: TraceApi.v2.v3.VoidFunctionSignatureThatTakesActualResult) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const FunctionSignature: {
    readonly void: (value: TraceApi.v2.v3.VoidFunctionSignature) => TraceApi.v2.v3.FunctionSignature.Void;
    readonly nonVoid: (value: TraceApi.v2.v3.NonVoidFunctionSignature) => TraceApi.v2.v3.FunctionSignature.NonVoid;
    readonly voidThatTakesActualResult: (value: TraceApi.v2.v3.VoidFunctionSignatureThatTakesActualResult) => TraceApi.v2.v3.FunctionSignature.VoidThatTakesActualResult;
    readonly _unknown: (value: {
        type: string;
    }) => TraceApi.v2.v3.FunctionSignature._Unknown;
    readonly _visit: <_Result>(value: TraceApi.v2.v3.FunctionSignature, visitor: TraceApi.v2.v3.FunctionSignature._Visitor<_Result>) => _Result;
};
",
                                    "name": "FunctionSignature.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export const FunctionSignature = {
    void: (value) => {
        return {
            ...value,
            type: \\"void\\",
            _visit: function (visitor) {
                return TraceApi.v2.v3.FunctionSignature._visit(this, visitor);
            },
        };
    },
    nonVoid: (value) => {
        return {
            ...value,
            type: \\"nonVoid\\",
            _visit: function (visitor) {
                return TraceApi.v2.v3.FunctionSignature._visit(this, visitor);
            },
        };
    },
    voidThatTakesActualResult: (value) => {
        return {
            ...value,
            type: \\"voidThatTakesActualResult\\",
            _visit: function (visitor) {
                return TraceApi.v2.v3.FunctionSignature._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.v2.v3.FunctionSignature._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case \\"void\\":
                return visitor.void(value);
            case \\"nonVoid\\":
                return visitor.nonVoid(value);
            case \\"voidThatTakesActualResult\\":
                return visitor.voidThatTakesActualResult(value);
            default:
                return visitor._other(value);
        }
    },
};
",
                                    "name": "FunctionSignature.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export interface GeneratedFiles {
    generatedTestCaseFiles: Record<TraceApi.Language, TraceApi.v2.v3.Files | undefined>;
    generatedTemplateFiles: Record<TraceApi.Language, TraceApi.v2.v3.Files | undefined>;
    other: Record<TraceApi.Language, TraceApi.v2.v3.Files | undefined>;
}
",
                                    "name": "GeneratedFiles.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "GeneratedFiles.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export interface GetBasicSolutionFileRequest {
    methodName: string;
    signature: TraceApi.v2.v3.NonVoidFunctionSignature;
}
",
                                    "name": "GetBasicSolutionFileRequest.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "GetBasicSolutionFileRequest.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export interface GetBasicSolutionFileResponse {
    solutionFileByLanguage: Record<TraceApi.Language, TraceApi.v2.v3.FileInfoV2 | undefined>;
}
",
                                    "name": "GetBasicSolutionFileResponse.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "GetBasicSolutionFileResponse.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export interface GetFunctionSignatureRequest {
    functionSignature: TraceApi.v2.v3.FunctionSignature;
}
",
                                    "name": "GetFunctionSignatureRequest.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "GetFunctionSignatureRequest.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export interface GetFunctionSignatureResponse {
    functionByLanguage: Record<TraceApi.Language, string | undefined>;
}
",
                                    "name": "GetFunctionSignatureResponse.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "GetFunctionSignatureResponse.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export interface GetGeneratedTestCaseFileRequest {
    template?: TraceApi.v2.v3.TestCaseTemplate;
    testCase: TraceApi.v2.v3.TestCaseV2;
}
",
                                    "name": "GetGeneratedTestCaseFileRequest.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "GetGeneratedTestCaseFileRequest.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export interface GetGeneratedTestCaseTemplateFileRequest {
    template: TraceApi.v2.v3.TestCaseTemplate;
}
",
                                    "name": "GetGeneratedTestCaseTemplateFileRequest.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "GetGeneratedTestCaseTemplateFileRequest.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export interface LightweightProblemInfoV2 {
    problemId: TraceApi.ProblemId;
    problemName: string;
    problemVersion: number;
    variableTypes: TraceApi.VariableType[];
}
",
                                    "name": "LightweightProblemInfoV2.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "LightweightProblemInfoV2.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export interface NonVoidFunctionDefinition {
    signature: TraceApi.v2.v3.NonVoidFunctionSignature;
    code: TraceApi.v2.v3.FunctionImplementationForMultipleLanguages;
}
",
                                    "name": "NonVoidFunctionDefinition.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "NonVoidFunctionDefinition.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export interface NonVoidFunctionSignature {
    parameters: TraceApi.v2.v3.Parameter[];
    returnType: TraceApi.VariableType;
}
",
                                    "name": "NonVoidFunctionSignature.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "NonVoidFunctionSignature.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export interface Parameter {
    parameterId: TraceApi.v2.v3.ParameterId;
    name: string;
    variableType: TraceApi.VariableType;
}
",
                                    "name": "Parameter.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "Parameter.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export declare type ParameterId = string;
",
                                    "name": "ParameterId.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "ParameterId.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export interface ProblemInfoV2 {
    problemId: TraceApi.ProblemId;
    problemDescription: TraceApi.ProblemDescription;
    problemName: string;
    problemVersion: number;
    supportedLanguages: TraceApi.Language[];
    customFiles: TraceApi.v2.v3.CustomFiles;
    generatedFiles: TraceApi.v2.v3.GeneratedFiles;
    customTestCaseTemplates: TraceApi.v2.v3.TestCaseTemplate[];
    testcases: TraceApi.v2.v3.TestCaseV2[];
    isPublic: boolean;
}
",
                                    "name": "ProblemInfoV2.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "ProblemInfoV2.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface TestCaseExpects {
    expectedStdout?: string;
}
",
                                    "name": "TestCaseExpects.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "TestCaseExpects.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export declare type TestCaseFunction = TraceApi.v2.v3.TestCaseFunction.WithActualResult | TraceApi.v2.v3.TestCaseFunction.Custom | TraceApi.v2.v3.TestCaseFunction._Unknown;
export declare namespace TestCaseFunction {
    interface WithActualResult extends TraceApi.v2.v3.TestCaseWithActualResultImplementation, _Utils {
        type: \\"withActualResult\\";
    }
    interface Custom extends TraceApi.v2.v3.VoidFunctionDefinition, _Utils {
        type: \\"custom\\";
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.v2.v3.TestCaseFunction._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        withActualResult: (value: TraceApi.v2.v3.TestCaseWithActualResultImplementation) => _Result;
        custom: (value: TraceApi.v2.v3.VoidFunctionDefinition) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const TestCaseFunction: {
    readonly withActualResult: (value: TraceApi.v2.v3.TestCaseWithActualResultImplementation) => TraceApi.v2.v3.TestCaseFunction.WithActualResult;
    readonly custom: (value: TraceApi.v2.v3.VoidFunctionDefinition) => TraceApi.v2.v3.TestCaseFunction.Custom;
    readonly _unknown: (value: {
        type: string;
    }) => TraceApi.v2.v3.TestCaseFunction._Unknown;
    readonly _visit: <_Result>(value: TraceApi.v2.v3.TestCaseFunction, visitor: TraceApi.v2.v3.TestCaseFunction._Visitor<_Result>) => _Result;
};
",
                                    "name": "TestCaseFunction.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export const TestCaseFunction = {
    withActualResult: (value) => {
        return {
            ...value,
            type: \\"withActualResult\\",
            _visit: function (visitor) {
                return TraceApi.v2.v3.TestCaseFunction._visit(this, visitor);
            },
        };
    },
    custom: (value) => {
        return {
            ...value,
            type: \\"custom\\",
            _visit: function (visitor) {
                return TraceApi.v2.v3.TestCaseFunction._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.v2.v3.TestCaseFunction._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case \\"withActualResult\\":
                return visitor.withActualResult(value);
            case \\"custom\\":
                return visitor.custom(value);
            default:
                return visitor._other(value);
        }
    },
};
",
                                    "name": "TestCaseFunction.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export declare type TestCaseId = string;
",
                                    "name": "TestCaseId.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "TestCaseId.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export interface TestCaseImplementation {
    description: TraceApi.v2.v3.TestCaseImplementationDescription;
    function: TraceApi.v2.v3.TestCaseFunction;
}
",
                                    "name": "TestCaseImplementation.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "TestCaseImplementation.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export interface TestCaseImplementationDescription {
    boards: TraceApi.v2.v3.TestCaseImplementationDescriptionBoard[];
}
",
                                    "name": "TestCaseImplementationDescription.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "TestCaseImplementationDescription.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export declare type TestCaseImplementationDescriptionBoard = TraceApi.v2.v3.TestCaseImplementationDescriptionBoard.Html | TraceApi.v2.v3.TestCaseImplementationDescriptionBoard.ParamId | TraceApi.v2.v3.TestCaseImplementationDescriptionBoard._Unknown;
export declare namespace TestCaseImplementationDescriptionBoard {
    interface Html extends _Utils {
        type: \\"html\\";
        value: string;
    }
    interface ParamId extends _Utils {
        type: \\"paramId\\";
        value: TraceApi.v2.v3.ParameterId;
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.v2.v3.TestCaseImplementationDescriptionBoard._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        html: (value: string) => _Result;
        paramId: (value: TraceApi.v2.v3.ParameterId) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const TestCaseImplementationDescriptionBoard: {
    readonly html: (value: string) => TraceApi.v2.v3.TestCaseImplementationDescriptionBoard.Html;
    readonly paramId: (value: TraceApi.v2.v3.ParameterId) => TraceApi.v2.v3.TestCaseImplementationDescriptionBoard.ParamId;
    readonly _unknown: (value: {
        type: string;
    }) => TraceApi.v2.v3.TestCaseImplementationDescriptionBoard._Unknown;
    readonly _visit: <_Result>(value: TraceApi.v2.v3.TestCaseImplementationDescriptionBoard, visitor: TraceApi.v2.v3.TestCaseImplementationDescriptionBoard._Visitor<_Result>) => _Result;
};
",
                                    "name": "TestCaseImplementationDescriptionBoard.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export const TestCaseImplementationDescriptionBoard = {
    html: (value) => {
        return {
            value: value,
            type: \\"html\\",
            _visit: function (visitor) {
                return TraceApi.v2.v3.TestCaseImplementationDescriptionBoard._visit(this, visitor);
            },
        };
    },
    paramId: (value) => {
        return {
            value: value,
            type: \\"paramId\\",
            _visit: function (visitor) {
                return TraceApi.v2.v3.TestCaseImplementationDescriptionBoard._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.v2.v3.TestCaseImplementationDescriptionBoard._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case \\"html\\":
                return visitor.html(value.value);
            case \\"paramId\\":
                return visitor.paramId(value.value);
            default:
                return visitor._other(value);
        }
    },
};
",
                                    "name": "TestCaseImplementationDescriptionBoard.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export declare type TestCaseImplementationReference = TraceApi.v2.v3.TestCaseImplementationReference.TemplateId | TraceApi.v2.v3.TestCaseImplementationReference.Implementation | TraceApi.v2.v3.TestCaseImplementationReference._Unknown;
export declare namespace TestCaseImplementationReference {
    interface TemplateId extends _Utils {
        type: \\"templateId\\";
        value: TraceApi.v2.v3.TestCaseTemplateId;
    }
    interface Implementation extends TraceApi.v2.v3.TestCaseImplementation, _Utils {
        type: \\"implementation\\";
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.v2.v3.TestCaseImplementationReference._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        templateId: (value: TraceApi.v2.v3.TestCaseTemplateId) => _Result;
        implementation: (value: TraceApi.v2.v3.TestCaseImplementation) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const TestCaseImplementationReference: {
    readonly templateId: (value: TraceApi.v2.v3.TestCaseTemplateId) => TraceApi.v2.v3.TestCaseImplementationReference.TemplateId;
    readonly implementation: (value: TraceApi.v2.v3.TestCaseImplementation) => TraceApi.v2.v3.TestCaseImplementationReference.Implementation;
    readonly _unknown: (value: {
        type: string;
    }) => TraceApi.v2.v3.TestCaseImplementationReference._Unknown;
    readonly _visit: <_Result>(value: TraceApi.v2.v3.TestCaseImplementationReference, visitor: TraceApi.v2.v3.TestCaseImplementationReference._Visitor<_Result>) => _Result;
};
",
                                    "name": "TestCaseImplementationReference.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export const TestCaseImplementationReference = {
    templateId: (value) => {
        return {
            value: value,
            type: \\"templateId\\",
            _visit: function (visitor) {
                return TraceApi.v2.v3.TestCaseImplementationReference._visit(this, visitor);
            },
        };
    },
    implementation: (value) => {
        return {
            ...value,
            type: \\"implementation\\",
            _visit: function (visitor) {
                return TraceApi.v2.v3.TestCaseImplementationReference._visit(this, visitor);
            },
        };
    },
    _unknown: (value) => {
        return {
            ...value,
            _visit: function (visitor) {
                return TraceApi.v2.v3.TestCaseImplementationReference._visit(this, visitor);
            },
        };
    },
    _visit: (value, visitor) => {
        switch (value.type) {
            case \\"templateId\\":
                return visitor.templateId(value.value);
            case \\"implementation\\":
                return visitor.implementation(value);
            default:
                return visitor._other(value);
        }
    },
};
",
                                    "name": "TestCaseImplementationReference.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export interface TestCaseMetadata {
    id: TraceApi.v2.v3.TestCaseId;
    name: string;
    hidden: boolean;
}
",
                                    "name": "TestCaseMetadata.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "TestCaseMetadata.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export interface TestCaseTemplate {
    templateId: TraceApi.v2.v3.TestCaseTemplateId;
    name: string;
    implementation: TraceApi.v2.v3.TestCaseImplementation;
}
",
                                    "name": "TestCaseTemplate.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "TestCaseTemplate.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export declare type TestCaseTemplateId = string;
",
                                    "name": "TestCaseTemplateId.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "TestCaseTemplateId.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export interface TestCaseV2 {
    metadata: TraceApi.v2.v3.TestCaseMetadata;
    implementation: TraceApi.v2.v3.TestCaseImplementationReference;
    arguments: Record<TraceApi.v2.v3.ParameterId, TraceApi.VariableValue>;
    expects?: TraceApi.v2.v3.TestCaseExpects;
}
",
                                    "name": "TestCaseV2.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "TestCaseV2.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export interface TestCaseWithActualResultImplementation {
    getActualResult: TraceApi.v2.v3.NonVoidFunctionDefinition;
    assertCorrectnessCheck: TraceApi.v2.v3.AssertCorrectnessCheck;
}
",
                                    "name": "TestCaseWithActualResultImplementation.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "TestCaseWithActualResultImplementation.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export interface VoidFunctionDefinition {
    parameters: TraceApi.v2.v3.Parameter[];
    code: TraceApi.v2.v3.FunctionImplementationForMultipleLanguages;
}
",
                                    "name": "VoidFunctionDefinition.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "VoidFunctionDefinition.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
/**
 * The generated signature will include an additional param, actualResult
 */
export interface VoidFunctionDefinitionThatTakesActualResult {
    additionalParameters: TraceApi.v2.v3.Parameter[];
    code: TraceApi.v2.v3.FunctionImplementationForMultipleLanguages;
}
",
                                    "name": "VoidFunctionDefinitionThatTakesActualResult.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "VoidFunctionDefinitionThatTakesActualResult.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export interface VoidFunctionSignature {
    parameters: TraceApi.v2.v3.Parameter[];
}
",
                                    "name": "VoidFunctionSignature.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "VoidFunctionSignature.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
export interface VoidFunctionSignatureThatTakesActualResult {
    parameters: TraceApi.v2.v3.Parameter[];
    actualResultType: TraceApi.VariableType;
}
",
                                    "name": "VoidFunctionSignatureThatTakesActualResult.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export {};
",
                                    "name": "VoidFunctionSignatureThatTakesActualResult.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "export * from \\"./TestCaseTemplateId\\";
export * from \\"./TestCaseId\\";
export * from \\"./ParameterId\\";
export * from \\"./ProblemInfoV2\\";
export * from \\"./LightweightProblemInfoV2\\";
export * from \\"./CreateProblemRequestV2\\";
export * from \\"./TestCaseV2\\";
export * from \\"./TestCaseExpects\\";
export * from \\"./TestCaseImplementationReference\\";
export * from \\"./BasicTestCaseTemplate\\";
export * from \\"./TestCaseTemplate\\";
export * from \\"./TestCaseImplementation\\";
export * from \\"./TestCaseFunction\\";
export * from \\"./TestCaseWithActualResultImplementation\\";
export * from \\"./VoidFunctionDefinition\\";
export * from \\"./Parameter\\";
export * from \\"./NonVoidFunctionDefinition\\";
export * from \\"./VoidFunctionSignature\\";
export * from \\"./NonVoidFunctionSignature\\";
export * from \\"./VoidFunctionSignatureThatTakesActualResult\\";
export * from \\"./AssertCorrectnessCheck\\";
export * from \\"./DeepEqualityCorrectnessCheck\\";
export * from \\"./VoidFunctionDefinitionThatTakesActualResult\\";
export * from \\"./TestCaseImplementationDescription\\";
export * from \\"./TestCaseImplementationDescriptionBoard\\";
export * from \\"./TestCaseMetadata\\";
export * from \\"./FunctionImplementationForMultipleLanguages\\";
export * from \\"./FunctionImplementation\\";
export * from \\"./GeneratedFiles\\";
export * from \\"./CustomFiles\\";
export * from \\"./BasicCustomFiles\\";
export * from \\"./Files\\";
export * from \\"./FileInfoV2\\";
export * from \\"./DefaultProvidedFile\\";
export * from \\"./FunctionSignature\\";
export * from \\"./GetFunctionSignatureRequest\\";
export * from \\"./GetFunctionSignatureResponse\\";
export * from \\"./GetBasicSolutionFileRequest\\";
export * from \\"./GetBasicSolutionFileResponse\\";
export * from \\"./GetGeneratedTestCaseFileRequest\\";
export * from \\"./GetGeneratedTestCaseTemplateFileRequest\\";
",
                                    "name": "index.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "export * from \\"./TestCaseTemplateId\\";
export * from \\"./TestCaseId\\";
export * from \\"./ParameterId\\";
export * from \\"./ProblemInfoV2\\";
export * from \\"./LightweightProblemInfoV2\\";
export * from \\"./CreateProblemRequestV2\\";
export * from \\"./TestCaseV2\\";
export * from \\"./TestCaseExpects\\";
export * from \\"./TestCaseImplementationReference\\";
export * from \\"./BasicTestCaseTemplate\\";
export * from \\"./TestCaseTemplate\\";
export * from \\"./TestCaseImplementation\\";
export * from \\"./TestCaseFunction\\";
export * from \\"./TestCaseWithActualResultImplementation\\";
export * from \\"./VoidFunctionDefinition\\";
export * from \\"./Parameter\\";
export * from \\"./NonVoidFunctionDefinition\\";
export * from \\"./VoidFunctionSignature\\";
export * from \\"./NonVoidFunctionSignature\\";
export * from \\"./VoidFunctionSignatureThatTakesActualResult\\";
export * from \\"./AssertCorrectnessCheck\\";
export * from \\"./DeepEqualityCorrectnessCheck\\";
export * from \\"./VoidFunctionDefinitionThatTakesActualResult\\";
export * from \\"./TestCaseImplementationDescription\\";
export * from \\"./TestCaseImplementationDescriptionBoard\\";
export * from \\"./TestCaseMetadata\\";
export * from \\"./FunctionImplementationForMultipleLanguages\\";
export * from \\"./FunctionImplementation\\";
export * from \\"./GeneratedFiles\\";
export * from \\"./CustomFiles\\";
export * from \\"./BasicCustomFiles\\";
export * from \\"./Files\\";
export * from \\"./FileInfoV2\\";
export * from \\"./DefaultProvidedFile\\";
export * from \\"./FunctionSignature\\";
export * from \\"./GetFunctionSignatureRequest\\";
export * from \\"./GetFunctionSignatureResponse\\";
export * from \\"./GetBasicSolutionFileRequest\\";
export * from \\"./GetBasicSolutionFileResponse\\";
export * from \\"./GetGeneratedTestCaseFileRequest\\";
export * from \\"./GetGeneratedTestCaseTemplateFileRequest\\";
",
                                    "name": "index.js",
                                    "type": "file",
                                  },
                                ],
                                "name": "types",
                                "type": "directory",
                              },
                            ],
                            "name": "problem",
                            "type": "directory",
                          },
                        ],
                        "name": "resources",
                        "type": "directory",
                      },
                    ],
                    "name": "v3",
                    "type": "directory",
                  },
                ],
                "name": "resources",
                "type": "directory",
              },
            ],
            "name": "v2",
            "type": "directory",
          },
        ],
        "name": "resources",
        "type": "directory",
      },
    ],
    "name": "api",
    "type": "directory",
  },
  Object {
    "contents": Array [
      Object {
        "contents": "export * as serialization from \\"./schemas\\";
",
        "name": "index.d.ts",
        "type": "file",
      },
      Object {
        "contents": "export * as serialization from \\"./schemas\\";
",
        "name": "index.js",
        "type": "file",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "import { SchemaUtils } from \\"./builders\\";
export declare type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
export declare type inferRaw<S extends Schema> = S extends Schema<infer Raw, any> ? Raw : never;
export declare type inferParsed<S extends Schema> = S extends Schema<any, infer Parsed> ? Parsed : never;
export interface BaseSchema<Raw, Parsed> {
    parse: (raw: Raw, opts?: SchemaOptions) => Parsed | Promise<Parsed>;
    json: (parsed: Parsed, opts?: SchemaOptions) => Raw | Promise<Raw>;
}
export interface SchemaOptions {
    /**
     * @default false
     */
    skipUnknownKeysOnParse?: boolean;
    /**
     * @default false
     */
    includeUnknownKeysOnJson?: boolean;
}
",
            "name": "Schema.d.ts",
            "type": "file",
          },
          Object {
            "contents": "export {};
",
            "name": "Schema.js",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": Array [
                  Object {
                    "contents": "import { Schema } from \\"../../Schema\\";
export declare function date(): Schema<string, Date>;
",
                    "name": "date.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { getSchemaUtils } from \\"../schema-utils\\";
export function date() {
    const baseSchema = {
        parse: (raw) => new Date(raw),
        json: (date) => date.toISOString(),
    };
    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
    };
}
",
                    "name": "date.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { date } from \\"./date\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { date } from \\"./date\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                ],
                "name": "date",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "import { Schema } from \\"../../Schema\\";
export declare function enum_<U extends string, E extends Readonly<[U, ...U[]]>>(_values: E): Schema<E[number], E[number]>;
",
                    "name": "enum.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { createIdentitySchemaCreator } from \\"../identity\\";
export function enum_(_values) {
    return createIdentitySchemaCreator()();
}
",
                    "name": "enum.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { enum_ } from \\"./enum\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { enum_ } from \\"./enum\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                ],
                "name": "enum",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "import { Schema } from \\"../../Schema\\";
export declare function createIdentitySchemaCreator<T>(): () => Schema<T, T>;
",
                    "name": "createIdentitySchemaCreator.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { identity } from \\"./identity\\";
export function createIdentitySchemaCreator() {
    return () => identity();
}
",
                    "name": "createIdentitySchemaCreator.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { Schema } from \\"../../Schema\\";
export declare function identity<T>(): Schema<T, T>;
",
                    "name": "identity.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { getSchemaUtils } from \\"../schema-utils\\";
export function identity() {
    const baseSchema = {
        parse: (raw) => raw,
        json: (parsed) => parsed,
    };
    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
    };
}
",
                    "name": "identity.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { createIdentitySchemaCreator } from \\"./createIdentitySchemaCreator\\";
export { identity } from \\"./identity\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { createIdentitySchemaCreator } from \\"./createIdentitySchemaCreator\\";
export { identity } from \\"./identity\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                ],
                "name": "identity",
                "type": "directory",
              },
              Object {
                "contents": "export * from \\"./date\\";
export * from \\"./enum\\";
export * from \\"./identity\\";
export * from \\"./lazy\\";
export * from \\"./list\\";
export * from \\"./literals\\";
export * from \\"./object\\";
export * from \\"./object-like\\";
export * from \\"./primitives\\";
export * from \\"./record\\";
export * from \\"./schema-utils\\";
export * from \\"./set\\";
export * from \\"./union\\";
",
                "name": "index.d.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./date\\";
export * from \\"./enum\\";
export * from \\"./identity\\";
export * from \\"./lazy\\";
export * from \\"./list\\";
export * from \\"./literals\\";
export * from \\"./object\\";
export * from \\"./object-like\\";
export * from \\"./primitives\\";
export * from \\"./record\\";
export * from \\"./schema-utils\\";
export * from \\"./set\\";
export * from \\"./union\\";
",
                "name": "index.js",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export { lazy, type SchemaGetter } from \\"./lazy\\";
export { lazyObject } from \\"./lazyObject\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { lazy } from \\"./lazy\\";
export { lazyObject } from \\"./lazyObject\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { BaseSchema, Schema } from \\"../../Schema\\";
export declare type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType | Promise<SchemaType>;
export declare function lazy<Raw, Parsed>(getter: SchemaGetter<Schema<Raw, Parsed>>): Schema<Raw, Parsed>;
export declare function constructLazyBaseSchema<Raw, Parsed>(getter: SchemaGetter<Schema<Raw, Parsed>>): BaseSchema<Raw, Parsed>;
export declare function getMemoizedSchema<SchemaType extends Schema<any, any>>(getter: SchemaGetter<SchemaType>): Promise<SchemaType>;
",
                    "name": "lazy.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { getSchemaUtils } from \\"../schema-utils\\";
export function lazy(getter) {
    const baseSchema = constructLazyBaseSchema(getter);
    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
    };
}
export function constructLazyBaseSchema(getter) {
    return {
        parse: async (raw) => (await getMemoizedSchema(getter)).parse(raw),
        json: async (parsed) => (await getMemoizedSchema(getter)).json(parsed),
    };
}
export async function getMemoizedSchema(getter) {
    const castedGetter = getter;
    if (castedGetter.__zurg_memoized == null) {
        castedGetter.__zurg_memoized = await getter();
    }
    return castedGetter.__zurg_memoized;
}
",
                    "name": "lazy.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { ObjectSchema } from \\"../object/types\\";
import { SchemaGetter } from \\"./lazy\\";
export declare function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed>;
",
                    "name": "lazyObject.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { getObjectUtils } from \\"../object\\";
import { getObjectLikeUtils, OBJECT_LIKE_BRAND } from \\"../object-like\\";
import { getSchemaUtils } from \\"../schema-utils\\";
import { constructLazyBaseSchema, getMemoizedSchema } from \\"./lazy\\";
export function lazyObject(getter) {
    const baseSchema = {
        ...OBJECT_LIKE_BRAND,
        ...constructLazyBaseSchema(getter),
        _getRawProperties: async () => (await getMemoizedSchema(getter))._getRawProperties(),
        _getParsedProperties: async () => (await getMemoizedSchema(getter))._getParsedProperties(),
    };
    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
        ...getObjectLikeUtils(baseSchema),
        ...getObjectUtils(baseSchema),
    };
}
",
                    "name": "lazyObject.js",
                    "type": "file",
                  },
                ],
                "name": "lazy",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export { list } from \\"./list\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { list } from \\"./list\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { Schema } from \\"../../Schema\\";
export declare function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]>;
",
                    "name": "list.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { getSchemaUtils } from \\"../schema-utils\\";
export function list(schema) {
    const baseSchema = {
        parse: (raw, opts) => Promise.all(raw.map((item) => schema.parse(item, opts))),
        json: (parsed, opts) => Promise.all(parsed.map((item) => schema.json(item, opts))),
    };
    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
    };
}
",
                    "name": "list.js",
                    "type": "file",
                  },
                ],
                "name": "list",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export { stringLiteral } from \\"./stringLiteral\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { stringLiteral } from \\"./stringLiteral\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { Schema } from \\"../../Schema\\";
export declare function stringLiteral<V extends string>(_value: V): Schema<V, V>;
",
                    "name": "stringLiteral.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { createIdentitySchemaCreator } from \\"../identity\\";
export function stringLiteral(_value) {
    return createIdentitySchemaCreator()();
}
",
                    "name": "stringLiteral.js",
                    "type": "file",
                  },
                ],
                "name": "literals",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export { getObjectUtils, object } from \\"./object\\";
export { isProperty, property, type Property } from \\"./property\\";
export { type BaseObjectSchema, type inferObjectSchemaFromPropertySchemas, type inferParsedObject, type inferParsedObjectFromPropertySchemas, type inferParsedPropertySchema, type inferRawKey, type inferRawObject, type inferRawObjectFromPropertySchemas, type inferRawPropertySchema, type ObjectSchema, type ObjectUtils, type PropertySchemas, } from \\"./types\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { getObjectUtils, object } from \\"./object\\";
export { isProperty, property } from \\"./property\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { BaseObjectSchema, inferObjectSchemaFromPropertySchemas, ObjectUtils, PropertySchemas } from \\"./types\\";
export declare function object<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(schemas: T): inferObjectSchemaFromPropertySchemas<T>;
export declare function getObjectUtils<Raw, Parsed>(schema: BaseObjectSchema<Raw, Parsed>): ObjectUtils<Raw, Parsed>;
",
                    "name": "object.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { entries } from \\"../../utils/entries\\";
import { filterObject } from \\"../../utils/filterObject\\";
import { keys } from \\"../../utils/keys\\";
import { partition } from \\"../../utils/partition\\";
import { getObjectLikeUtils, OBJECT_LIKE_BRAND } from \\"../object-like\\";
import { getSchemaUtils } from \\"../schema-utils\\";
import { isProperty } from \\"./property\\";
export function object(schemas) {
    const baseSchema = {
        ...OBJECT_LIKE_BRAND,
        _getRawProperties: () => Promise.resolve(Object.entries(schemas).map(([parsedKey, propertySchema]) => isProperty(propertySchema) ? propertySchema.rawKey : parsedKey)),
        _getParsedProperties: () => Promise.resolve(keys(schemas)),
        parse: async (raw, { skipUnknownKeysOnParse = false } = {}) => {
            const rawKeyToProperty = {};
            for (const [parsedKey, schemaOrObjectProperty] of entries(schemas)) {
                const rawKey = isProperty(schemaOrObjectProperty) ? schemaOrObjectProperty.rawKey : parsedKey;
                const property = {
                    rawKey,
                    parsedKey,
                    valueSchema: isProperty(schemaOrObjectProperty)
                        ? schemaOrObjectProperty.valueSchema
                        : schemaOrObjectProperty,
                };
                rawKeyToProperty[rawKey] = property;
            }
            const parsed = {};
            for (const [rawKey, rawPropertyValue] of Object.entries(raw)) {
                const property = rawKeyToProperty[rawKey];
                if (property != null) {
                    const value = await property.valueSchema.parse(rawPropertyValue);
                    parsed[property.parsedKey] = value;
                }
                else if (!skipUnknownKeysOnParse) {
                    parsed[rawKey] = rawPropertyValue;
                }
            }
            return parsed;
        },
        json: async (parsed, { includeUnknownKeysOnJson = false } = {}) => {
            const raw = {};
            for (const [parsedKey, parsedPropertyValue] of entries(parsed)) {
                const schemaOrObjectProperty = schemas[parsedKey];
                // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
                if (schemaOrObjectProperty != null) {
                    if (isProperty(schemaOrObjectProperty)) {
                        const value = await schemaOrObjectProperty.valueSchema.json(parsedPropertyValue);
                        raw[schemaOrObjectProperty.rawKey] = value;
                    }
                    else {
                        const value = await schemaOrObjectProperty.json(parsedPropertyValue);
                        raw[parsedKey] = value;
                    }
                }
                else if (includeUnknownKeysOnJson) {
                    raw[parsedKey] = parsedPropertyValue;
                }
            }
            return raw;
        },
    };
    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
        ...getObjectLikeUtils(baseSchema),
        ...getObjectUtils(baseSchema),
    };
}
export function getObjectUtils(schema) {
    return {
        extend: (extension) => {
            const baseSchema = {
                ...OBJECT_LIKE_BRAND,
                _getParsedProperties: async () => [
                    ...(await schema._getParsedProperties()),
                    ...(await extension._getParsedProperties()),
                ],
                _getRawProperties: async () => [
                    ...(await schema._getRawProperties()),
                    ...(await extension._getRawProperties()),
                ],
                parse: async (raw, opts) => {
                    const rawExtensionPropertiesSet = new Set(await extension._getRawProperties());
                    const [extensionProperties, otherProperties] = partition(keys(raw), (key) => rawExtensionPropertiesSet.has(key));
                    return {
                        ...(await schema.parse(filterObject(raw, otherProperties), opts)),
                        ...(await extension.parse(filterObject(raw, extensionProperties), opts)),
                    };
                },
                json: async (parsed, opts) => {
                    const parsedExtensionPropertiesSet = new Set(await extension._getParsedProperties());
                    const [extensionProperties, otherProperties] = partition(keys(parsed), (key) => parsedExtensionPropertiesSet.has(key));
                    return {
                        ...(await schema.json(filterObject(parsed, otherProperties), opts)),
                        ...(await extension.json(filterObject(parsed, extensionProperties), opts)),
                    };
                },
            };
            return {
                ...baseSchema,
                ...getSchemaUtils(baseSchema),
                ...getObjectLikeUtils(baseSchema),
                ...getObjectUtils(baseSchema),
            };
        },
    };
}
",
                    "name": "object.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { Schema } from \\"../../Schema\\";
export declare function property<RawKey extends string, RawValue, ParsedValue>(rawKey: RawKey, valueSchema: Schema<RawValue, ParsedValue>): Property<RawKey, RawValue, ParsedValue>;
export interface Property<RawKey extends string, RawValue, ParsedValue> {
    rawKey: RawKey;
    valueSchema: Schema<RawValue, ParsedValue>;
    isProperty: true;
}
export declare function isProperty<O extends Property<any, any, any>>(maybeProperty: unknown): maybeProperty is O;
",
                    "name": "property.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export function property(rawKey, valueSchema) {
    return {
        rawKey,
        valueSchema,
        isProperty: true,
    };
}
export function isProperty(maybeProperty) {
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
    return maybeProperty.isProperty;
}
",
                    "name": "property.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { inferParsed, inferRaw, Schema } from \\"../../Schema\\";
import { addQuestionMarksToNullableProperties } from \\"../../utils/addQuestionMarksToNullableProperties\\";
import { BaseObjectLikeSchema, ObjectLikeSchema } from \\"../object-like\\";
import { Property } from \\"./property\\";
export declare type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> & ObjectLikeSchema<Raw, Parsed> & ObjectUtils<Raw, Parsed>;
export interface BaseObjectSchema<Raw, Parsed> extends BaseObjectLikeSchema<Raw, Parsed> {
    _getRawProperties: () => Promise<(keyof Raw)[]>;
    _getParsedProperties: () => Promise<(keyof Parsed)[]>;
}
export interface ObjectUtils<Raw, Parsed> {
    extend: <RawExtension, ParsedExtension>(schemas: ObjectSchema<RawExtension, ParsedExtension>) => ObjectSchema<Raw & RawExtension, Parsed & ParsedExtension>;
}
export declare type inferRawObject<O extends ObjectSchema<any, any>> = O extends ObjectSchema<infer Raw, any> ? Raw : never;
export declare type inferParsedObject<O extends ObjectSchema<any, any>> = O extends ObjectSchema<any, infer Parsed> ? Parsed : never;
export declare type inferObjectSchemaFromPropertySchemas<T extends PropertySchemas<keyof T>> = ObjectSchema<inferRawObjectFromPropertySchemas<T>, inferParsedObjectFromPropertySchemas<T>>;
export declare type inferRawObjectFromPropertySchemas<T extends PropertySchemas<keyof T>> = addQuestionMarksToNullableProperties<{
    [ParsedKey in keyof T as inferRawKey<ParsedKey, T[ParsedKey]>]: inferRawPropertySchema<T[ParsedKey]>;
}>;
export declare type inferParsedObjectFromPropertySchemas<T extends PropertySchemas<keyof T>> = addQuestionMarksToNullableProperties<{
    [K in keyof T]: inferParsedPropertySchema<T[K]>;
}>;
export declare type PropertySchemas<ParsedKeys extends string | number | symbol> = Record<ParsedKeys, Property<any, any, any> | Schema<any, any>>;
export declare type inferRawPropertySchema<P extends Property<any, any, any> | Schema<any, any>> = P extends Property<any, infer Raw, any> ? Raw : P extends Schema<any, any> ? inferRaw<P> : never;
export declare type inferParsedPropertySchema<P extends Property<any, any, any> | Schema<any, any>> = P extends Property<any, any, infer Parsed> ? Parsed : P extends Schema<any, any> ? inferParsed<P> : never;
export declare type inferRawKey<ParsedKey extends string | number | symbol, P extends Property<any, any, any> | Schema<any, any>> = P extends Property<infer Raw, any, any> ? Raw : ParsedKey;
",
                    "name": "types.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export {};
",
                    "name": "types.js",
                    "type": "file",
                  },
                ],
                "name": "object",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "import { BaseObjectLikeSchema, ObjectLikeSchema, ObjectLikeUtils } from \\"./types\\";
export declare function getObjectLikeUtils<Raw, Parsed>(schema: BaseObjectLikeSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed>;
/**
 * object-like utils are defined in one file to resolve issues with circular imports
 */
export declare function withProperties<RawObjectShape, ParsedObjectShape, Properties>(objectLike: BaseObjectLikeSchema<RawObjectShape, ParsedObjectShape>, properties: {
    [K in keyof Properties]: Properties[K] | ((parsed: ParsedObjectShape) => Properties[K]);
}): ObjectLikeSchema<RawObjectShape, ParsedObjectShape & Properties>;
",
                    "name": "getObjectLikeUtils.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { getSchemaUtils } from \\"../schema-utils\\";
import { OBJECT_LIKE_BRAND } from \\"./types\\";
export function getObjectLikeUtils(schema) {
    return {
        withProperties: (properties) => withProperties(schema, properties),
    };
}
/**
 * object-like utils are defined in one file to resolve issues with circular imports
 */
export function withProperties(objectLike, properties) {
    const objectSchema = {
        ...OBJECT_LIKE_BRAND,
        parse: async (raw, opts) => {
            const parsedObject = await objectLike.parse(raw, opts);
            const additionalProperties = Object.entries(properties).reduce((processed, [key, value]) => {
                return {
                    ...processed,
                    [key]: typeof value === \\"function\\" ? value(parsedObject) : value,
                };
            }, {});
            return {
                ...parsedObject,
                ...additionalProperties,
            };
        },
        json: (parsed, opts) => {
            // strip out added properties
            const addedPropertyKeys = new Set(Object.keys(properties));
            const parsedWithoutAddedProperties = Object.entries(parsed).reduce((filtered, [key, value]) => {
                if (!addedPropertyKeys.has(key)) {
                    filtered[key] = value;
                }
                return filtered;
            }, {});
            return objectLike.json(parsedWithoutAddedProperties, opts);
        },
    };
    return {
        ...objectSchema,
        ...getSchemaUtils(objectSchema),
        ...getObjectLikeUtils(objectSchema),
    };
}
",
                    "name": "getObjectLikeUtils.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { getObjectLikeUtils, withProperties } from \\"./getObjectLikeUtils\\";
export { OBJECT_LIKE_BRAND, type BaseObjectLikeSchema, type ObjectLikeSchema, type ObjectLikeUtils } from \\"./types\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { getObjectLikeUtils, withProperties } from \\"./getObjectLikeUtils\\";
export { OBJECT_LIKE_BRAND } from \\"./types\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { BaseSchema, Schema } from \\"../../Schema\\";
export declare type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> & BaseObjectLikeSchema<Raw, Parsed> & ObjectLikeUtils<Raw, Parsed>;
export declare type BaseObjectLikeSchema<Raw, Parsed> = BaseSchema<Raw, Parsed> & {
    _objectLike: void;
};
export interface ObjectLikeUtils<Raw, Parsed> {
    withProperties: <T extends Record<string, any>>(properties: {
        [K in keyof T]: T[K] | ((parsed: Parsed) => T[K]);
    }) => ObjectLikeSchema<Raw, Parsed & T>;
}
export declare const OBJECT_LIKE_BRAND: {
    _objectLike: void;
};
",
                    "name": "types.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export const OBJECT_LIKE_BRAND = undefined;
",
                    "name": "types.js",
                    "type": "file",
                  },
                ],
                "name": "object-like",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export declare const any: () => import(\\"../..\\").Schema<any, any>;
",
                    "name": "any.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { createIdentitySchemaCreator } from \\"../identity\\";
export const any = createIdentitySchemaCreator();
",
                    "name": "any.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export declare const boolean: () => import(\\"../..\\").Schema<boolean, boolean>;
",
                    "name": "boolean.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { createIdentitySchemaCreator } from \\"../identity\\";
export const boolean = createIdentitySchemaCreator();
",
                    "name": "boolean.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { any } from \\"./any\\";
export { boolean } from \\"./boolean\\";
export { number } from \\"./number\\";
export { string } from \\"./string\\";
export { unknown } from \\"./unknown\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { any } from \\"./any\\";
export { boolean } from \\"./boolean\\";
export { number } from \\"./number\\";
export { string } from \\"./string\\";
export { unknown } from \\"./unknown\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export declare const number: () => import(\\"../..\\").Schema<number, number>;
",
                    "name": "number.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { createIdentitySchemaCreator } from \\"../identity\\";
export const number = createIdentitySchemaCreator();
",
                    "name": "number.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export declare const string: () => import(\\"../..\\").Schema<string, string>;
",
                    "name": "string.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { createIdentitySchemaCreator } from \\"../identity\\";
export const string = createIdentitySchemaCreator();
",
                    "name": "string.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export declare const unknown: () => import(\\"../..\\").Schema<unknown, unknown>;
",
                    "name": "unknown.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { createIdentitySchemaCreator } from \\"../identity\\";
export const unknown = createIdentitySchemaCreator();
",
                    "name": "unknown.js",
                    "type": "file",
                  },
                ],
                "name": "primitives",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export { record } from \\"./record\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { record } from \\"./record\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { Schema } from \\"../../Schema\\";
export declare function record<RawKey extends string | number, ParsedKey extends string | number, RawValue, ParsedValue>(keySchema: Schema<RawKey, ParsedKey>, valueSchema: Schema<RawValue, ParsedValue>): Schema<Record<RawKey, RawValue>, Record<ParsedKey, ParsedValue>>;
",
                    "name": "record.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { entries } from \\"../../utils/entries\\";
import { getSchemaUtils } from \\"../schema-utils\\";
export function record(keySchema, valueSchema) {
    const baseSchema = {
        parse: (raw, opts) => {
            return entries(raw).reduce(async (parsedPromise, [key, value]) => {
                const parsed = await parsedPromise;
                const parsedKey = await keySchema.parse(key, opts);
                parsed[parsedKey] = await valueSchema.parse(value, opts);
                return parsedPromise;
            }, Promise.resolve({}));
        },
        json: (parsed, opts) => {
            return entries(parsed).reduce(async (rawPromise, [key, value]) => {
                const raw = await rawPromise;
                const rawKey = await keySchema.json(key, opts);
                raw[rawKey] = await valueSchema.json(value, opts);
                return rawPromise;
            }, Promise.resolve({}));
        },
    };
    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
    };
}
",
                    "name": "record.js",
                    "type": "file",
                  },
                ],
                "name": "record",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "import { BaseSchema, Schema } from \\"../../Schema\\";
import { OptionalSchema } from \\"./types\\";
export interface SchemaUtils<Raw, Parsed> {
    optional: () => OptionalSchema<Raw, Parsed>;
    transform: <PostTransform>(transformer: BaseSchema<Parsed, PostTransform>) => Schema<Raw, PostTransform>;
}
export declare function getSchemaUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): SchemaUtils<Raw, Parsed>;
/**
 * schema utils are defined in one file to resolve issues with circular imports
 */
export declare function optional<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): OptionalSchema<Raw, Parsed>;
export declare function transform<PreTransformRaw, PreTransformParsed, PostTransform>(schema: BaseSchema<PreTransformRaw, PreTransformParsed>, transformer: BaseSchema<PreTransformParsed, PostTransform>): Schema<PreTransformRaw, PostTransform>;
",
                    "name": "getSchemaUtils.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { OPTIONAL_BRAND } from \\"./types\\";
export function getSchemaUtils(schema) {
    return {
        optional: () => optional(schema),
        transform: (transformer) => transform(schema, transformer),
    };
}
/**
 * schema utils are defined in one file to resolve issues with circular imports
 */
export function optional(schema) {
    const baseSchema = {
        parse: (raw, opts) => (raw != null ? schema.parse(raw, opts) : undefined),
        json: (parsed, opts) => (parsed != null ? schema.json(parsed, opts) : null),
    };
    return {
        ...OPTIONAL_BRAND,
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
    };
}
export function transform(schema, transformer) {
    const baseSchema = {
        parse: async (raw, opts) => {
            const postTransformParsed = await schema.parse(raw, opts);
            return transformer.parse(postTransformParsed, opts);
        },
        json: async (parsed, opts) => {
            const preTransformParsed = await transformer.json(parsed, opts);
            return schema.json(preTransformParsed, opts);
        },
    };
    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
    };
}
",
                    "name": "getSchemaUtils.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { getSchemaUtils, optional, transform, type SchemaUtils } from \\"./getSchemaUtils\\";
export { OPTIONAL_BRAND, type OptionalSchema } from \\"./types\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { getSchemaUtils, optional, transform } from \\"./getSchemaUtils\\";
export { OPTIONAL_BRAND } from \\"./types\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { Schema } from \\"../../Schema\\";
export declare const OPTIONAL_BRAND: {
    _isOptional: void;
};
export declare type OptionalSchema<Raw, Parsed> = Schema<Raw | null | undefined, Parsed | undefined> & {
    _isOptional: void;
};
",
                    "name": "types.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export const OPTIONAL_BRAND = undefined;
",
                    "name": "types.js",
                    "type": "file",
                  },
                ],
                "name": "schema-utils",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export { set } from \\"./set\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { set } from \\"./set\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { Schema } from \\"../../Schema\\";
export declare function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>>;
",
                    "name": "set.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { getSchemaUtils } from \\"../schema-utils\\";
export function set(schema) {
    const baseSchema = {
        parse: async (raw, opts) => new Set(await Promise.all(raw.map((item) => schema.parse(item, opts)))),
        json: (parsed, opts) => Promise.all([...parsed].map((item) => schema.json(item, opts))),
    };
    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
    };
}
",
                    "name": "set.js",
                    "type": "file",
                  },
                ],
                "name": "set",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export declare function discriminant<RawDiscriminant extends string, ParsedDiscriminant extends string>(parsedDiscriminant: ParsedDiscriminant, rawDiscriminant: RawDiscriminant): Discriminant<RawDiscriminant, ParsedDiscriminant>;
export interface Discriminant<RawDiscriminant extends string, ParsedDiscriminant extends string> {
    parsedDiscriminant: ParsedDiscriminant;
    rawDiscriminant: RawDiscriminant;
}
",
                    "name": "discriminant.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export function discriminant(parsedDiscriminant, rawDiscriminant) {
    return {
        parsedDiscriminant,
        rawDiscriminant,
    };
}
",
                    "name": "discriminant.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { discriminant, type Discriminant } from \\"./discriminant\\";
export { type inferParsedDiscriminant, type inferParsedUnion, type inferRawDiscriminant, type inferRawUnion, type UnionSubtypes, } from \\"./types\\";
export { union } from \\"./union\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { discriminant } from \\"./discriminant\\";
export { union } from \\"./union\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { inferParsedObject, inferRawObject, ObjectSchema } from \\"../object\\";
import { Discriminant } from \\"./discriminant\\";
export declare type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
    [K in DiscriminantValues]: ObjectSchema<any, any>;
};
export declare type inferRawUnion<D extends string | Discriminant<any, any>, U extends UnionSubtypes<keyof U>> = {
    [K in keyof U]: Record<inferRawDiscriminant<D>, K> & inferRawObject<U[K]>;
}[keyof U];
export declare type inferParsedUnion<D extends string | Discriminant<any, any>, U extends UnionSubtypes<keyof U>> = {
    [K in keyof U]: Record<inferParsedDiscriminant<D>, K> & inferParsedObject<U[K]>;
}[keyof U];
export declare type inferRawDiscriminant<D extends string | Discriminant<any, any>> = D extends string ? D : D extends Discriminant<infer Raw, any> ? Raw : never;
export declare type inferParsedDiscriminant<D extends string | Discriminant<any, any>> = D extends string ? D : D extends Discriminant<any, infer Parsed> ? Parsed : never;
",
                    "name": "types.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export {};
",
                    "name": "types.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { ObjectLikeSchema } from \\"../object-like\\";
import { Discriminant } from \\"./discriminant\\";
import { inferParsedUnion, inferRawUnion, UnionSubtypes } from \\"./types\\";
export declare function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(discriminant: D, union: U): ObjectLikeSchema<inferRawUnion<D, U>, inferParsedUnion<D, U>>;
",
                    "name": "union.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { getObjectLikeUtils, OBJECT_LIKE_BRAND } from \\"../object-like\\";
import { getSchemaUtils } from \\"../schema-utils\\";
export function union(discriminant, union) {
    const rawDiscriminant = typeof discriminant === \\"string\\" ? discriminant : discriminant.rawDiscriminant;
    const parsedDiscriminant = typeof discriminant === \\"string\\"
        ? discriminant
        : discriminant.parsedDiscriminant;
    const baseSchema = {
        ...OBJECT_LIKE_BRAND,
        parse: async (raw, opts) => {
            const { [rawDiscriminant]: discriminantValue, ...additionalProperties } = raw;
            const additionalPropertySchemas = union[discriminantValue];
            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
            if (additionalPropertySchemas == null) {
                return {
                    ...additionalProperties,
                    [parsedDiscriminant]: discriminantValue,
                };
            }
            return {
                ...(await additionalPropertySchemas.parse(additionalProperties, opts)),
                [parsedDiscriminant]: discriminantValue,
            };
        },
        json: async (parsed, opts) => {
            const { [parsedDiscriminant]: discriminantValue, ...additionalProperties } = parsed;
            const additionalPropertySchemas = union[discriminantValue];
            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
            if (additionalPropertySchemas == null) {
                return {
                    ...additionalProperties,
                    [rawDiscriminant]: discriminantValue,
                };
            }
            return {
                ...(await additionalPropertySchemas.json(additionalProperties, opts)),
                [rawDiscriminant]: discriminantValue,
            };
        },
    };
    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
        ...getObjectLikeUtils(baseSchema),
    };
}
",
                    "name": "union.js",
                    "type": "file",
                  },
                ],
                "name": "union",
                "type": "directory",
              },
            ],
            "name": "builders",
            "type": "directory",
          },
          Object {
            "contents": "export * from \\"./builders\\";
export { type inferParsed, type inferRaw, type Schema, type SchemaOptions } from \\"./Schema\\";
",
            "name": "index.d.ts",
            "type": "file",
          },
          Object {
            "contents": "export * from \\"./builders\\";
",
            "name": "index.js",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export declare type addQuestionMarksToNullableProperties<T> = {
    [K in OptionalKeys<T>]?: T[K];
} & Pick<T, RequiredKeys<T>>;
export declare type OptionalKeys<T> = {
    [K in keyof T]: undefined extends T[K] ? K : null extends T[K] ? K : never;
}[keyof T];
export declare type RequiredKeys<T> = {
    [K in keyof T]: undefined extends T[K] ? never : null extends T[K] ? never : K;
}[keyof T];
",
                "name": "addQuestionMarksToNullableProperties.d.ts",
                "type": "file",
              },
              Object {
                "contents": "export {};
",
                "name": "addQuestionMarksToNullableProperties.js",
                "type": "file",
              },
              Object {
                "contents": "export declare function entries<T>(object: T): [keyof T, T[keyof T]][];
",
                "name": "entries.d.ts",
                "type": "file",
              },
              Object {
                "contents": "export function entries(object) {
    return Object.entries(object);
}
",
                "name": "entries.js",
                "type": "file",
              },
              Object {
                "contents": "export declare function filterObject<T, K extends keyof T>(obj: T, keysToInclude: K[]): Pick<T, K>;
",
                "name": "filterObject.d.ts",
                "type": "file",
              },
              Object {
                "contents": "export function filterObject(obj, keysToInclude) {
    const keysToIncludeSet = new Set(keysToInclude);
    return Object.entries(obj).reduce((acc, [key, value]) => {
        if (keysToIncludeSet.has(key)) {
            acc[key] = value;
        }
        return acc;
        // eslint-disable-next-line @typescript-eslint/prefer-reduce-type-parameter
    }, {});
}
",
                "name": "filterObject.js",
                "type": "file",
              },
              Object {
                "contents": "export declare function keys<T>(object: T): (keyof T)[];
",
                "name": "keys.d.ts",
                "type": "file",
              },
              Object {
                "contents": "export function keys(object) {
    return Object.keys(object);
}
",
                "name": "keys.js",
                "type": "file",
              },
              Object {
                "contents": "export declare function partition<T>(items: readonly T[], predicate: (item: T) => boolean): [T[], T[]];
",
                "name": "partition.d.ts",
                "type": "file",
              },
              Object {
                "contents": "export function partition(items, predicate) {
    const trueItems = [], falseItems = [];
    for (const item of items) {
        if (predicate(item)) {
            trueItems.push(item);
        }
        else {
            falseItems.push(item);
        }
    }
    return [trueItems, falseItems];
}
",
                "name": "partition.js",
                "type": "file",
              },
            ],
            "name": "utils",
            "type": "directory",
          },
        ],
        "name": "schemas",
        "type": "directory",
      },
    ],
    "name": "core",
    "type": "directory",
  },
  Object {
    "contents": Array [
      Object {
        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import express from \\"express\\";
export declare abstract class TraceApiError extends Error {
    constructor();
    abstract send(res: express.Response): void;
}
",
        "name": "TraceApiError.d.ts",
        "type": "file",
      },
      Object {
        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export class TraceApiError extends Error {
    constructor() {
        super();
        Object.setPrototypeOf(this, TraceApiError.prototype);
    }
}
",
        "name": "TraceApiError.js",
        "type": "file",
      },
      Object {
        "contents": "export { TraceApiError } from \\"./TraceApiError\\";
",
        "name": "index.d.ts",
        "type": "file",
      },
      Object {
        "contents": "export { TraceApiError } from \\"./TraceApiError\\";
",
        "name": "index.js",
        "type": "file",
      },
    ],
    "name": "errors",
    "type": "directory",
  },
  Object {
    "contents": "export * as TraceApi from \\"./api\\";
export { register } from \\"./register\\";
export { TraceApiError } from \\"./errors\\";
",
    "name": "index.d.ts",
    "type": "file",
  },
  Object {
    "contents": "export * as TraceApi from \\"./api\\";
export { register } from \\"./register\\";
export { TraceApiError } from \\"./errors\\";
",
    "name": "index.js",
    "type": "file",
  },
  Object {
    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import express from \\"express\\";
import { AbstractAdminService } from \\"./api/resources/admin/service/AbstractAdminService\\";
import { AbstractHomepageService } from \\"./api/resources/homepage/service/AbstractHomepageService\\";
import { AbstractMigrationService } from \\"./api/resources/migration/service/AbstractMigrationService\\";
import { AbstractPlaylistService } from \\"./api/resources/playlist/service/AbstractPlaylistService\\";
import { AbstractProblemService } from \\"./api/resources/problem/service/AbstractProblemService\\";
import { AbstractSubmissionService } from \\"./api/resources/submission/service/AbstractSubmissionService\\";
import { AbstractSyspropService } from \\"./api/resources/sysprop/service/AbstractSyspropService\\";
import { AbstractProblemService as v2_AbstractProblemService } from \\"./api/resources/v2/resources/problem/service/AbstractProblemService\\";
import { AbstractProblemService as v2_v3_AbstractProblemService } from \\"./api/resources/v2/resources/v3/resources/problem/service/AbstractProblemService\\";
export declare function register(expressApp: express.Express, services: {
    admin: AbstractAdminService;
    homepage: AbstractHomepageService;
    migration: AbstractMigrationService;
    playlist: AbstractPlaylistService;
    problem: AbstractProblemService;
    submission: AbstractSubmissionService;
    sysprop: AbstractSyspropService;
    v2: {
        problem: v2_AbstractProblemService;
        v3: {
            problem: v2_v3_AbstractProblemService;
        };
    };
}): void;
",
    "name": "register.d.ts",
    "type": "file",
  },
  Object {
    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export function register(expressApp, services) {
    expressApp.use(\\"/admin\\", services.admin.toRouter());
    expressApp.use(\\"/homepage-problems\\", services.homepage.toRouter());
    expressApp.use(\\"/migration-info\\", services.migration.toRouter());
    expressApp.use(\\"/v2/playlist/:serviceParam\\", services.playlist.toRouter());
    expressApp.use(\\"/problem-crud\\", services.problem.toRouter());
    expressApp.use(\\"/sessions\\", services.submission.toRouter());
    expressApp.use(\\"/sysprop\\", services.sysprop.toRouter());
    expressApp.use(\\"/problems-v2\\", services.v2.problem.toRouter());
    expressApp.use(\\"/problems-v2\\", services.v2.v3.problem.toRouter());
}
",
    "name": "register.js",
    "type": "file",
  },
  Object {
    "contents": Array [
      Object {
        "contents": "export * from \\"./resources\\";
",
        "name": "index.d.ts",
        "type": "file",
      },
      Object {
        "contents": "export * from \\"./resources\\";
",
        "name": "index.js",
        "type": "file",
      },
      Object {
        "contents": Array [
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./service\\";
",
                "name": "index.d.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./service\\";
",
                "name": "index.js",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export * from \\"./requests\\";
export * as storeTracedTestCaseV2 from \\"./storeTracedTestCaseV2\\";
export * as storeTracedWorkspaceV2 from \\"./storeTracedWorkspaceV2\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./requests\\";
export * as storeTracedTestCaseV2 from \\"./storeTracedTestCaseV2\\";
export * as storeTracedWorkspaceV2 from \\"./storeTracedWorkspaceV2\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../..\\";
import { TraceApi } from \\"../../../../..\\";
import * as core from \\"../../../../../core\\";
export declare const StoreTracedTestCaseRequest: core.serialization.Schema<serializers.StoreTracedTestCaseRequest.Raw, TraceApi.StoreTracedTestCaseRequest>;
export declare namespace StoreTracedTestCaseRequest {
    interface Raw {
        result: serializers.TestCaseResultWithStdout.Raw;
        traceResponses: serializers.TraceResponse.Raw[];
    }
}
",
                        "name": "StoreTracedTestCaseRequest.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../core\\";
export const StoreTracedTestCaseRequest = core.serialization.object({
    result: core.serialization.lazyObject(async () => (await import(\\"../../../..\\")).TestCaseResultWithStdout),
    traceResponses: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../..\\")).TraceResponse)),
});
",
                        "name": "StoreTracedTestCaseRequest.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../..\\";
import { TraceApi } from \\"../../../../..\\";
import * as core from \\"../../../../../core\\";
export declare const StoreTracedWorkspaceRequest: core.serialization.Schema<serializers.StoreTracedWorkspaceRequest.Raw, TraceApi.StoreTracedWorkspaceRequest>;
export declare namespace StoreTracedWorkspaceRequest {
    interface Raw {
        workspaceRunDetails: serializers.WorkspaceRunDetails.Raw;
        traceResponses: serializers.TraceResponse.Raw[];
    }
}
",
                        "name": "StoreTracedWorkspaceRequest.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../core\\";
export const StoreTracedWorkspaceRequest = core.serialization.object({
    workspaceRunDetails: core.serialization.lazyObject(async () => (await import(\\"../../../..\\")).WorkspaceRunDetails),
    traceResponses: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../..\\")).TraceResponse)),
});
",
                        "name": "StoreTracedWorkspaceRequest.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { StoreTracedTestCaseRequest } from \\"./StoreTracedTestCaseRequest\\";
export { StoreTracedWorkspaceRequest } from \\"./StoreTracedWorkspaceRequest\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { StoreTracedTestCaseRequest } from \\"./StoreTracedTestCaseRequest\\";
export { StoreTracedWorkspaceRequest } from \\"./StoreTracedWorkspaceRequest\\";
",
                        "name": "index.js",
                        "type": "file",
                      },
                    ],
                    "name": "requests",
                    "type": "directory",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const Request: core.serialization.Schema<serializers.admin.storeTracedTestCaseV2.Request.Raw, TraceApi.TraceResponseV2[]>;
export declare namespace Request {
    type Raw = serializers.TraceResponseV2.Raw[];
}
",
                    "name": "storeTracedTestCaseV2.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const Request = core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TraceResponseV2));
",
                    "name": "storeTracedTestCaseV2.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const Request: core.serialization.Schema<serializers.admin.storeTracedWorkspaceV2.Request.Raw, TraceApi.TraceResponseV2[]>;
export declare namespace Request {
    type Raw = serializers.TraceResponseV2.Raw[];
}
",
                    "name": "storeTracedWorkspaceV2.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const Request = core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TraceResponseV2));
",
                    "name": "storeTracedWorkspaceV2.js",
                    "type": "file",
                  },
                ],
                "name": "service",
                "type": "directory",
              },
            ],
            "name": "admin",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./types\\";
",
                "name": "index.d.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./types\\";
",
                "name": "index.js",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const BinaryTreeNodeAndTreeValue: core.serialization.ObjectSchema<serializers.BinaryTreeNodeAndTreeValue.Raw, TraceApi.BinaryTreeNodeAndTreeValue>;
export declare namespace BinaryTreeNodeAndTreeValue {
    interface Raw {
        nodeId: serializers.NodeId.Raw;
        fullTree: serializers.BinaryTreeValue.Raw;
    }
}
",
                    "name": "BinaryTreeNodeAndTreeValue.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const BinaryTreeNodeAndTreeValue = core.serialization.object({
    nodeId: core.serialization.lazy(async () => (await import(\\"../../..\\")).NodeId),
    fullTree: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).BinaryTreeValue),
});
",
                    "name": "BinaryTreeNodeAndTreeValue.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const BinaryTreeNodeValue: core.serialization.ObjectSchema<serializers.BinaryTreeNodeValue.Raw, TraceApi.BinaryTreeNodeValue>;
export declare namespace BinaryTreeNodeValue {
    interface Raw {
        nodeId: serializers.NodeId.Raw;
        val: number;
        right?: serializers.NodeId.Raw | null;
        left?: serializers.NodeId.Raw | null;
    }
}
",
                    "name": "BinaryTreeNodeValue.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const BinaryTreeNodeValue = core.serialization.object({
    nodeId: core.serialization.lazy(async () => (await import(\\"../../..\\")).NodeId),
    val: core.serialization.number(),
    right: core.serialization.lazy(async () => (await import(\\"../../..\\")).NodeId).optional(),
    left: core.serialization.lazy(async () => (await import(\\"../../..\\")).NodeId).optional(),
});
",
                    "name": "BinaryTreeNodeValue.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const BinaryTreeValue: core.serialization.ObjectSchema<serializers.BinaryTreeValue.Raw, TraceApi.BinaryTreeValue>;
export declare namespace BinaryTreeValue {
    interface Raw {
        root?: serializers.NodeId.Raw | null;
        nodes: Record<serializers.NodeId.Raw, serializers.BinaryTreeNodeValue.Raw>;
    }
}
",
                    "name": "BinaryTreeValue.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const BinaryTreeValue = core.serialization.object({
    root: core.serialization.lazy(async () => (await import(\\"../../..\\")).NodeId).optional(),
    nodes: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../..\\")).NodeId), core.serialization.lazyObject(async () => (await import(\\"../../..\\")).BinaryTreeNodeValue)),
});
",
                    "name": "BinaryTreeValue.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const Date: core.serialization.Schema<serializers.Date.Raw, TraceApi.Date>;
export declare namespace Date {
    type Raw = string;
}
",
                    "name": "Date.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const Date = core.serialization.string();
",
                    "name": "Date.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const DebugKeyValuePairs: core.serialization.ObjectSchema<serializers.DebugKeyValuePairs.Raw, TraceApi.DebugKeyValuePairs>;
export declare namespace DebugKeyValuePairs {
    interface Raw {
        key: serializers.DebugVariableValue.Raw;
        value: serializers.DebugVariableValue.Raw;
    }
}
",
                    "name": "DebugKeyValuePairs.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const DebugKeyValuePairs = core.serialization.object({
    key: core.serialization.lazy(async () => (await import(\\"../../..\\")).DebugVariableValue),
    value: core.serialization.lazy(async () => (await import(\\"../../..\\")).DebugVariableValue),
});
",
                    "name": "DebugKeyValuePairs.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const DebugMapValue: core.serialization.ObjectSchema<serializers.DebugMapValue.Raw, TraceApi.DebugMapValue>;
export declare namespace DebugMapValue {
    interface Raw {
        keyValuePairs: serializers.DebugKeyValuePairs.Raw[];
    }
}
",
                    "name": "DebugMapValue.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const DebugMapValue = core.serialization.object({
    keyValuePairs: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).DebugKeyValuePairs)),
});
",
                    "name": "DebugMapValue.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const DebugVariableValue: core.serialization.Schema<serializers.DebugVariableValue.Raw, TraceApi.DebugVariableValue>;
export declare namespace DebugVariableValue {
    type Raw = DebugVariableValue.IntegerValue | DebugVariableValue.BooleanValue | DebugVariableValue.DoubleValue | DebugVariableValue.StringValue | DebugVariableValue.CharValue | DebugVariableValue.MapValue | DebugVariableValue.ListValue | DebugVariableValue.BinaryTreeNodeValue | DebugVariableValue.SinglyLinkedListNodeValue | DebugVariableValue.DoublyLinkedListNodeValue | DebugVariableValue.UndefinedValue | DebugVariableValue.NullValue | DebugVariableValue.GenericValue;
    interface IntegerValue {
        type: \\"integerValue\\";
        value: number;
    }
    interface BooleanValue {
        type: \\"booleanValue\\";
        value: boolean;
    }
    interface DoubleValue {
        type: \\"doubleValue\\";
        value: number;
    }
    interface StringValue {
        type: \\"stringValue\\";
        value: string;
    }
    interface CharValue {
        type: \\"charValue\\";
        value: string;
    }
    interface MapValue extends serializers.DebugMapValue.Raw {
        type: \\"mapValue\\";
    }
    interface ListValue {
        type: \\"listValue\\";
        value: serializers.DebugVariableValue.Raw[];
    }
    interface BinaryTreeNodeValue extends serializers.BinaryTreeNodeAndTreeValue.Raw {
        type: \\"binaryTreeNodeValue\\";
    }
    interface SinglyLinkedListNodeValue extends serializers.SinglyLinkedListNodeAndListValue.Raw {
        type: \\"singlyLinkedListNodeValue\\";
    }
    interface DoublyLinkedListNodeValue extends serializers.DoublyLinkedListNodeAndListValue.Raw {
        type: \\"doublyLinkedListNodeValue\\";
    }
    interface UndefinedValue {
        type: \\"undefinedValue\\";
    }
    interface NullValue {
        type: \\"nullValue\\";
    }
    interface GenericValue extends serializers.GenericValue.Raw {
        type: \\"genericValue\\";
    }
}
",
                    "name": "DebugVariableValue.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export const DebugVariableValue = core.serialization
    .union(\\"type\\", {
    integerValue: core.serialization.object({
        value: core.serialization.number(),
    }),
    booleanValue: core.serialization.object({
        value: core.serialization.boolean(),
    }),
    doubleValue: core.serialization.object({
        value: core.serialization.number(),
    }),
    stringValue: core.serialization.object({
        value: core.serialization.string(),
    }),
    charValue: core.serialization.object({
        value: core.serialization.string(),
    }),
    mapValue: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).DebugMapValue),
    listValue: core.serialization.object({
        value: core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../..\\")).DebugVariableValue)),
    }),
    binaryTreeNodeValue: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).BinaryTreeNodeAndTreeValue),
    singlyLinkedListNodeValue: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).SinglyLinkedListNodeAndListValue),
    doublyLinkedListNodeValue: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).DoublyLinkedListNodeAndListValue),
    undefinedValue: core.serialization.object({}),
    nullValue: core.serialization.object({}),
    genericValue: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).GenericValue),
})
    .transform({
    parse: (value) => {
        switch (value.type) {
            case \\"integerValue\\":
                return TraceApi.DebugVariableValue.integerValue(value.value);
            case \\"booleanValue\\":
                return TraceApi.DebugVariableValue.booleanValue(value.value);
            case \\"doubleValue\\":
                return TraceApi.DebugVariableValue.doubleValue(value.value);
            case \\"stringValue\\":
                return TraceApi.DebugVariableValue.stringValue(value.value);
            case \\"charValue\\":
                return TraceApi.DebugVariableValue.charValue(value.value);
            case \\"mapValue\\":
                return TraceApi.DebugVariableValue.mapValue(value);
            case \\"listValue\\":
                return TraceApi.DebugVariableValue.listValue(value.value);
            case \\"binaryTreeNodeValue\\":
                return TraceApi.DebugVariableValue.binaryTreeNodeValue(value);
            case \\"singlyLinkedListNodeValue\\":
                return TraceApi.DebugVariableValue.singlyLinkedListNodeValue(value);
            case \\"doublyLinkedListNodeValue\\":
                return TraceApi.DebugVariableValue.doublyLinkedListNodeValue(value);
            case \\"undefinedValue\\":
                return TraceApi.DebugVariableValue.undefinedValue();
            case \\"nullValue\\":
                return TraceApi.DebugVariableValue.nullValue();
            case \\"genericValue\\":
                return TraceApi.DebugVariableValue.genericValue(value);
            default:
                return TraceApi.DebugVariableValue._unknown(value);
        }
    },
    json: (value) => value,
});
",
                    "name": "DebugVariableValue.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const DoublyLinkedListNodeAndListValue: core.serialization.ObjectSchema<serializers.DoublyLinkedListNodeAndListValue.Raw, TraceApi.DoublyLinkedListNodeAndListValue>;
export declare namespace DoublyLinkedListNodeAndListValue {
    interface Raw {
        nodeId: serializers.NodeId.Raw;
        fullList: serializers.DoublyLinkedListValue.Raw;
    }
}
",
                    "name": "DoublyLinkedListNodeAndListValue.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const DoublyLinkedListNodeAndListValue = core.serialization.object({
    nodeId: core.serialization.lazy(async () => (await import(\\"../../..\\")).NodeId),
    fullList: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).DoublyLinkedListValue),
});
",
                    "name": "DoublyLinkedListNodeAndListValue.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const DoublyLinkedListNodeValue: core.serialization.ObjectSchema<serializers.DoublyLinkedListNodeValue.Raw, TraceApi.DoublyLinkedListNodeValue>;
export declare namespace DoublyLinkedListNodeValue {
    interface Raw {
        nodeId: serializers.NodeId.Raw;
        val: number;
        next?: serializers.NodeId.Raw | null;
        prev?: serializers.NodeId.Raw | null;
    }
}
",
                    "name": "DoublyLinkedListNodeValue.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const DoublyLinkedListNodeValue = core.serialization.object({
    nodeId: core.serialization.lazy(async () => (await import(\\"../../..\\")).NodeId),
    val: core.serialization.number(),
    next: core.serialization.lazy(async () => (await import(\\"../../..\\")).NodeId).optional(),
    prev: core.serialization.lazy(async () => (await import(\\"../../..\\")).NodeId).optional(),
});
",
                    "name": "DoublyLinkedListNodeValue.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const DoublyLinkedListValue: core.serialization.ObjectSchema<serializers.DoublyLinkedListValue.Raw, TraceApi.DoublyLinkedListValue>;
export declare namespace DoublyLinkedListValue {
    interface Raw {
        head?: serializers.NodeId.Raw | null;
        nodes: Record<serializers.NodeId.Raw, serializers.DoublyLinkedListNodeValue.Raw>;
    }
}
",
                    "name": "DoublyLinkedListValue.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const DoublyLinkedListValue = core.serialization.object({
    head: core.serialization.lazy(async () => (await import(\\"../../..\\")).NodeId).optional(),
    nodes: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../..\\")).NodeId), core.serialization.lazyObject(async () => (await import(\\"../../..\\")).DoublyLinkedListNodeValue)),
});
",
                    "name": "DoublyLinkedListValue.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const FileInfo: core.serialization.ObjectSchema<serializers.FileInfo.Raw, TraceApi.FileInfo>;
export declare namespace FileInfo {
    interface Raw {
        filename: string;
        contents: string;
    }
}
",
                    "name": "FileInfo.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const FileInfo = core.serialization.object({
    filename: core.serialization.string(),
    contents: core.serialization.string(),
});
",
                    "name": "FileInfo.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const GenericValue: core.serialization.ObjectSchema<serializers.GenericValue.Raw, TraceApi.GenericValue>;
export declare namespace GenericValue {
    interface Raw {
        stringifiedType?: string | null;
        stringifiedValue: string;
    }
}
",
                    "name": "GenericValue.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const GenericValue = core.serialization.object({
    stringifiedType: core.serialization.string().optional(),
    stringifiedValue: core.serialization.string(),
});
",
                    "name": "GenericValue.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const KeyValuePair: core.serialization.ObjectSchema<serializers.KeyValuePair.Raw, TraceApi.KeyValuePair>;
export declare namespace KeyValuePair {
    interface Raw {
        key: serializers.VariableValue.Raw;
        value: serializers.VariableValue.Raw;
    }
}
",
                    "name": "KeyValuePair.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const KeyValuePair = core.serialization.object({
    key: core.serialization.lazy(async () => (await import(\\"../../..\\")).VariableValue),
    value: core.serialization.lazy(async () => (await import(\\"../../..\\")).VariableValue),
});
",
                    "name": "KeyValuePair.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const Language: core.serialization.Schema<serializers.Language.Raw, TraceApi.Language>;
export declare namespace Language {
    type Raw = \\"JAVA\\" | \\"JAVASCRIPT\\" | \\"PYTHON\\";
}
",
                    "name": "Language.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const Language = core.serialization.enum_([\\"JAVA\\", \\"JAVASCRIPT\\", \\"PYTHON\\"]);
",
                    "name": "Language.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const ListType: core.serialization.ObjectSchema<serializers.ListType.Raw, TraceApi.ListType>;
export declare namespace ListType {
    interface Raw {
        valueType: serializers.VariableType.Raw;
        isFixedLength?: boolean | null;
    }
}
",
                    "name": "ListType.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const ListType = core.serialization.object({
    valueType: core.serialization.lazy(async () => (await import(\\"../../..\\")).VariableType),
    isFixedLength: core.serialization.boolean().optional(),
});
",
                    "name": "ListType.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const MapType: core.serialization.ObjectSchema<serializers.MapType.Raw, TraceApi.MapType>;
export declare namespace MapType {
    interface Raw {
        keyType: serializers.VariableType.Raw;
        valueType: serializers.VariableType.Raw;
    }
}
",
                    "name": "MapType.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const MapType = core.serialization.object({
    keyType: core.serialization.lazy(async () => (await import(\\"../../..\\")).VariableType),
    valueType: core.serialization.lazy(async () => (await import(\\"../../..\\")).VariableType),
});
",
                    "name": "MapType.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const MapValue: core.serialization.ObjectSchema<serializers.MapValue.Raw, TraceApi.MapValue>;
export declare namespace MapValue {
    interface Raw {
        keyValuePairs: serializers.KeyValuePair.Raw[];
    }
}
",
                    "name": "MapValue.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const MapValue = core.serialization.object({
    keyValuePairs: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).KeyValuePair)),
});
",
                    "name": "MapValue.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const NodeId: core.serialization.Schema<serializers.NodeId.Raw, TraceApi.NodeId>;
export declare namespace NodeId {
    type Raw = string;
}
",
                    "name": "NodeId.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const NodeId = core.serialization.string();
",
                    "name": "NodeId.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const ProblemId: core.serialization.Schema<serializers.ProblemId.Raw, TraceApi.ProblemId>;
export declare namespace ProblemId {
    type Raw = string;
}
",
                    "name": "ProblemId.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const ProblemId = core.serialization.string();
",
                    "name": "ProblemId.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const RandomUnknownType: core.serialization.Schema<serializers.RandomUnknownType.Raw, TraceApi.RandomUnknownType>;
export declare namespace RandomUnknownType {
    type Raw = unknown;
}
",
                    "name": "RandomUnknownType.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const RandomUnknownType = core.serialization.unknown();
",
                    "name": "RandomUnknownType.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const SinglyLinkedListNodeAndListValue: core.serialization.ObjectSchema<serializers.SinglyLinkedListNodeAndListValue.Raw, TraceApi.SinglyLinkedListNodeAndListValue>;
export declare namespace SinglyLinkedListNodeAndListValue {
    interface Raw {
        nodeId: serializers.NodeId.Raw;
        fullList: serializers.SinglyLinkedListValue.Raw;
    }
}
",
                    "name": "SinglyLinkedListNodeAndListValue.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const SinglyLinkedListNodeAndListValue = core.serialization.object({
    nodeId: core.serialization.lazy(async () => (await import(\\"../../..\\")).NodeId),
    fullList: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).SinglyLinkedListValue),
});
",
                    "name": "SinglyLinkedListNodeAndListValue.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const SinglyLinkedListNodeValue: core.serialization.ObjectSchema<serializers.SinglyLinkedListNodeValue.Raw, TraceApi.SinglyLinkedListNodeValue>;
export declare namespace SinglyLinkedListNodeValue {
    interface Raw {
        nodeId: serializers.NodeId.Raw;
        val: number;
        next?: serializers.NodeId.Raw | null;
    }
}
",
                    "name": "SinglyLinkedListNodeValue.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const SinglyLinkedListNodeValue = core.serialization.object({
    nodeId: core.serialization.lazy(async () => (await import(\\"../../..\\")).NodeId),
    val: core.serialization.number(),
    next: core.serialization.lazy(async () => (await import(\\"../../..\\")).NodeId).optional(),
});
",
                    "name": "SinglyLinkedListNodeValue.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const SinglyLinkedListValue: core.serialization.ObjectSchema<serializers.SinglyLinkedListValue.Raw, TraceApi.SinglyLinkedListValue>;
export declare namespace SinglyLinkedListValue {
    interface Raw {
        head?: serializers.NodeId.Raw | null;
        nodes: Record<serializers.NodeId.Raw, serializers.SinglyLinkedListNodeValue.Raw>;
    }
}
",
                    "name": "SinglyLinkedListValue.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const SinglyLinkedListValue = core.serialization.object({
    head: core.serialization.lazy(async () => (await import(\\"../../..\\")).NodeId).optional(),
    nodes: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../..\\")).NodeId), core.serialization.lazyObject(async () => (await import(\\"../../..\\")).SinglyLinkedListNodeValue)),
});
",
                    "name": "SinglyLinkedListValue.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const TestCase: core.serialization.ObjectSchema<serializers.TestCase.Raw, TraceApi.TestCase>;
export declare namespace TestCase {
    interface Raw {
        id: string;
        params: serializers.VariableValue.Raw[];
    }
}
",
                    "name": "TestCase.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const TestCase = core.serialization.object({
    id: core.serialization.string(),
    params: core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../..\\")).VariableValue)),
});
",
                    "name": "TestCase.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const TestCaseWithExpectedResult: core.serialization.ObjectSchema<serializers.TestCaseWithExpectedResult.Raw, TraceApi.TestCaseWithExpectedResult>;
export declare namespace TestCaseWithExpectedResult {
    interface Raw {
        testCase: serializers.TestCase.Raw;
        expectedResult: serializers.VariableValue.Raw;
    }
}
",
                    "name": "TestCaseWithExpectedResult.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const TestCaseWithExpectedResult = core.serialization.object({
    testCase: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TestCase),
    expectedResult: core.serialization.lazy(async () => (await import(\\"../../..\\")).VariableValue),
});
",
                    "name": "TestCaseWithExpectedResult.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const UserId: core.serialization.Schema<serializers.UserId.Raw, TraceApi.UserId>;
export declare namespace UserId {
    type Raw = string;
}
",
                    "name": "UserId.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const UserId = core.serialization.string();
",
                    "name": "UserId.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const VariableType: core.serialization.Schema<serializers.VariableType.Raw, TraceApi.VariableType>;
export declare namespace VariableType {
    type Raw = VariableType.IntegerType | VariableType.DoubleType | VariableType.BooleanType | VariableType.StringType | VariableType.CharType | VariableType.ListType | VariableType.MapType | VariableType.BinaryTreeType | VariableType.SinglyLinkedListType | VariableType.DoublyLinkedListType;
    interface IntegerType {
        type: \\"integerType\\";
    }
    interface DoubleType {
        type: \\"doubleType\\";
    }
    interface BooleanType {
        type: \\"booleanType\\";
    }
    interface StringType {
        type: \\"stringType\\";
    }
    interface CharType {
        type: \\"charType\\";
    }
    interface ListType extends serializers.ListType.Raw {
        type: \\"listType\\";
    }
    interface MapType extends serializers.MapType.Raw {
        type: \\"mapType\\";
    }
    interface BinaryTreeType {
        type: \\"binaryTreeType\\";
    }
    interface SinglyLinkedListType {
        type: \\"singlyLinkedListType\\";
    }
    interface DoublyLinkedListType {
        type: \\"doublyLinkedListType\\";
    }
}
",
                    "name": "VariableType.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export const VariableType = core.serialization
    .union(\\"type\\", {
    integerType: core.serialization.object({}),
    doubleType: core.serialization.object({}),
    booleanType: core.serialization.object({}),
    stringType: core.serialization.object({}),
    charType: core.serialization.object({}),
    listType: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).ListType),
    mapType: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).MapType),
    binaryTreeType: core.serialization.object({}),
    singlyLinkedListType: core.serialization.object({}),
    doublyLinkedListType: core.serialization.object({}),
})
    .transform({
    parse: (value) => {
        switch (value.type) {
            case \\"integerType\\":
                return TraceApi.VariableType.integerType();
            case \\"doubleType\\":
                return TraceApi.VariableType.doubleType();
            case \\"booleanType\\":
                return TraceApi.VariableType.booleanType();
            case \\"stringType\\":
                return TraceApi.VariableType.stringType();
            case \\"charType\\":
                return TraceApi.VariableType.charType();
            case \\"listType\\":
                return TraceApi.VariableType.listType(value);
            case \\"mapType\\":
                return TraceApi.VariableType.mapType(value);
            case \\"binaryTreeType\\":
                return TraceApi.VariableType.binaryTreeType();
            case \\"singlyLinkedListType\\":
                return TraceApi.VariableType.singlyLinkedListType();
            case \\"doublyLinkedListType\\":
                return TraceApi.VariableType.doublyLinkedListType();
            default:
                return TraceApi.VariableType._unknown(value);
        }
    },
    json: (value) => value,
});
",
                    "name": "VariableType.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const VariableValue: core.serialization.Schema<serializers.VariableValue.Raw, TraceApi.VariableValue>;
export declare namespace VariableValue {
    type Raw = VariableValue.IntegerValue | VariableValue.BooleanValue | VariableValue.DoubleValue | VariableValue.StringValue | VariableValue.CharValue | VariableValue.MapValue | VariableValue.ListValue | VariableValue.BinaryTreeValue | VariableValue.SinglyLinkedListValue | VariableValue.DoublyLinkedListValue | VariableValue.NullValue;
    interface IntegerValue {
        type: \\"integerValue\\";
        value: number;
    }
    interface BooleanValue {
        type: \\"booleanValue\\";
        value: boolean;
    }
    interface DoubleValue {
        type: \\"doubleValue\\";
        value: number;
    }
    interface StringValue {
        type: \\"stringValue\\";
        value: string;
    }
    interface CharValue {
        type: \\"charValue\\";
        value: string;
    }
    interface MapValue extends serializers.MapValue.Raw {
        type: \\"mapValue\\";
    }
    interface ListValue {
        type: \\"listValue\\";
        value: serializers.VariableValue.Raw[];
    }
    interface BinaryTreeValue extends serializers.BinaryTreeValue.Raw {
        type: \\"binaryTreeValue\\";
    }
    interface SinglyLinkedListValue extends serializers.SinglyLinkedListValue.Raw {
        type: \\"singlyLinkedListValue\\";
    }
    interface DoublyLinkedListValue extends serializers.DoublyLinkedListValue.Raw {
        type: \\"doublyLinkedListValue\\";
    }
    interface NullValue {
        type: \\"nullValue\\";
    }
}
",
                    "name": "VariableValue.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export const VariableValue = core.serialization
    .union(\\"type\\", {
    integerValue: core.serialization.object({
        value: core.serialization.number(),
    }),
    booleanValue: core.serialization.object({
        value: core.serialization.boolean(),
    }),
    doubleValue: core.serialization.object({
        value: core.serialization.number(),
    }),
    stringValue: core.serialization.object({
        value: core.serialization.string(),
    }),
    charValue: core.serialization.object({
        value: core.serialization.string(),
    }),
    mapValue: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).MapValue),
    listValue: core.serialization.object({
        value: core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../..\\")).VariableValue)),
    }),
    binaryTreeValue: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).BinaryTreeValue),
    singlyLinkedListValue: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).SinglyLinkedListValue),
    doublyLinkedListValue: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).DoublyLinkedListValue),
    nullValue: core.serialization.object({}),
})
    .transform({
    parse: (value) => {
        switch (value.type) {
            case \\"integerValue\\":
                return TraceApi.VariableValue.integerValue(value.value);
            case \\"booleanValue\\":
                return TraceApi.VariableValue.booleanValue(value.value);
            case \\"doubleValue\\":
                return TraceApi.VariableValue.doubleValue(value.value);
            case \\"stringValue\\":
                return TraceApi.VariableValue.stringValue(value.value);
            case \\"charValue\\":
                return TraceApi.VariableValue.charValue(value.value);
            case \\"mapValue\\":
                return TraceApi.VariableValue.mapValue(value);
            case \\"listValue\\":
                return TraceApi.VariableValue.listValue(value.value);
            case \\"binaryTreeValue\\":
                return TraceApi.VariableValue.binaryTreeValue(value);
            case \\"singlyLinkedListValue\\":
                return TraceApi.VariableValue.singlyLinkedListValue(value);
            case \\"doublyLinkedListValue\\":
                return TraceApi.VariableValue.doublyLinkedListValue(value);
            case \\"nullValue\\":
                return TraceApi.VariableValue.nullValue();
            default:
                return TraceApi.VariableValue._unknown(value);
        }
    },
    json: (value) => value,
});
",
                    "name": "VariableValue.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./UserId\\";
export * from \\"./ProblemId\\";
export * from \\"./NodeId\\";
export * from \\"./VariableType\\";
export * from \\"./ListType\\";
export * from \\"./MapType\\";
export * from \\"./VariableValue\\";
export * from \\"./DebugVariableValue\\";
export * from \\"./GenericValue\\";
export * from \\"./MapValue\\";
export * from \\"./KeyValuePair\\";
export * from \\"./BinaryTreeValue\\";
export * from \\"./BinaryTreeNodeValue\\";
export * from \\"./BinaryTreeNodeAndTreeValue\\";
export * from \\"./SinglyLinkedListValue\\";
export * from \\"./SinglyLinkedListNodeValue\\";
export * from \\"./SinglyLinkedListNodeAndListValue\\";
export * from \\"./DoublyLinkedListValue\\";
export * from \\"./DoublyLinkedListNodeValue\\";
export * from \\"./DoublyLinkedListNodeAndListValue\\";
export * from \\"./DebugMapValue\\";
export * from \\"./DebugKeyValuePairs\\";
export * from \\"./TestCase\\";
export * from \\"./TestCaseWithExpectedResult\\";
export * from \\"./FileInfo\\";
export * from \\"./Language\\";
export * from \\"./RandomUnknownType\\";
export * from \\"./Date\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./UserId\\";
export * from \\"./ProblemId\\";
export * from \\"./NodeId\\";
export * from \\"./VariableType\\";
export * from \\"./ListType\\";
export * from \\"./MapType\\";
export * from \\"./VariableValue\\";
export * from \\"./DebugVariableValue\\";
export * from \\"./GenericValue\\";
export * from \\"./MapValue\\";
export * from \\"./KeyValuePair\\";
export * from \\"./BinaryTreeValue\\";
export * from \\"./BinaryTreeNodeValue\\";
export * from \\"./BinaryTreeNodeAndTreeValue\\";
export * from \\"./SinglyLinkedListValue\\";
export * from \\"./SinglyLinkedListNodeValue\\";
export * from \\"./SinglyLinkedListNodeAndListValue\\";
export * from \\"./DoublyLinkedListValue\\";
export * from \\"./DoublyLinkedListNodeValue\\";
export * from \\"./DoublyLinkedListNodeAndListValue\\";
export * from \\"./DebugMapValue\\";
export * from \\"./DebugKeyValuePairs\\";
export * from \\"./TestCase\\";
export * from \\"./TestCaseWithExpectedResult\\";
export * from \\"./FileInfo\\";
export * from \\"./Language\\";
export * from \\"./RandomUnknownType\\";
export * from \\"./Date\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "commons",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./service\\";
",
                "name": "index.d.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./service\\";
",
                "name": "index.js",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const Response: core.serialization.Schema<serializers.homepage.getHomepageProblems.Response.Raw, TraceApi.ProblemId[]>;
export declare namespace Response {
    type Raw = serializers.ProblemId.Raw[];
}
",
                    "name": "getHomepageProblems.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const Response = core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../..\\")).ProblemId));
",
                    "name": "getHomepageProblems.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * as getHomepageProblems from \\"./getHomepageProblems\\";
export * as setHomepageProblems from \\"./setHomepageProblems\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * as getHomepageProblems from \\"./getHomepageProblems\\";
export * as setHomepageProblems from \\"./setHomepageProblems\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const Request: core.serialization.Schema<serializers.homepage.setHomepageProblems.Request.Raw, TraceApi.ProblemId[]>;
export declare namespace Request {
    type Raw = serializers.ProblemId.Raw[];
}
",
                    "name": "setHomepageProblems.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const Request = core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../..\\")).ProblemId));
",
                    "name": "setHomepageProblems.js",
                    "type": "file",
                  },
                ],
                "name": "service",
                "type": "directory",
              },
            ],
            "name": "homepage",
            "type": "directory",
          },
          Object {
            "contents": "export * as commons from \\"./commons\\";
export * from \\"./commons/types\\";
export * as langServer from \\"./langServer\\";
export * from \\"./langServer/types\\";
export * as migration from \\"./migration\\";
export * from \\"./migration/types\\";
export * as playlist from \\"./playlist\\";
export * from \\"./playlist/types\\";
export * as problem from \\"./problem\\";
export * from \\"./problem/types\\";
export * as submission from \\"./submission\\";
export * from \\"./submission/types\\";
export * as v2 from \\"./v2\\";
export * as admin from \\"./admin\\";
export * from \\"./admin/service/requests\\";
export * from \\"./problem/service/requests\\";
export * as homepage from \\"./homepage\\";
export * as sysprop from \\"./sysprop\\";
",
            "name": "index.d.ts",
            "type": "file",
          },
          Object {
            "contents": "export * as commons from \\"./commons\\";
export * from \\"./commons/types\\";
export * as langServer from \\"./langServer\\";
export * from \\"./langServer/types\\";
export * as migration from \\"./migration\\";
export * from \\"./migration/types\\";
export * as playlist from \\"./playlist\\";
export * from \\"./playlist/types\\";
export * as problem from \\"./problem\\";
export * from \\"./problem/types\\";
export * as submission from \\"./submission\\";
export * from \\"./submission/types\\";
export * as v2 from \\"./v2\\";
export * as admin from \\"./admin\\";
export * from \\"./admin/service/requests\\";
export * from \\"./problem/service/requests\\";
export * as homepage from \\"./homepage\\";
export * as sysprop from \\"./sysprop\\";
",
            "name": "index.js",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./types\\";
",
                "name": "index.d.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./types\\";
",
                "name": "index.js",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const LangServerRequest: core.serialization.ObjectSchema<serializers.LangServerRequest.Raw, TraceApi.LangServerRequest>;
export declare namespace LangServerRequest {
    interface Raw {
        request?: unknown;
    }
}
",
                    "name": "LangServerRequest.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const LangServerRequest = core.serialization.object({
    request: core.serialization.unknown(),
});
",
                    "name": "LangServerRequest.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const LangServerResponse: core.serialization.ObjectSchema<serializers.LangServerResponse.Raw, TraceApi.LangServerResponse>;
export declare namespace LangServerResponse {
    interface Raw {
        response?: unknown;
    }
}
",
                    "name": "LangServerResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const LangServerResponse = core.serialization.object({
    response: core.serialization.unknown(),
});
",
                    "name": "LangServerResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./LangServerRequest\\";
export * from \\"./LangServerResponse\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./LangServerRequest\\";
export * from \\"./LangServerResponse\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "langServer",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./types\\";
export * from \\"./service\\";
",
                "name": "index.d.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./types\\";
export * from \\"./service\\";
",
                "name": "index.js",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const Response: core.serialization.Schema<serializers.migration.getAttemptedMigrations.Response.Raw, TraceApi.Migration[]>;
export declare namespace Response {
    type Raw = serializers.Migration.Raw[];
}
",
                    "name": "getAttemptedMigrations.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const Response = core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).Migration));
",
                    "name": "getAttemptedMigrations.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * as getAttemptedMigrations from \\"./getAttemptedMigrations\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * as getAttemptedMigrations from \\"./getAttemptedMigrations\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                ],
                "name": "service",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const Migration: core.serialization.ObjectSchema<serializers.Migration.Raw, TraceApi.Migration>;
export declare namespace Migration {
    interface Raw {
        name: string;
        status: serializers.MigrationStatus.Raw;
    }
}
",
                    "name": "Migration.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const Migration = core.serialization.object({
    name: core.serialization.string(),
    status: core.serialization.lazy(async () => (await import(\\"../../..\\")).MigrationStatus),
});
",
                    "name": "Migration.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const MigrationStatus: core.serialization.Schema<serializers.MigrationStatus.Raw, TraceApi.MigrationStatus>;
export declare namespace MigrationStatus {
    type Raw = \\"RUNNING\\" | \\"FAILED\\" | \\"FINISHED\\";
}
",
                    "name": "MigrationStatus.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const MigrationStatus = core.serialization.enum_([\\"RUNNING\\", \\"FAILED\\", \\"FINISHED\\"]);
",
                    "name": "MigrationStatus.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./MigrationStatus\\";
export * from \\"./Migration\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./MigrationStatus\\";
export * from \\"./Migration\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "migration",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./types\\";
export * from \\"./service\\";
",
                "name": "index.d.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./types\\";
export * from \\"./service\\";
",
                "name": "index.js",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const Response: core.serialization.Schema<serializers.playlist.getPlaylists.Response.Raw, TraceApi.Playlist[]>;
export declare namespace Response {
    type Raw = serializers.Playlist.Raw[];
}
",
                    "name": "getPlaylists.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const Response = core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).Playlist));
",
                    "name": "getPlaylists.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * as getPlaylists from \\"./getPlaylists\\";
export * as updatePlaylist from \\"./updatePlaylist\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * as getPlaylists from \\"./getPlaylists\\";
export * as updatePlaylist from \\"./updatePlaylist\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const Request: core.serialization.Schema<serializers.playlist.updatePlaylist.Request.Raw, TraceApi.UpdatePlaylistRequest | undefined>;
export declare namespace Request {
    type Raw = serializers.UpdatePlaylistRequest.Raw | null | undefined;
}
export declare const Response: core.serialization.Schema<serializers.playlist.updatePlaylist.Response.Raw, TraceApi.Playlist | undefined>;
export declare namespace Response {
    type Raw = serializers.Playlist.Raw | null | undefined;
}
",
                    "name": "updatePlaylist.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const Request = core.serialization.lazyObject(async () => (await import(\\"../../..\\")).UpdatePlaylistRequest).optional();
export const Response = core.serialization.lazyObject(async () => (await import(\\"../../..\\")).Playlist).optional();
",
                    "name": "updatePlaylist.js",
                    "type": "file",
                  },
                ],
                "name": "service",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const Color: core.serialization.Schema<serializers.Color.Raw, TraceApi.Color>;
export declare namespace Color {
    type Raw = \\"RED\\" | \\"BLUE\\";
}
",
                    "name": "Color.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const Color = core.serialization.enum_([
    \\"RED\\",
    \\"BLUE\\",
]);
",
                    "name": "Color.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const DateUnion: core.serialization.Schema<serializers.DateUnion.Raw, TraceApi.DateUnion>;
export declare namespace DateUnion {
    type Raw = DateUnion.Date | DateUnion.Datetime;
    interface Date {
        type: \\"date\\";
        value: serializers.Date.Raw;
    }
    interface Datetime {
        type: \\"datetime\\";
        value: string;
    }
}
",
                    "name": "DateUnion.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export const DateUnion = core.serialization
    .union(\\"type\\", {
    date: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).Date),
    }),
    datetime: core.serialization.object({
        value: core.serialization.date(),
    }),
})
    .transform({
    parse: (value) => {
        switch (value.type) {
            case \\"date\\":
                return TraceApi.DateUnion.date(value.value);
            case \\"datetime\\":
                return TraceApi.DateUnion.datetime(value.value);
            default:
                return TraceApi.DateUnion._unknown(value);
        }
    },
    json: (value) => value,
});
",
                    "name": "DateUnion.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const MapWithEnumKey: core.serialization.Schema<serializers.MapWithEnumKey.Raw, TraceApi.MapWithEnumKey>;
export declare namespace MapWithEnumKey {
    type Raw = Record<serializers.Color.Raw, boolean | null | undefined>;
}
",
                    "name": "MapWithEnumKey.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const MapWithEnumKey = core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../..\\")).Color), core.serialization.boolean().optional());
",
                    "name": "MapWithEnumKey.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const MapWithEnumKeyAndOptionalValue: core.serialization.Schema<serializers.MapWithEnumKeyAndOptionalValue.Raw, TraceApi.MapWithEnumKeyAndOptionalValue>;
export declare namespace MapWithEnumKeyAndOptionalValue {
    type Raw = Record<serializers.Color.Raw, boolean | null | undefined>;
}
",
                    "name": "MapWithEnumKeyAndOptionalValue.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const MapWithEnumKeyAndOptionalValue = core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../..\\")).Color), core.serialization.boolean().optional());
",
                    "name": "MapWithEnumKeyAndOptionalValue.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const Playlist: core.serialization.ObjectSchema<serializers.Playlist.Raw, TraceApi.Playlist>;
export declare namespace Playlist {
    interface Raw extends serializers.PlaylistCreateRequest.Raw {
        playlist_id: serializers.PlaylistId.Raw;
        \\"owner-id\\": serializers.UserId.Raw;
    }
}
",
                    "name": "Playlist.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const Playlist = core.serialization
    .object({
    playlistId: core.serialization.property(\\"playlist_id\\", core.serialization.lazy(async () => (await import(\\"../../..\\")).PlaylistId)),
    ownerId: core.serialization.property(\\"owner-id\\", core.serialization.lazy(async () => (await import(\\"../../..\\")).UserId)),
})
    .extend(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).PlaylistCreateRequest));
",
                    "name": "Playlist.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const PlaylistCreateRequest: core.serialization.ObjectSchema<serializers.PlaylistCreateRequest.Raw, TraceApi.PlaylistCreateRequest>;
export declare namespace PlaylistCreateRequest {
    interface Raw {
        name: string;
        problems: serializers.ProblemId.Raw[];
    }
}
",
                    "name": "PlaylistCreateRequest.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const PlaylistCreateRequest = core.serialization.object({
    name: core.serialization.string(),
    problems: core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../..\\")).ProblemId)),
});
",
                    "name": "PlaylistCreateRequest.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const PlaylistId: core.serialization.Schema<serializers.PlaylistId.Raw, TraceApi.PlaylistId>;
export declare namespace PlaylistId {
    type Raw = string;
}
",
                    "name": "PlaylistId.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const PlaylistId = core.serialization.string();
",
                    "name": "PlaylistId.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const PlaylistIdNotFoundErrorBody: core.serialization.Schema<serializers.PlaylistIdNotFoundErrorBody.Raw, TraceApi.PlaylistIdNotFoundErrorBody>;
export declare namespace PlaylistIdNotFoundErrorBody {
    type Raw = PlaylistIdNotFoundErrorBody.PlaylistId;
    interface PlaylistId {
        type: \\"playlistId\\";
        value: serializers.PlaylistId.Raw;
    }
}
",
                    "name": "PlaylistIdNotFoundErrorBody.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export const PlaylistIdNotFoundErrorBody = core.serialization
    .union(\\"type\\", {
    playlistId: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).PlaylistId),
    }),
})
    .transform({
    parse: (value) => {
        switch (value.type) {
            case \\"playlistId\\":
                return TraceApi.PlaylistIdNotFoundErrorBody.playlistId(value.value);
            default:
                return TraceApi.PlaylistIdNotFoundErrorBody._unknown(value);
        }
    },
    json: (value) => value,
});
",
                    "name": "PlaylistIdNotFoundErrorBody.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const ReservedKeywordEnum: core.serialization.Schema<serializers.ReservedKeywordEnum.Raw, TraceApi.ReservedKeywordEnum>;
export declare namespace ReservedKeywordEnum {
    type Raw = \\"is\\" | \\"as\\" | \\"date\\";
}
",
                    "name": "ReservedKeywordEnum.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const ReservedKeywordEnum = core.serialization.enum_([\\"is\\", \\"as\\", \\"date\\"]);
",
                    "name": "ReservedKeywordEnum.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const UpdatePlaylistRequest: core.serialization.ObjectSchema<serializers.UpdatePlaylistRequest.Raw, TraceApi.UpdatePlaylistRequest>;
export declare namespace UpdatePlaylistRequest {
    interface Raw {
        name: string;
        problems: serializers.ProblemId.Raw[];
    }
}
",
                    "name": "UpdatePlaylistRequest.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const UpdatePlaylistRequest = core.serialization.object({
    name: core.serialization.string(),
    problems: core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../..\\")).ProblemId)),
});
",
                    "name": "UpdatePlaylistRequest.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./PlaylistId\\";
export * from \\"./Playlist\\";
export * from \\"./PlaylistCreateRequest\\";
export * from \\"./UpdatePlaylistRequest\\";
export * from \\"./PlaylistIdNotFoundErrorBody\\";
export * from \\"./DateUnion\\";
export * from \\"./ReservedKeywordEnum\\";
export * from \\"./MapWithEnumKey\\";
export * from \\"./MapWithEnumKeyAndOptionalValue\\";
export * from \\"./Color\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./PlaylistId\\";
export * from \\"./Playlist\\";
export * from \\"./PlaylistCreateRequest\\";
export * from \\"./UpdatePlaylistRequest\\";
export * from \\"./PlaylistIdNotFoundErrorBody\\";
export * from \\"./DateUnion\\";
export * from \\"./ReservedKeywordEnum\\";
export * from \\"./MapWithEnumKey\\";
export * from \\"./MapWithEnumKeyAndOptionalValue\\";
export * from \\"./Color\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "playlist",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./types\\";
export * from \\"./service\\";
",
                "name": "index.d.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./types\\";
export * from \\"./service\\";
",
                "name": "index.js",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export * from \\"./requests\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./requests\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../..\\";
import { TraceApi } from \\"../../../../..\\";
import * as core from \\"../../../../../core\\";
export declare const GetDefaultStarterFilesRequest: core.serialization.Schema<serializers.GetDefaultStarterFilesRequest.Raw, TraceApi.GetDefaultStarterFilesRequest>;
export declare namespace GetDefaultStarterFilesRequest {
    interface Raw {
        inputParams: serializers.VariableTypeAndName.Raw[];
        outputType: serializers.VariableType.Raw;
        methodName: string;
    }
}
",
                        "name": "GetDefaultStarterFilesRequest.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../core\\";
export const GetDefaultStarterFilesRequest = core.serialization.object({
    inputParams: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../..\\")).VariableTypeAndName)),
    outputType: core.serialization.lazy(async () => (await import(\\"../../../..\\")).VariableType),
    methodName: core.serialization.string(),
});
",
                        "name": "GetDefaultStarterFilesRequest.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { GetDefaultStarterFilesRequest } from \\"./GetDefaultStarterFilesRequest\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { GetDefaultStarterFilesRequest } from \\"./GetDefaultStarterFilesRequest\\";
",
                        "name": "index.js",
                        "type": "file",
                      },
                    ],
                    "name": "requests",
                    "type": "directory",
                  },
                ],
                "name": "service",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const CreateProblemError: core.serialization.Schema<serializers.CreateProblemError.Raw, TraceApi.CreateProblemError>;
export declare namespace CreateProblemError {
    type Raw = CreateProblemError.Generic;
    interface Generic extends serializers.GenericCreateProblemError.Raw {
        _type: \\"generic\\";
    }
}
",
                    "name": "CreateProblemError.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export const CreateProblemError = core.serialization
    .union(core.serialization.discriminant(\\"errorType\\", \\"_type\\"), {
    generic: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).GenericCreateProblemError),
})
    .transform({
    parse: (value) => {
        switch (value.errorType) {
            case \\"generic\\":
                return TraceApi.CreateProblemError.generic(value);
            default:
                return TraceApi.CreateProblemError._unknown(value);
        }
    },
    json: (value) => value,
});
",
                    "name": "CreateProblemError.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const CreateProblemRequest: core.serialization.ObjectSchema<serializers.CreateProblemRequest.Raw, TraceApi.CreateProblemRequest>;
export declare namespace CreateProblemRequest {
    interface Raw {
        problemName: string;
        problemDescription: serializers.ProblemDescription.Raw;
        files: Record<serializers.Language.Raw, serializers.ProblemFiles.Raw | null | undefined>;
        inputParams: serializers.VariableTypeAndName.Raw[];
        outputType: serializers.VariableType.Raw;
        testcases: serializers.TestCaseWithExpectedResult.Raw[];
        methodName: string;
    }
}
",
                    "name": "CreateProblemRequest.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const CreateProblemRequest = core.serialization.object({
    problemName: core.serialization.string(),
    problemDescription: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).ProblemDescription),
    files: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../..\\")).ProblemFiles).optional()),
    inputParams: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).VariableTypeAndName)),
    outputType: core.serialization.lazy(async () => (await import(\\"../../..\\")).VariableType),
    testcases: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TestCaseWithExpectedResult)),
    methodName: core.serialization.string(),
});
",
                    "name": "CreateProblemRequest.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const CreateProblemResponse: core.serialization.Schema<serializers.CreateProblemResponse.Raw, TraceApi.CreateProblemResponse>;
export declare namespace CreateProblemResponse {
    type Raw = CreateProblemResponse.Success | CreateProblemResponse.Error;
    interface Success {
        type: \\"success\\";
        value: serializers.ProblemId.Raw;
    }
    interface Error {
        type: \\"error\\";
        value: serializers.CreateProblemError.Raw;
    }
}
",
                    "name": "CreateProblemResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export const CreateProblemResponse = core.serialization
    .union(\\"type\\", {
    success: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).ProblemId),
    }),
    error: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).CreateProblemError),
    }),
})
    .transform({
    parse: (value) => {
        switch (value.type) {
            case \\"success\\":
                return TraceApi.CreateProblemResponse.success(value.value);
            case \\"error\\":
                return TraceApi.CreateProblemResponse.error(value.value);
            default:
                return TraceApi.CreateProblemResponse._unknown(value);
        }
    },
    json: (value) => value,
});
",
                    "name": "CreateProblemResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const GenericCreateProblemError: core.serialization.ObjectSchema<serializers.GenericCreateProblemError.Raw, TraceApi.GenericCreateProblemError>;
export declare namespace GenericCreateProblemError {
    interface Raw {
        message: string;
        type: string;
        stacktrace: string;
    }
}
",
                    "name": "GenericCreateProblemError.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const GenericCreateProblemError = core.serialization.object({
    message: core.serialization.string(),
    type: core.serialization.string(),
    stacktrace: core.serialization.string(),
});
",
                    "name": "GenericCreateProblemError.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const GetDefaultStarterFilesResponse: core.serialization.ObjectSchema<serializers.GetDefaultStarterFilesResponse.Raw, TraceApi.GetDefaultStarterFilesResponse>;
export declare namespace GetDefaultStarterFilesResponse {
    interface Raw {
        files: Record<serializers.Language.Raw, serializers.ProblemFiles.Raw | null | undefined>;
    }
}
",
                    "name": "GetDefaultStarterFilesResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const GetDefaultStarterFilesResponse = core.serialization.object({
    files: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../..\\")).ProblemFiles).optional()),
});
",
                    "name": "GetDefaultStarterFilesResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const ProblemDescription: core.serialization.ObjectSchema<serializers.ProblemDescription.Raw, TraceApi.ProblemDescription>;
export declare namespace ProblemDescription {
    interface Raw {
        boards: serializers.ProblemDescriptionBoard.Raw[];
    }
}
",
                    "name": "ProblemDescription.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const ProblemDescription = core.serialization.object({
    boards: core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../..\\")).ProblemDescriptionBoard)),
});
",
                    "name": "ProblemDescription.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const ProblemDescriptionBoard: core.serialization.Schema<serializers.ProblemDescriptionBoard.Raw, TraceApi.ProblemDescriptionBoard>;
export declare namespace ProblemDescriptionBoard {
    type Raw = ProblemDescriptionBoard.Html | ProblemDescriptionBoard.Variable | ProblemDescriptionBoard.TestCaseId;
    interface Html {
        type: \\"html\\";
        value: string;
    }
    interface Variable {
        type: \\"variable\\";
        value: serializers.VariableValue.Raw;
    }
    interface TestCaseId {
        type: \\"testCaseId\\";
        value: string;
    }
}
",
                    "name": "ProblemDescriptionBoard.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export const ProblemDescriptionBoard = core.serialization
    .union(\\"type\\", {
    html: core.serialization.object({
        value: core.serialization.string(),
    }),
    variable: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).VariableValue),
    }),
    testCaseId: core.serialization.object({
        value: core.serialization.string(),
    }),
})
    .transform({
    parse: (value) => {
        switch (value.type) {
            case \\"html\\":
                return TraceApi.ProblemDescriptionBoard.html(value.value);
            case \\"variable\\":
                return TraceApi.ProblemDescriptionBoard.variable(value.value);
            case \\"testCaseId\\":
                return TraceApi.ProblemDescriptionBoard.testCaseId(value.value);
            default:
                return TraceApi.ProblemDescriptionBoard._unknown(value);
        }
    },
    json: (value) => value,
});
",
                    "name": "ProblemDescriptionBoard.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const ProblemFiles: core.serialization.ObjectSchema<serializers.ProblemFiles.Raw, TraceApi.ProblemFiles>;
export declare namespace ProblemFiles {
    interface Raw {
        solutionFile: serializers.FileInfo.Raw;
        readOnlyFiles: serializers.FileInfo.Raw[];
    }
}
",
                    "name": "ProblemFiles.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const ProblemFiles = core.serialization.object({
    solutionFile: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).FileInfo),
    readOnlyFiles: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).FileInfo)),
});
",
                    "name": "ProblemFiles.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const ProblemInfo: core.serialization.ObjectSchema<serializers.ProblemInfo.Raw, TraceApi.ProblemInfo>;
export declare namespace ProblemInfo {
    interface Raw {
        problemId: serializers.ProblemId.Raw;
        problemDescription: serializers.ProblemDescription.Raw;
        problemName: string;
        problemVersion: number;
        files: Record<serializers.Language.Raw, serializers.ProblemFiles.Raw | null | undefined>;
        inputParams: serializers.VariableTypeAndName.Raw[];
        outputType: serializers.VariableType.Raw;
        testcases: serializers.TestCaseWithExpectedResult.Raw[];
        methodName: string;
        supportsCustomTestCases: boolean;
    }
}
",
                    "name": "ProblemInfo.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const ProblemInfo = core.serialization.object({
    problemId: core.serialization.lazy(async () => (await import(\\"../../..\\")).ProblemId),
    problemDescription: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).ProblemDescription),
    problemName: core.serialization.string(),
    problemVersion: core.serialization.number(),
    files: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../..\\")).ProblemFiles).optional()),
    inputParams: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).VariableTypeAndName)),
    outputType: core.serialization.lazy(async () => (await import(\\"../../..\\")).VariableType),
    testcases: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TestCaseWithExpectedResult)),
    methodName: core.serialization.string(),
    supportsCustomTestCases: core.serialization.boolean(),
});
",
                    "name": "ProblemInfo.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const ProblemsMap: core.serialization.ObjectSchema<serializers.ProblemsMap.Raw, TraceApi.ProblemsMap>;
export declare namespace ProblemsMap {
    interface Raw {
        problemsById: Record<serializers.ProblemId.Raw, serializers.ProblemInfo.Raw>;
    }
}
",
                    "name": "ProblemsMap.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const ProblemsMap = core.serialization.object({
    problemsById: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../..\\")).ProblemId), core.serialization.lazyObject(async () => (await import(\\"../../..\\")).ProblemInfo)),
});
",
                    "name": "ProblemsMap.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const UpdateProblemResponse: core.serialization.ObjectSchema<serializers.UpdateProblemResponse.Raw, TraceApi.UpdateProblemResponse>;
export declare namespace UpdateProblemResponse {
    interface Raw {
        problemVersion: number;
    }
}
",
                    "name": "UpdateProblemResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const UpdateProblemResponse = core.serialization.object({
    problemVersion: core.serialization.number(),
});
",
                    "name": "UpdateProblemResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const VariableTypeAndName: core.serialization.ObjectSchema<serializers.VariableTypeAndName.Raw, TraceApi.VariableTypeAndName>;
export declare namespace VariableTypeAndName {
    interface Raw {
        variableType: serializers.VariableType.Raw;
        name: string;
    }
}
",
                    "name": "VariableTypeAndName.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const VariableTypeAndName = core.serialization.object({
    variableType: core.serialization.lazy(async () => (await import(\\"../../..\\")).VariableType),
    name: core.serialization.string(),
});
",
                    "name": "VariableTypeAndName.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./ProblemInfo\\";
export * from \\"./ProblemsMap\\";
export * from \\"./ProblemDescription\\";
export * from \\"./ProblemDescriptionBoard\\";
export * from \\"./ProblemFiles\\";
export * from \\"./VariableTypeAndName\\";
export * from \\"./CreateProblemRequest\\";
export * from \\"./CreateProblemResponse\\";
export * from \\"./UpdateProblemResponse\\";
export * from \\"./CreateProblemError\\";
export * from \\"./GenericCreateProblemError\\";
export * from \\"./GetDefaultStarterFilesResponse\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./ProblemInfo\\";
export * from \\"./ProblemsMap\\";
export * from \\"./ProblemDescription\\";
export * from \\"./ProblemDescriptionBoard\\";
export * from \\"./ProblemFiles\\";
export * from \\"./VariableTypeAndName\\";
export * from \\"./CreateProblemRequest\\";
export * from \\"./CreateProblemResponse\\";
export * from \\"./UpdateProblemResponse\\";
export * from \\"./CreateProblemError\\";
export * from \\"./GenericCreateProblemError\\";
export * from \\"./GetDefaultStarterFilesResponse\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "problem",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./types\\";
export * from \\"./service\\";
",
                "name": "index.d.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./types\\";
export * from \\"./service\\";
",
                "name": "index.js",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const Response: core.serialization.Schema<serializers.submission.getExecutionSession.Response.Raw, TraceApi.ExecutionSessionResponse | undefined>;
export declare namespace Response {
    type Raw = serializers.ExecutionSessionResponse.Raw | null | undefined;
}
",
                    "name": "getExecutionSession.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const Response = core.serialization.lazyObject(async () => (await import(\\"../../..\\")).ExecutionSessionResponse).optional();
",
                    "name": "getExecutionSession.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * as getExecutionSession from \\"./getExecutionSession\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * as getExecutionSession from \\"./getExecutionSession\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                ],
                "name": "service",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const ActualResult: core.serialization.Schema<serializers.ActualResult.Raw, TraceApi.ActualResult>;
export declare namespace ActualResult {
    type Raw = ActualResult.Value | ActualResult.Exception | ActualResult.ExceptionV2;
    interface Value {
        type: \\"value\\";
        value: serializers.VariableValue.Raw;
    }
    interface Exception extends serializers.ExceptionInfo.Raw {
        type: \\"exception\\";
    }
    interface ExceptionV2 {
        type: \\"exceptionV2\\";
        value: serializers.ExceptionV2.Raw;
    }
}
",
                    "name": "ActualResult.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export const ActualResult = core.serialization
    .union(\\"type\\", {
    value: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).VariableValue),
    }),
    exception: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).ExceptionInfo),
    exceptionV2: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).ExceptionV2),
    }),
})
    .transform({
    parse: (value) => {
        switch (value.type) {
            case \\"value\\":
                return TraceApi.ActualResult.value(value.value);
            case \\"exception\\":
                return TraceApi.ActualResult.exception(value);
            case \\"exceptionV2\\":
                return TraceApi.ActualResult.exceptionV2(value.value);
            default:
                return TraceApi.ActualResult._unknown(value);
        }
    },
    json: (value) => value,
});
",
                    "name": "ActualResult.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const BuildingExecutorResponse: core.serialization.ObjectSchema<serializers.BuildingExecutorResponse.Raw, TraceApi.BuildingExecutorResponse>;
export declare namespace BuildingExecutorResponse {
    interface Raw {
        submissionId: serializers.SubmissionId.Raw;
        status: serializers.ExecutionSessionStatus.Raw;
    }
}
",
                    "name": "BuildingExecutorResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const BuildingExecutorResponse = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId),
    status: core.serialization.lazy(async () => (await import(\\"../../..\\")).ExecutionSessionStatus),
});
",
                    "name": "BuildingExecutorResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const CodeExecutionUpdate: core.serialization.Schema<serializers.CodeExecutionUpdate.Raw, TraceApi.CodeExecutionUpdate>;
export declare namespace CodeExecutionUpdate {
    type Raw = CodeExecutionUpdate.BuildingExecutor | CodeExecutionUpdate.Running | CodeExecutionUpdate.Errored | CodeExecutionUpdate.Stopped | CodeExecutionUpdate.Graded | CodeExecutionUpdate.GradedV2 | CodeExecutionUpdate.WorkspaceRan | CodeExecutionUpdate.Recording | CodeExecutionUpdate.Recorded | CodeExecutionUpdate.InvalidRequest | CodeExecutionUpdate.Finished;
    interface BuildingExecutor extends serializers.BuildingExecutorResponse.Raw {
        type: \\"buildingExecutor\\";
    }
    interface Running extends serializers.RunningResponse.Raw {
        type: \\"running\\";
    }
    interface Errored extends serializers.ErroredResponse.Raw {
        type: \\"errored\\";
    }
    interface Stopped extends serializers.StoppedResponse.Raw {
        type: \\"stopped\\";
    }
    interface Graded extends serializers.GradedResponse.Raw {
        type: \\"graded\\";
    }
    interface GradedV2 extends serializers.GradedResponseV2.Raw {
        type: \\"gradedV2\\";
    }
    interface WorkspaceRan extends serializers.WorkspaceRanResponse.Raw {
        type: \\"workspaceRan\\";
    }
    interface Recording extends serializers.RecordingResponseNotification.Raw {
        type: \\"recording\\";
    }
    interface Recorded extends serializers.RecordedResponseNotification.Raw {
        type: \\"recorded\\";
    }
    interface InvalidRequest extends serializers.InvalidRequestResponse.Raw {
        type: \\"invalidRequest\\";
    }
    interface Finished extends serializers.FinishedResponse.Raw {
        type: \\"finished\\";
    }
}
",
                    "name": "CodeExecutionUpdate.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export const CodeExecutionUpdate = core.serialization
    .union(\\"type\\", {
    buildingExecutor: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).BuildingExecutorResponse),
    running: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).RunningResponse),
    errored: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).ErroredResponse),
    stopped: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).StoppedResponse),
    graded: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).GradedResponse),
    gradedV2: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).GradedResponseV2),
    workspaceRan: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).WorkspaceRanResponse),
    recording: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).RecordingResponseNotification),
    recorded: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).RecordedResponseNotification),
    invalidRequest: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).InvalidRequestResponse),
    finished: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).FinishedResponse),
})
    .transform({
    parse: (value) => {
        switch (value.type) {
            case \\"buildingExecutor\\":
                return TraceApi.CodeExecutionUpdate.buildingExecutor(value);
            case \\"running\\":
                return TraceApi.CodeExecutionUpdate.running(value);
            case \\"errored\\":
                return TraceApi.CodeExecutionUpdate.errored(value);
            case \\"stopped\\":
                return TraceApi.CodeExecutionUpdate.stopped(value);
            case \\"graded\\":
                return TraceApi.CodeExecutionUpdate.graded(value);
            case \\"gradedV2\\":
                return TraceApi.CodeExecutionUpdate.gradedV2(value);
            case \\"workspaceRan\\":
                return TraceApi.CodeExecutionUpdate.workspaceRan(value);
            case \\"recording\\":
                return TraceApi.CodeExecutionUpdate.recording(value);
            case \\"recorded\\":
                return TraceApi.CodeExecutionUpdate.recorded(value);
            case \\"invalidRequest\\":
                return TraceApi.CodeExecutionUpdate.invalidRequest(value);
            case \\"finished\\":
                return TraceApi.CodeExecutionUpdate.finished(value);
            default:
                return TraceApi.CodeExecutionUpdate._unknown(value);
        }
    },
    json: (value) => value,
});
",
                    "name": "CodeExecutionUpdate.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const CompileError: core.serialization.ObjectSchema<serializers.CompileError.Raw, TraceApi.CompileError>;
export declare namespace CompileError {
    interface Raw {
        message: string;
    }
}
",
                    "name": "CompileError.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const CompileError = core.serialization.object({
    message: core.serialization.string(),
});
",
                    "name": "CompileError.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const CustomTestCasesUnsupported: core.serialization.ObjectSchema<serializers.CustomTestCasesUnsupported.Raw, TraceApi.CustomTestCasesUnsupported>;
export declare namespace CustomTestCasesUnsupported {
    interface Raw {
        problemId: serializers.ProblemId.Raw;
        submissionId: serializers.SubmissionId.Raw;
    }
}
",
                    "name": "CustomTestCasesUnsupported.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const CustomTestCasesUnsupported = core.serialization.object({
    problemId: core.serialization.lazy(async () => (await import(\\"../../..\\")).ProblemId),
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId),
});
",
                    "name": "CustomTestCasesUnsupported.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const ErrorInfo: core.serialization.Schema<serializers.ErrorInfo.Raw, TraceApi.ErrorInfo>;
export declare namespace ErrorInfo {
    type Raw = ErrorInfo.CompileError | ErrorInfo.RuntimeError | ErrorInfo.InternalError;
    interface CompileError extends serializers.CompileError.Raw {
        type: \\"compileError\\";
    }
    interface RuntimeError extends serializers.RuntimeError.Raw {
        type: \\"runtimeError\\";
    }
    interface InternalError extends serializers.InternalError.Raw {
        type: \\"internalError\\";
    }
}
",
                    "name": "ErrorInfo.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export const ErrorInfo = core.serialization
    .union(\\"type\\", {
    compileError: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).CompileError),
    runtimeError: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).RuntimeError),
    internalError: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).InternalError),
})
    .transform({
    parse: (value) => {
        switch (value.type) {
            case \\"compileError\\":
                return TraceApi.ErrorInfo.compileError(value);
            case \\"runtimeError\\":
                return TraceApi.ErrorInfo.runtimeError(value);
            case \\"internalError\\":
                return TraceApi.ErrorInfo.internalError(value);
            default:
                return TraceApi.ErrorInfo._unknown(value);
        }
    },
    json: (value) => value,
});
",
                    "name": "ErrorInfo.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const ErroredResponse: core.serialization.ObjectSchema<serializers.ErroredResponse.Raw, TraceApi.ErroredResponse>;
export declare namespace ErroredResponse {
    interface Raw {
        submissionId: serializers.SubmissionId.Raw;
        errorInfo: serializers.ErrorInfo.Raw;
    }
}
",
                    "name": "ErroredResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const ErroredResponse = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId),
    errorInfo: core.serialization.lazy(async () => (await import(\\"../../..\\")).ErrorInfo),
});
",
                    "name": "ErroredResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const ExceptionInfo: core.serialization.ObjectSchema<serializers.ExceptionInfo.Raw, TraceApi.ExceptionInfo>;
export declare namespace ExceptionInfo {
    interface Raw {
        exceptionType: string;
        exceptionMessage: string;
        exceptionStacktrace: string;
    }
}
",
                    "name": "ExceptionInfo.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const ExceptionInfo = core.serialization.object({
    exceptionType: core.serialization.string(),
    exceptionMessage: core.serialization.string(),
    exceptionStacktrace: core.serialization.string(),
});
",
                    "name": "ExceptionInfo.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const ExceptionV2: core.serialization.Schema<serializers.ExceptionV2.Raw, TraceApi.ExceptionV2>;
export declare namespace ExceptionV2 {
    type Raw = ExceptionV2.Generic | ExceptionV2.Timeout;
    interface Generic extends serializers.ExceptionInfo.Raw {
        type: \\"generic\\";
    }
    interface Timeout {
        type: \\"timeout\\";
    }
}
",
                    "name": "ExceptionV2.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export const ExceptionV2 = core.serialization
    .union(\\"type\\", {
    generic: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).ExceptionInfo),
    timeout: core.serialization.object({}),
})
    .transform({
    parse: (value) => {
        switch (value.type) {
            case \\"generic\\":
                return TraceApi.ExceptionV2.generic(value);
            case \\"timeout\\":
                return TraceApi.ExceptionV2.timeout();
            default:
                return TraceApi.ExceptionV2._unknown(value);
        }
    },
    json: (value) => value,
});
",
                    "name": "ExceptionV2.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const ExecutionSessionResponse: core.serialization.ObjectSchema<serializers.ExecutionSessionResponse.Raw, TraceApi.ExecutionSessionResponse>;
export declare namespace ExecutionSessionResponse {
    interface Raw {
        sessionId: string;
        executionSessionUrl?: string | null;
        language: serializers.Language.Raw;
        status: serializers.ExecutionSessionStatus.Raw;
    }
}
",
                    "name": "ExecutionSessionResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const ExecutionSessionResponse = core.serialization.object({
    sessionId: core.serialization.string(),
    executionSessionUrl: core.serialization.string().optional(),
    language: core.serialization.lazy(async () => (await import(\\"../../..\\")).Language),
    status: core.serialization.lazy(async () => (await import(\\"../../..\\")).ExecutionSessionStatus),
});
",
                    "name": "ExecutionSessionResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const ExecutionSessionState: core.serialization.ObjectSchema<serializers.ExecutionSessionState.Raw, TraceApi.ExecutionSessionState>;
export declare namespace ExecutionSessionState {
    interface Raw {
        lastTimeContacted?: string | null;
        sessionId: string;
        isWarmInstance: boolean;
        awsTaskId?: string | null;
        language: serializers.Language.Raw;
        status: serializers.ExecutionSessionStatus.Raw;
    }
}
",
                    "name": "ExecutionSessionState.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const ExecutionSessionState = core.serialization.object({
    lastTimeContacted: core.serialization.string().optional(),
    sessionId: core.serialization.string(),
    isWarmInstance: core.serialization.boolean(),
    awsTaskId: core.serialization.string().optional(),
    language: core.serialization.lazy(async () => (await import(\\"../../..\\")).Language),
    status: core.serialization.lazy(async () => (await import(\\"../../..\\")).ExecutionSessionStatus),
});
",
                    "name": "ExecutionSessionState.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const ExecutionSessionStatus: core.serialization.Schema<serializers.ExecutionSessionStatus.Raw, TraceApi.ExecutionSessionStatus>;
export declare namespace ExecutionSessionStatus {
    type Raw = \\"CREATING_CONTAINER\\" | \\"PROVISIONING_CONTAINER\\" | \\"PENDING_CONTAINER\\" | \\"RUNNING_CONTAINER\\" | \\"LIVE_CONTAINER\\" | \\"FAILED_TO_LAUNCH\\";
}
",
                    "name": "ExecutionSessionStatus.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const ExecutionSessionStatus = core.serialization.enum_([
    \\"CREATING_CONTAINER\\",
    \\"PROVISIONING_CONTAINER\\",
    \\"PENDING_CONTAINER\\",
    \\"RUNNING_CONTAINER\\",
    \\"LIVE_CONTAINER\\",
    \\"FAILED_TO_LAUNCH\\",
]);
",
                    "name": "ExecutionSessionStatus.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const ExistingSubmissionExecuting: core.serialization.ObjectSchema<serializers.ExistingSubmissionExecuting.Raw, TraceApi.ExistingSubmissionExecuting>;
export declare namespace ExistingSubmissionExecuting {
    interface Raw {
        submissionId: serializers.SubmissionId.Raw;
    }
}
",
                    "name": "ExistingSubmissionExecuting.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const ExistingSubmissionExecuting = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId),
});
",
                    "name": "ExistingSubmissionExecuting.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const ExpressionLocation: core.serialization.ObjectSchema<serializers.ExpressionLocation.Raw, TraceApi.ExpressionLocation>;
export declare namespace ExpressionLocation {
    interface Raw {
        start: number;
        offset: number;
    }
}
",
                    "name": "ExpressionLocation.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const ExpressionLocation = core.serialization.object({
    start: core.serialization.number(),
    offset: core.serialization.number(),
});
",
                    "name": "ExpressionLocation.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const FinishedResponse: core.serialization.ObjectSchema<serializers.FinishedResponse.Raw, TraceApi.FinishedResponse>;
export declare namespace FinishedResponse {
    interface Raw {
        submissionId: serializers.SubmissionId.Raw;
    }
}
",
                    "name": "FinishedResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const FinishedResponse = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId),
});
",
                    "name": "FinishedResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const GetExecutionSessionStateResponse: core.serialization.ObjectSchema<serializers.GetExecutionSessionStateResponse.Raw, TraceApi.GetExecutionSessionStateResponse>;
export declare namespace GetExecutionSessionStateResponse {
    interface Raw {
        states: Record<string, serializers.ExecutionSessionState.Raw>;
        numWarmingInstances?: number | null;
        warmingSessionIds: string[];
    }
}
",
                    "name": "GetExecutionSessionStateResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const GetExecutionSessionStateResponse = core.serialization.object({
    states: core.serialization.record(core.serialization.string(), core.serialization.lazyObject(async () => (await import(\\"../../..\\")).ExecutionSessionState)),
    numWarmingInstances: core.serialization.number().optional(),
    warmingSessionIds: core.serialization.list(core.serialization.string()),
});
",
                    "name": "GetExecutionSessionStateResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const GetSubmissionStateResponse: core.serialization.ObjectSchema<serializers.GetSubmissionStateResponse.Raw, TraceApi.GetSubmissionStateResponse>;
export declare namespace GetSubmissionStateResponse {
    interface Raw {
        timeSubmitted?: string | null;
        submission: string;
        language: serializers.Language.Raw;
        submissionTypeState: serializers.SubmissionTypeState.Raw;
    }
}
",
                    "name": "GetSubmissionStateResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const GetSubmissionStateResponse = core.serialization.object({
    timeSubmitted: core.serialization.date().optional(),
    submission: core.serialization.string(),
    language: core.serialization.lazy(async () => (await import(\\"../../..\\")).Language),
    submissionTypeState: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionTypeState),
});
",
                    "name": "GetSubmissionStateResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const GetTraceResponsesPageRequest: core.serialization.ObjectSchema<serializers.GetTraceResponsesPageRequest.Raw, TraceApi.GetTraceResponsesPageRequest>;
export declare namespace GetTraceResponsesPageRequest {
    interface Raw {
        offset?: number | null;
    }
}
",
                    "name": "GetTraceResponsesPageRequest.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const GetTraceResponsesPageRequest = core.serialization.object({
    offset: core.serialization.number().optional(),
});
",
                    "name": "GetTraceResponsesPageRequest.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const GradedResponse: core.serialization.ObjectSchema<serializers.GradedResponse.Raw, TraceApi.GradedResponse>;
export declare namespace GradedResponse {
    interface Raw {
        submissionId: serializers.SubmissionId.Raw;
        testCases: Record<string, serializers.TestCaseResultWithStdout.Raw>;
    }
}
",
                    "name": "GradedResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const GradedResponse = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId),
    testCases: core.serialization.record(core.serialization.string(), core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TestCaseResultWithStdout)),
});
",
                    "name": "GradedResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const GradedResponseV2: core.serialization.ObjectSchema<serializers.GradedResponseV2.Raw, TraceApi.GradedResponseV2>;
export declare namespace GradedResponseV2 {
    interface Raw {
        submissionId: serializers.SubmissionId.Raw;
        testCases: Record<serializers.v2.TestCaseId.Raw, serializers.TestCaseGrade.Raw>;
    }
}
",
                    "name": "GradedResponseV2.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const GradedResponseV2 = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId),
    testCases: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../..\\")).v2.TestCaseId), core.serialization.lazy(async () => (await import(\\"../../..\\")).TestCaseGrade)),
});
",
                    "name": "GradedResponseV2.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const GradedTestCaseUpdate: core.serialization.ObjectSchema<serializers.GradedTestCaseUpdate.Raw, TraceApi.GradedTestCaseUpdate>;
export declare namespace GradedTestCaseUpdate {
    interface Raw {
        testCaseId: serializers.v2.TestCaseId.Raw;
        grade: serializers.TestCaseGrade.Raw;
    }
}
",
                    "name": "GradedTestCaseUpdate.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const GradedTestCaseUpdate = core.serialization.object({
    testCaseId: core.serialization.lazy(async () => (await import(\\"../../..\\")).v2.TestCaseId),
    grade: core.serialization.lazy(async () => (await import(\\"../../..\\")).TestCaseGrade),
});
",
                    "name": "GradedTestCaseUpdate.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const InitializeProblemRequest: core.serialization.ObjectSchema<serializers.InitializeProblemRequest.Raw, TraceApi.InitializeProblemRequest>;
export declare namespace InitializeProblemRequest {
    interface Raw {
        problemId: serializers.ProblemId.Raw;
        problemVersion?: number | null;
    }
}
",
                    "name": "InitializeProblemRequest.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const InitializeProblemRequest = core.serialization.object({
    problemId: core.serialization.lazy(async () => (await import(\\"../../..\\")).ProblemId),
    problemVersion: core.serialization.number().optional(),
});
",
                    "name": "InitializeProblemRequest.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const InternalError: core.serialization.ObjectSchema<serializers.InternalError.Raw, TraceApi.InternalError>;
export declare namespace InternalError {
    interface Raw {
        exceptionInfo: serializers.ExceptionInfo.Raw;
    }
}
",
                    "name": "InternalError.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const InternalError = core.serialization.object({
    exceptionInfo: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).ExceptionInfo),
});
",
                    "name": "InternalError.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const InvalidRequestCause: core.serialization.Schema<serializers.InvalidRequestCause.Raw, TraceApi.InvalidRequestCause>;
export declare namespace InvalidRequestCause {
    type Raw = InvalidRequestCause.SubmissionIdNotFound | InvalidRequestCause.CustomTestCasesUnsupported | InvalidRequestCause.UnexpectedLanguage;
    interface SubmissionIdNotFound extends serializers.SubmissionIdNotFound.Raw {
        type: \\"submissionIdNotFound\\";
    }
    interface CustomTestCasesUnsupported extends serializers.CustomTestCasesUnsupported.Raw {
        type: \\"customTestCasesUnsupported\\";
    }
    interface UnexpectedLanguage extends serializers.UnexpectedLanguageError.Raw {
        type: \\"unexpectedLanguage\\";
    }
}
",
                    "name": "InvalidRequestCause.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export const InvalidRequestCause = core.serialization
    .union(\\"type\\", {
    submissionIdNotFound: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).SubmissionIdNotFound),
    customTestCasesUnsupported: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).CustomTestCasesUnsupported),
    unexpectedLanguage: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).UnexpectedLanguageError),
})
    .transform({
    parse: (value) => {
        switch (value.type) {
            case \\"submissionIdNotFound\\":
                return TraceApi.InvalidRequestCause.submissionIdNotFound(value);
            case \\"customTestCasesUnsupported\\":
                return TraceApi.InvalidRequestCause.customTestCasesUnsupported(value);
            case \\"unexpectedLanguage\\":
                return TraceApi.InvalidRequestCause.unexpectedLanguage(value);
            default:
                return TraceApi.InvalidRequestCause._unknown(value);
        }
    },
    json: (value) => value,
});
",
                    "name": "InvalidRequestCause.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const InvalidRequestResponse: core.serialization.ObjectSchema<serializers.InvalidRequestResponse.Raw, TraceApi.InvalidRequestResponse>;
export declare namespace InvalidRequestResponse {
    interface Raw {
        request: serializers.SubmissionRequest.Raw;
        cause: serializers.InvalidRequestCause.Raw;
    }
}
",
                    "name": "InvalidRequestResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const InvalidRequestResponse = core.serialization.object({
    request: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionRequest),
    cause: core.serialization.lazy(async () => (await import(\\"../../..\\")).InvalidRequestCause),
});
",
                    "name": "InvalidRequestResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const LightweightStackframeInformation: core.serialization.ObjectSchema<serializers.LightweightStackframeInformation.Raw, TraceApi.LightweightStackframeInformation>;
export declare namespace LightweightStackframeInformation {
    interface Raw {
        numStackFrames: number;
        topStackFrameMethodName: string;
    }
}
",
                    "name": "LightweightStackframeInformation.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const LightweightStackframeInformation = core.serialization.object({
    numStackFrames: core.serialization.number(),
    topStackFrameMethodName: core.serialization.string(),
});
",
                    "name": "LightweightStackframeInformation.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const RecordedResponseNotification: core.serialization.ObjectSchema<serializers.RecordedResponseNotification.Raw, TraceApi.RecordedResponseNotification>;
export declare namespace RecordedResponseNotification {
    interface Raw {
        submissionId: serializers.SubmissionId.Raw;
        traceResponsesSize: number;
        testCaseId?: string | null;
    }
}
",
                    "name": "RecordedResponseNotification.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const RecordedResponseNotification = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId),
    traceResponsesSize: core.serialization.number(),
    testCaseId: core.serialization.string().optional(),
});
",
                    "name": "RecordedResponseNotification.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const RecordedTestCaseUpdate: core.serialization.ObjectSchema<serializers.RecordedTestCaseUpdate.Raw, TraceApi.RecordedTestCaseUpdate>;
export declare namespace RecordedTestCaseUpdate {
    interface Raw {
        testCaseId: serializers.v2.TestCaseId.Raw;
        traceResponsesSize: number;
    }
}
",
                    "name": "RecordedTestCaseUpdate.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const RecordedTestCaseUpdate = core.serialization.object({
    testCaseId: core.serialization.lazy(async () => (await import(\\"../../..\\")).v2.TestCaseId),
    traceResponsesSize: core.serialization.number(),
});
",
                    "name": "RecordedTestCaseUpdate.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const RecordingResponseNotification: core.serialization.ObjectSchema<serializers.RecordingResponseNotification.Raw, TraceApi.RecordingResponseNotification>;
export declare namespace RecordingResponseNotification {
    interface Raw {
        submissionId: serializers.SubmissionId.Raw;
        testCaseId?: string | null;
        lineNumber: number;
        lightweightStackInfo: serializers.LightweightStackframeInformation.Raw;
        tracedFile?: serializers.TracedFile.Raw | null;
    }
}
",
                    "name": "RecordingResponseNotification.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const RecordingResponseNotification = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId),
    testCaseId: core.serialization.string().optional(),
    lineNumber: core.serialization.number(),
    lightweightStackInfo: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).LightweightStackframeInformation),
    tracedFile: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TracedFile).optional(),
});
",
                    "name": "RecordingResponseNotification.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const RunningResponse: core.serialization.ObjectSchema<serializers.RunningResponse.Raw, TraceApi.RunningResponse>;
export declare namespace RunningResponse {
    interface Raw {
        submissionId: serializers.SubmissionId.Raw;
        state: serializers.RunningSubmissionState.Raw;
    }
}
",
                    "name": "RunningResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const RunningResponse = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId),
    state: core.serialization.lazy(async () => (await import(\\"../../..\\")).RunningSubmissionState),
});
",
                    "name": "RunningResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const RunningSubmissionState: core.serialization.Schema<serializers.RunningSubmissionState.Raw, TraceApi.RunningSubmissionState>;
export declare namespace RunningSubmissionState {
    type Raw = \\"QUEUEING_SUBMISSION\\" | \\"KILLING_HISTORICAL_SUBMISSIONS\\" | \\"WRITING_SUBMISSION_TO_FILE\\" | \\"COMPILING_SUBMISSION\\" | \\"RUNNING_SUBMISSION\\";
}
",
                    "name": "RunningSubmissionState.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const RunningSubmissionState = core.serialization.enum_([
    \\"QUEUEING_SUBMISSION\\",
    \\"KILLING_HISTORICAL_SUBMISSIONS\\",
    \\"WRITING_SUBMISSION_TO_FILE\\",
    \\"COMPILING_SUBMISSION\\",
    \\"RUNNING_SUBMISSION\\",
]);
",
                    "name": "RunningSubmissionState.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const RuntimeError: core.serialization.ObjectSchema<serializers.RuntimeError.Raw, TraceApi.RuntimeError>;
export declare namespace RuntimeError {
    interface Raw {
        message: string;
    }
}
",
                    "name": "RuntimeError.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const RuntimeError = core.serialization.object({
    message: core.serialization.string(),
});
",
                    "name": "RuntimeError.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const Scope: core.serialization.ObjectSchema<serializers.Scope.Raw, TraceApi.Scope>;
export declare namespace Scope {
    interface Raw {
        variables: Record<string, serializers.DebugVariableValue.Raw>;
    }
}
",
                    "name": "Scope.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const Scope = core.serialization.object({
    variables: core.serialization.record(core.serialization.string(), core.serialization.lazy(async () => (await import(\\"../../..\\")).DebugVariableValue)),
});
",
                    "name": "Scope.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const ShareId: core.serialization.Schema<serializers.ShareId.Raw, TraceApi.ShareId>;
export declare namespace ShareId {
    type Raw = string;
}
",
                    "name": "ShareId.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const ShareId = core.serialization.string();
",
                    "name": "ShareId.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const StackFrame: core.serialization.ObjectSchema<serializers.StackFrame.Raw, TraceApi.StackFrame>;
export declare namespace StackFrame {
    interface Raw {
        methodName: string;
        lineNumber: number;
        scopes: serializers.Scope.Raw[];
    }
}
",
                    "name": "StackFrame.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const StackFrame = core.serialization.object({
    methodName: core.serialization.string(),
    lineNumber: core.serialization.number(),
    scopes: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).Scope)),
});
",
                    "name": "StackFrame.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const StackInformation: core.serialization.ObjectSchema<serializers.StackInformation.Raw, TraceApi.StackInformation>;
export declare namespace StackInformation {
    interface Raw {
        numStackFrames: number;
        topStackFrame?: serializers.StackFrame.Raw | null;
    }
}
",
                    "name": "StackInformation.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const StackInformation = core.serialization.object({
    numStackFrames: core.serialization.number(),
    topStackFrame: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).StackFrame).optional(),
});
",
                    "name": "StackInformation.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const StderrResponse: core.serialization.ObjectSchema<serializers.StderrResponse.Raw, TraceApi.StderrResponse>;
export declare namespace StderrResponse {
    interface Raw {
        submissionId: serializers.SubmissionId.Raw;
        stderr: string;
    }
}
",
                    "name": "StderrResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const StderrResponse = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId),
    stderr: core.serialization.string(),
});
",
                    "name": "StderrResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const StdoutResponse: core.serialization.ObjectSchema<serializers.StdoutResponse.Raw, TraceApi.StdoutResponse>;
export declare namespace StdoutResponse {
    interface Raw {
        submissionId: serializers.SubmissionId.Raw;
        stdout: string;
    }
}
",
                    "name": "StdoutResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const StdoutResponse = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId),
    stdout: core.serialization.string(),
});
",
                    "name": "StdoutResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const StopRequest: core.serialization.ObjectSchema<serializers.StopRequest.Raw, TraceApi.StopRequest>;
export declare namespace StopRequest {
    interface Raw {
        submissionId: serializers.SubmissionId.Raw;
    }
}
",
                    "name": "StopRequest.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const StopRequest = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId),
});
",
                    "name": "StopRequest.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const StoppedResponse: core.serialization.ObjectSchema<serializers.StoppedResponse.Raw, TraceApi.StoppedResponse>;
export declare namespace StoppedResponse {
    interface Raw {
        submissionId: serializers.SubmissionId.Raw;
    }
}
",
                    "name": "StoppedResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const StoppedResponse = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId),
});
",
                    "name": "StoppedResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const SubmissionFileInfo: core.serialization.ObjectSchema<serializers.SubmissionFileInfo.Raw, TraceApi.SubmissionFileInfo>;
export declare namespace SubmissionFileInfo {
    interface Raw {
        directory: string;
        filename: string;
        contents: string;
    }
}
",
                    "name": "SubmissionFileInfo.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const SubmissionFileInfo = core.serialization.object({
    directory: core.serialization.string(),
    filename: core.serialization.string(),
    contents: core.serialization.string(),
});
",
                    "name": "SubmissionFileInfo.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const SubmissionId: core.serialization.Schema<serializers.SubmissionId.Raw, TraceApi.SubmissionId>;
export declare namespace SubmissionId {
    type Raw = string;
}
",
                    "name": "SubmissionId.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const SubmissionId = core.serialization.string();
",
                    "name": "SubmissionId.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const SubmissionIdNotFound: core.serialization.ObjectSchema<serializers.SubmissionIdNotFound.Raw, TraceApi.SubmissionIdNotFound>;
export declare namespace SubmissionIdNotFound {
    interface Raw {
        missingSubmissionId: serializers.SubmissionId.Raw;
    }
}
",
                    "name": "SubmissionIdNotFound.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const SubmissionIdNotFound = core.serialization.object({
    missingSubmissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId),
});
",
                    "name": "SubmissionIdNotFound.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const SubmissionRequest: core.serialization.Schema<serializers.SubmissionRequest.Raw, TraceApi.SubmissionRequest>;
export declare namespace SubmissionRequest {
    type Raw = SubmissionRequest.InitializeProblemRequest | SubmissionRequest.InitializeWorkspaceRequest | SubmissionRequest.SubmitV2 | SubmissionRequest.WorkspaceSubmit | SubmissionRequest.Stop;
    interface InitializeProblemRequest extends serializers.InitializeProblemRequest.Raw {
        type: \\"initializeProblemRequest\\";
    }
    interface InitializeWorkspaceRequest {
        type: \\"initializeWorkspaceRequest\\";
    }
    interface SubmitV2 extends serializers.SubmitRequestV2.Raw {
        type: \\"submitV2\\";
    }
    interface WorkspaceSubmit extends serializers.WorkspaceSubmitRequest.Raw {
        type: \\"workspaceSubmit\\";
    }
    interface Stop extends serializers.StopRequest.Raw {
        type: \\"stop\\";
    }
}
",
                    "name": "SubmissionRequest.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export const SubmissionRequest = core.serialization
    .union(\\"type\\", {
    initializeProblemRequest: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).InitializeProblemRequest),
    initializeWorkspaceRequest: core.serialization.object({}),
    submitV2: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).SubmitRequestV2),
    workspaceSubmit: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).WorkspaceSubmitRequest),
    stop: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).StopRequest),
})
    .transform({
    parse: (value) => {
        switch (value.type) {
            case \\"initializeProblemRequest\\":
                return TraceApi.SubmissionRequest.initializeProblemRequest(value);
            case \\"initializeWorkspaceRequest\\":
                return TraceApi.SubmissionRequest.initializeWorkspaceRequest();
            case \\"submitV2\\":
                return TraceApi.SubmissionRequest.submitV2(value);
            case \\"workspaceSubmit\\":
                return TraceApi.SubmissionRequest.workspaceSubmit(value);
            case \\"stop\\":
                return TraceApi.SubmissionRequest.stop(value);
            default:
                return TraceApi.SubmissionRequest._unknown(value);
        }
    },
    json: (value) => value,
});
",
                    "name": "SubmissionRequest.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const SubmissionResponse: core.serialization.Schema<serializers.SubmissionResponse.Raw, TraceApi.SubmissionResponse>;
export declare namespace SubmissionResponse {
    type Raw = SubmissionResponse.ServerInitialized | SubmissionResponse.ProblemInitialized | SubmissionResponse.WorkspaceInitialized | SubmissionResponse.ServerErrored | SubmissionResponse.CodeExecutionUpdate | SubmissionResponse.Terminated;
    interface ServerInitialized {
        type: \\"serverInitialized\\";
    }
    interface ProblemInitialized {
        type: \\"problemInitialized\\";
        value: serializers.ProblemId.Raw;
    }
    interface WorkspaceInitialized {
        type: \\"workspaceInitialized\\";
    }
    interface ServerErrored extends serializers.ExceptionInfo.Raw {
        type: \\"serverErrored\\";
    }
    interface CodeExecutionUpdate {
        type: \\"codeExecutionUpdate\\";
        value: serializers.CodeExecutionUpdate.Raw;
    }
    interface Terminated extends serializers.TerminatedResponse.Raw {
        type: \\"terminated\\";
    }
}
",
                    "name": "SubmissionResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export const SubmissionResponse = core.serialization
    .union(\\"type\\", {
    serverInitialized: core.serialization.object({}),
    problemInitialized: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).ProblemId),
    }),
    workspaceInitialized: core.serialization.object({}),
    serverErrored: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).ExceptionInfo),
    codeExecutionUpdate: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).CodeExecutionUpdate),
    }),
    terminated: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TerminatedResponse),
})
    .transform({
    parse: (value) => {
        switch (value.type) {
            case \\"serverInitialized\\":
                return TraceApi.SubmissionResponse.serverInitialized();
            case \\"problemInitialized\\":
                return TraceApi.SubmissionResponse.problemInitialized(value.value);
            case \\"workspaceInitialized\\":
                return TraceApi.SubmissionResponse.workspaceInitialized();
            case \\"serverErrored\\":
                return TraceApi.SubmissionResponse.serverErrored(value);
            case \\"codeExecutionUpdate\\":
                return TraceApi.SubmissionResponse.codeExecutionUpdate(value.value);
            case \\"terminated\\":
                return TraceApi.SubmissionResponse.terminated(value);
            default:
                return TraceApi.SubmissionResponse._unknown(value);
        }
    },
    json: (value) => value,
});
",
                    "name": "SubmissionResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const SubmissionStatusForTestCase: core.serialization.Schema<serializers.SubmissionStatusForTestCase.Raw, TraceApi.SubmissionStatusForTestCase>;
export declare namespace SubmissionStatusForTestCase {
    type Raw = SubmissionStatusForTestCase.Graded | SubmissionStatusForTestCase.GradedV2 | SubmissionStatusForTestCase.Traced;
    interface Graded extends serializers.TestCaseResultWithStdout.Raw {
        type: \\"graded\\";
    }
    interface GradedV2 {
        type: \\"gradedV2\\";
        value: serializers.TestCaseGrade.Raw;
    }
    interface Traced extends serializers.TracedTestCase.Raw {
        type: \\"traced\\";
    }
}
",
                    "name": "SubmissionStatusForTestCase.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export const SubmissionStatusForTestCase = core.serialization
    .union(\\"type\\", {
    graded: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TestCaseResultWithStdout),
    gradedV2: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).TestCaseGrade),
    }),
    traced: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TracedTestCase),
})
    .transform({
    parse: (value) => {
        switch (value.type) {
            case \\"graded\\":
                return TraceApi.SubmissionStatusForTestCase.graded(value);
            case \\"gradedV2\\":
                return TraceApi.SubmissionStatusForTestCase.gradedV2(value.value);
            case \\"traced\\":
                return TraceApi.SubmissionStatusForTestCase.traced(value);
            default:
                return TraceApi.SubmissionStatusForTestCase._unknown(value);
        }
    },
    json: (value) => value,
});
",
                    "name": "SubmissionStatusForTestCase.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const SubmissionStatusV2: core.serialization.Schema<serializers.SubmissionStatusV2.Raw, TraceApi.SubmissionStatusV2>;
export declare namespace SubmissionStatusV2 {
    type Raw = SubmissionStatusV2.Test | SubmissionStatusV2.Workspace;
    interface Test extends serializers.TestSubmissionStatusV2.Raw {
        type: \\"test\\";
    }
    interface Workspace extends serializers.WorkspaceSubmissionStatusV2.Raw {
        type: \\"workspace\\";
    }
}
",
                    "name": "SubmissionStatusV2.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export const SubmissionStatusV2 = core.serialization
    .union(\\"type\\", {
    test: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TestSubmissionStatusV2),
    workspace: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).WorkspaceSubmissionStatusV2),
})
    .transform({
    parse: (value) => {
        switch (value.type) {
            case \\"test\\":
                return TraceApi.SubmissionStatusV2.test(value);
            case \\"workspace\\":
                return TraceApi.SubmissionStatusV2.workspace(value);
            default:
                return TraceApi.SubmissionStatusV2._unknown(value);
        }
    },
    json: (value) => value,
});
",
                    "name": "SubmissionStatusV2.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const SubmissionTypeEnum: core.serialization.Schema<serializers.SubmissionTypeEnum.Raw, TraceApi.SubmissionTypeEnum>;
export declare namespace SubmissionTypeEnum {
    type Raw = \\"TEST\\";
}
",
                    "name": "SubmissionTypeEnum.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const SubmissionTypeEnum = core.serialization.enum_([\\"TEST\\"]);
",
                    "name": "SubmissionTypeEnum.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const SubmissionTypeState: core.serialization.Schema<serializers.SubmissionTypeState.Raw, TraceApi.SubmissionTypeState>;
export declare namespace SubmissionTypeState {
    type Raw = SubmissionTypeState.Test | SubmissionTypeState.Workspace;
    interface Test extends serializers.TestSubmissionState.Raw {
        type: \\"test\\";
    }
    interface Workspace extends serializers.WorkspaceSubmissionState.Raw {
        type: \\"workspace\\";
    }
}
",
                    "name": "SubmissionTypeState.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export const SubmissionTypeState = core.serialization
    .union(\\"type\\", {
    test: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TestSubmissionState),
    workspace: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).WorkspaceSubmissionState),
})
    .transform({
    parse: (value) => {
        switch (value.type) {
            case \\"test\\":
                return TraceApi.SubmissionTypeState.test(value);
            case \\"workspace\\":
                return TraceApi.SubmissionTypeState.workspace(value);
            default:
                return TraceApi.SubmissionTypeState._unknown(value);
        }
    },
    json: (value) => value,
});
",
                    "name": "SubmissionTypeState.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const SubmitRequestV2: core.serialization.ObjectSchema<serializers.SubmitRequestV2.Raw, TraceApi.SubmitRequestV2>;
export declare namespace SubmitRequestV2 {
    interface Raw {
        submissionId: serializers.SubmissionId.Raw;
        language: serializers.Language.Raw;
        submissionFiles: serializers.SubmissionFileInfo.Raw[];
        problemId: serializers.ProblemId.Raw;
        problemVersion?: number | null;
        userId?: string | null;
    }
}
",
                    "name": "SubmitRequestV2.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const SubmitRequestV2 = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId),
    language: core.serialization.lazy(async () => (await import(\\"../../..\\")).Language),
    submissionFiles: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).SubmissionFileInfo)),
    problemId: core.serialization.lazy(async () => (await import(\\"../../..\\")).ProblemId),
    problemVersion: core.serialization.number().optional(),
    userId: core.serialization.string().optional(),
});
",
                    "name": "SubmitRequestV2.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const TerminatedResponse: core.serialization.ObjectSchema<serializers.TerminatedResponse.Raw, TraceApi.TerminatedResponse>;
export declare namespace TerminatedResponse {
    interface Raw {
    }
}
",
                    "name": "TerminatedResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const TerminatedResponse = core.serialization.object({});
",
                    "name": "TerminatedResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const TestCaseGrade: core.serialization.Schema<serializers.TestCaseGrade.Raw, TraceApi.TestCaseGrade>;
export declare namespace TestCaseGrade {
    type Raw = TestCaseGrade.Hidden | TestCaseGrade.NonHidden;
    interface Hidden extends serializers.TestCaseHiddenGrade.Raw {
        type: \\"hidden\\";
    }
    interface NonHidden extends serializers.TestCaseNonHiddenGrade.Raw {
        type: \\"nonHidden\\";
    }
}
",
                    "name": "TestCaseGrade.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export const TestCaseGrade = core.serialization
    .union(\\"type\\", {
    hidden: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TestCaseHiddenGrade),
    nonHidden: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TestCaseNonHiddenGrade),
})
    .transform({
    parse: (value) => {
        switch (value.type) {
            case \\"hidden\\":
                return TraceApi.TestCaseGrade.hidden(value);
            case \\"nonHidden\\":
                return TraceApi.TestCaseGrade.nonHidden(value);
            default:
                return TraceApi.TestCaseGrade._unknown(value);
        }
    },
    json: (value) => value,
});
",
                    "name": "TestCaseGrade.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const TestCaseHiddenGrade: core.serialization.ObjectSchema<serializers.TestCaseHiddenGrade.Raw, TraceApi.TestCaseHiddenGrade>;
export declare namespace TestCaseHiddenGrade {
    interface Raw {
        passed: boolean;
    }
}
",
                    "name": "TestCaseHiddenGrade.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const TestCaseHiddenGrade = core.serialization.object({
    passed: core.serialization.boolean(),
});
",
                    "name": "TestCaseHiddenGrade.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const TestCaseNonHiddenGrade: core.serialization.ObjectSchema<serializers.TestCaseNonHiddenGrade.Raw, TraceApi.TestCaseNonHiddenGrade>;
export declare namespace TestCaseNonHiddenGrade {
    interface Raw {
        passed: boolean;
        actualResult?: serializers.VariableValue.Raw | null;
        exception?: serializers.ExceptionV2.Raw | null;
        stdout: string;
    }
}
",
                    "name": "TestCaseNonHiddenGrade.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const TestCaseNonHiddenGrade = core.serialization.object({
    passed: core.serialization.boolean(),
    actualResult: core.serialization.lazy(async () => (await import(\\"../../..\\")).VariableValue).optional(),
    exception: core.serialization.lazy(async () => (await import(\\"../../..\\")).ExceptionV2).optional(),
    stdout: core.serialization.string(),
});
",
                    "name": "TestCaseNonHiddenGrade.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const TestCaseResult: core.serialization.ObjectSchema<serializers.TestCaseResult.Raw, TraceApi.TestCaseResult>;
export declare namespace TestCaseResult {
    interface Raw {
        expectedResult: serializers.VariableValue.Raw;
        actualResult: serializers.ActualResult.Raw;
        passed: boolean;
    }
}
",
                    "name": "TestCaseResult.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const TestCaseResult = core.serialization.object({
    expectedResult: core.serialization.lazy(async () => (await import(\\"../../..\\")).VariableValue),
    actualResult: core.serialization.lazy(async () => (await import(\\"../../..\\")).ActualResult),
    passed: core.serialization.boolean(),
});
",
                    "name": "TestCaseResult.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const TestCaseResultWithStdout: core.serialization.ObjectSchema<serializers.TestCaseResultWithStdout.Raw, TraceApi.TestCaseResultWithStdout>;
export declare namespace TestCaseResultWithStdout {
    interface Raw {
        result: serializers.TestCaseResult.Raw;
        stdout: string;
    }
}
",
                    "name": "TestCaseResultWithStdout.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const TestCaseResultWithStdout = core.serialization.object({
    result: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TestCaseResult),
    stdout: core.serialization.string(),
});
",
                    "name": "TestCaseResultWithStdout.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const TestSubmissionState: core.serialization.ObjectSchema<serializers.TestSubmissionState.Raw, TraceApi.TestSubmissionState>;
export declare namespace TestSubmissionState {
    interface Raw {
        problemId: serializers.ProblemId.Raw;
        defaultTestCases: serializers.TestCase.Raw[];
        customTestCases: serializers.TestCase.Raw[];
        status: serializers.TestSubmissionStatus.Raw;
    }
}
",
                    "name": "TestSubmissionState.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const TestSubmissionState = core.serialization.object({
    problemId: core.serialization.lazy(async () => (await import(\\"../../..\\")).ProblemId),
    defaultTestCases: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TestCase)),
    customTestCases: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TestCase)),
    status: core.serialization.lazy(async () => (await import(\\"../../..\\")).TestSubmissionStatus),
});
",
                    "name": "TestSubmissionState.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const TestSubmissionStatus: core.serialization.Schema<serializers.TestSubmissionStatus.Raw, TraceApi.TestSubmissionStatus>;
export declare namespace TestSubmissionStatus {
    type Raw = TestSubmissionStatus.Stopped | TestSubmissionStatus.Errored | TestSubmissionStatus.Running | TestSubmissionStatus.TestCaseIdToState;
    interface Stopped {
        type: \\"stopped\\";
    }
    interface Errored {
        type: \\"errored\\";
        value: serializers.ErrorInfo.Raw;
    }
    interface Running {
        type: \\"running\\";
        value: serializers.RunningSubmissionState.Raw;
    }
    interface TestCaseIdToState {
        type: \\"testCaseIdToState\\";
        value: Record<string, serializers.SubmissionStatusForTestCase.Raw>;
    }
}
",
                    "name": "TestSubmissionStatus.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export const TestSubmissionStatus = core.serialization
    .union(\\"type\\", {
    stopped: core.serialization.object({}),
    errored: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).ErrorInfo),
    }),
    running: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).RunningSubmissionState),
    }),
    testCaseIdToState: core.serialization.object({
        value: core.serialization.record(core.serialization.string(), core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionStatusForTestCase)),
    }),
})
    .transform({
    parse: (value) => {
        switch (value.type) {
            case \\"stopped\\":
                return TraceApi.TestSubmissionStatus.stopped();
            case \\"errored\\":
                return TraceApi.TestSubmissionStatus.errored(value.value);
            case \\"running\\":
                return TraceApi.TestSubmissionStatus.running(value.value);
            case \\"testCaseIdToState\\":
                return TraceApi.TestSubmissionStatus.testCaseIdToState(value.value);
            default:
                return TraceApi.TestSubmissionStatus._unknown(value);
        }
    },
    json: (value) => value,
});
",
                    "name": "TestSubmissionStatus.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const TestSubmissionStatusV2: core.serialization.ObjectSchema<serializers.TestSubmissionStatusV2.Raw, TraceApi.TestSubmissionStatusV2>;
export declare namespace TestSubmissionStatusV2 {
    interface Raw {
        updates: serializers.TestSubmissionUpdate.Raw[];
        problemId: serializers.ProblemId.Raw;
        problemVersion: number;
        problemInfo: serializers.v2.ProblemInfoV2.Raw;
    }
}
",
                    "name": "TestSubmissionStatusV2.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const TestSubmissionStatusV2 = core.serialization.object({
    updates: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TestSubmissionUpdate)),
    problemId: core.serialization.lazy(async () => (await import(\\"../../..\\")).ProblemId),
    problemVersion: core.serialization.number(),
    problemInfo: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).v2.ProblemInfoV2),
});
",
                    "name": "TestSubmissionStatusV2.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const TestSubmissionUpdate: core.serialization.ObjectSchema<serializers.TestSubmissionUpdate.Raw, TraceApi.TestSubmissionUpdate>;
export declare namespace TestSubmissionUpdate {
    interface Raw {
        updateTime: string;
        updateInfo: serializers.TestSubmissionUpdateInfo.Raw;
    }
}
",
                    "name": "TestSubmissionUpdate.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const TestSubmissionUpdate = core.serialization.object({
    updateTime: core.serialization.date(),
    updateInfo: core.serialization.lazy(async () => (await import(\\"../../..\\")).TestSubmissionUpdateInfo),
});
",
                    "name": "TestSubmissionUpdate.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const TestSubmissionUpdateInfo: core.serialization.Schema<serializers.TestSubmissionUpdateInfo.Raw, TraceApi.TestSubmissionUpdateInfo>;
export declare namespace TestSubmissionUpdateInfo {
    type Raw = TestSubmissionUpdateInfo.Running | TestSubmissionUpdateInfo.Stopped | TestSubmissionUpdateInfo.Errored | TestSubmissionUpdateInfo.GradedTestCase | TestSubmissionUpdateInfo.RecordedTestCase | TestSubmissionUpdateInfo.Finished;
    interface Running {
        type: \\"running\\";
        value: serializers.RunningSubmissionState.Raw;
    }
    interface Stopped {
        type: \\"stopped\\";
    }
    interface Errored {
        type: \\"errored\\";
        value: serializers.ErrorInfo.Raw;
    }
    interface GradedTestCase extends serializers.GradedTestCaseUpdate.Raw {
        type: \\"gradedTestCase\\";
    }
    interface RecordedTestCase extends serializers.RecordedTestCaseUpdate.Raw {
        type: \\"recordedTestCase\\";
    }
    interface Finished {
        type: \\"finished\\";
    }
}
",
                    "name": "TestSubmissionUpdateInfo.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export const TestSubmissionUpdateInfo = core.serialization
    .union(\\"type\\", {
    running: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).RunningSubmissionState),
    }),
    stopped: core.serialization.object({}),
    errored: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).ErrorInfo),
    }),
    gradedTestCase: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).GradedTestCaseUpdate),
    recordedTestCase: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).RecordedTestCaseUpdate),
    finished: core.serialization.object({}),
})
    .transform({
    parse: (value) => {
        switch (value.type) {
            case \\"running\\":
                return TraceApi.TestSubmissionUpdateInfo.running(value.value);
            case \\"stopped\\":
                return TraceApi.TestSubmissionUpdateInfo.stopped();
            case \\"errored\\":
                return TraceApi.TestSubmissionUpdateInfo.errored(value.value);
            case \\"gradedTestCase\\":
                return TraceApi.TestSubmissionUpdateInfo.gradedTestCase(value);
            case \\"recordedTestCase\\":
                return TraceApi.TestSubmissionUpdateInfo.recordedTestCase(value);
            case \\"finished\\":
                return TraceApi.TestSubmissionUpdateInfo.finished();
            default:
                return TraceApi.TestSubmissionUpdateInfo._unknown(value);
        }
    },
    json: (value) => value,
});
",
                    "name": "TestSubmissionUpdateInfo.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const TraceResponse: core.serialization.ObjectSchema<serializers.TraceResponse.Raw, TraceApi.TraceResponse>;
export declare namespace TraceResponse {
    interface Raw {
        submissionId: serializers.SubmissionId.Raw;
        lineNumber: number;
        returnValue?: serializers.DebugVariableValue.Raw | null;
        expressionLocation?: serializers.ExpressionLocation.Raw | null;
        stack: serializers.StackInformation.Raw;
        stdout?: string | null;
    }
}
",
                    "name": "TraceResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const TraceResponse = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId),
    lineNumber: core.serialization.number(),
    returnValue: core.serialization.lazy(async () => (await import(\\"../../..\\")).DebugVariableValue).optional(),
    expressionLocation: core.serialization
        .lazyObject(async () => (await import(\\"../../..\\")).ExpressionLocation)
        .optional(),
    stack: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).StackInformation),
    stdout: core.serialization.string().optional(),
});
",
                    "name": "TraceResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const TraceResponseV2: core.serialization.ObjectSchema<serializers.TraceResponseV2.Raw, TraceApi.TraceResponseV2>;
export declare namespace TraceResponseV2 {
    interface Raw {
        submissionId: serializers.SubmissionId.Raw;
        lineNumber: number;
        file: serializers.TracedFile.Raw;
        returnValue?: serializers.DebugVariableValue.Raw | null;
        expressionLocation?: serializers.ExpressionLocation.Raw | null;
        stack: serializers.StackInformation.Raw;
        stdout?: string | null;
    }
}
",
                    "name": "TraceResponseV2.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const TraceResponseV2 = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId),
    lineNumber: core.serialization.number(),
    file: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TracedFile),
    returnValue: core.serialization.lazy(async () => (await import(\\"../../..\\")).DebugVariableValue).optional(),
    expressionLocation: core.serialization
        .lazyObject(async () => (await import(\\"../../..\\")).ExpressionLocation)
        .optional(),
    stack: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).StackInformation),
    stdout: core.serialization.string().optional(),
});
",
                    "name": "TraceResponseV2.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const TraceResponsesPage: core.serialization.ObjectSchema<serializers.TraceResponsesPage.Raw, TraceApi.TraceResponsesPage>;
export declare namespace TraceResponsesPage {
    interface Raw {
        offset?: number | null;
        traceResponses: serializers.TraceResponse.Raw[];
    }
}
",
                    "name": "TraceResponsesPage.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const TraceResponsesPage = core.serialization.object({
    offset: core.serialization.number().optional(),
    traceResponses: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TraceResponse)),
});
",
                    "name": "TraceResponsesPage.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const TraceResponsesPageV2: core.serialization.ObjectSchema<serializers.TraceResponsesPageV2.Raw, TraceApi.TraceResponsesPageV2>;
export declare namespace TraceResponsesPageV2 {
    interface Raw {
        offset?: number | null;
        traceResponses: serializers.TraceResponseV2.Raw[];
    }
}
",
                    "name": "TraceResponsesPageV2.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const TraceResponsesPageV2 = core.serialization.object({
    offset: core.serialization.number().optional(),
    traceResponses: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TraceResponseV2)),
});
",
                    "name": "TraceResponsesPageV2.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const TracedFile: core.serialization.ObjectSchema<serializers.TracedFile.Raw, TraceApi.TracedFile>;
export declare namespace TracedFile {
    interface Raw {
        filename: string;
        directory: string;
    }
}
",
                    "name": "TracedFile.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const TracedFile = core.serialization.object({
    filename: core.serialization.string(),
    directory: core.serialization.string(),
});
",
                    "name": "TracedFile.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const TracedTestCase: core.serialization.ObjectSchema<serializers.TracedTestCase.Raw, TraceApi.TracedTestCase>;
export declare namespace TracedTestCase {
    interface Raw {
        result: serializers.TestCaseResultWithStdout.Raw;
        traceResponsesSize: number;
    }
}
",
                    "name": "TracedTestCase.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const TracedTestCase = core.serialization.object({
    result: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TestCaseResultWithStdout),
    traceResponsesSize: core.serialization.number(),
});
",
                    "name": "TracedTestCase.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const UnexpectedLanguageError: core.serialization.ObjectSchema<serializers.UnexpectedLanguageError.Raw, TraceApi.UnexpectedLanguageError>;
export declare namespace UnexpectedLanguageError {
    interface Raw {
        expectedLanguage: serializers.Language.Raw;
        actualLanguage: serializers.Language.Raw;
    }
}
",
                    "name": "UnexpectedLanguageError.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const UnexpectedLanguageError = core.serialization.object({
    expectedLanguage: core.serialization.lazy(async () => (await import(\\"../../..\\")).Language),
    actualLanguage: core.serialization.lazy(async () => (await import(\\"../../..\\")).Language),
});
",
                    "name": "UnexpectedLanguageError.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const WorkspaceFiles: core.serialization.ObjectSchema<serializers.WorkspaceFiles.Raw, TraceApi.WorkspaceFiles>;
export declare namespace WorkspaceFiles {
    interface Raw {
        mainFile: serializers.FileInfo.Raw;
        readOnlyFiles: serializers.FileInfo.Raw[];
    }
}
",
                    "name": "WorkspaceFiles.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const WorkspaceFiles = core.serialization.object({
    mainFile: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).FileInfo),
    readOnlyFiles: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).FileInfo)),
});
",
                    "name": "WorkspaceFiles.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const WorkspaceRanResponse: core.serialization.ObjectSchema<serializers.WorkspaceRanResponse.Raw, TraceApi.WorkspaceRanResponse>;
export declare namespace WorkspaceRanResponse {
    interface Raw {
        submissionId: serializers.SubmissionId.Raw;
        runDetails: serializers.WorkspaceRunDetails.Raw;
    }
}
",
                    "name": "WorkspaceRanResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const WorkspaceRanResponse = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId),
    runDetails: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).WorkspaceRunDetails),
});
",
                    "name": "WorkspaceRanResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const WorkspaceRunDetails: core.serialization.ObjectSchema<serializers.WorkspaceRunDetails.Raw, TraceApi.WorkspaceRunDetails>;
export declare namespace WorkspaceRunDetails {
    interface Raw {
        exceptionV2?: serializers.ExceptionV2.Raw | null;
        exception?: serializers.ExceptionInfo.Raw | null;
        stdout: string;
    }
}
",
                    "name": "WorkspaceRunDetails.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const WorkspaceRunDetails = core.serialization.object({
    exceptionV2: core.serialization.lazy(async () => (await import(\\"../../..\\")).ExceptionV2).optional(),
    exception: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).ExceptionInfo).optional(),
    stdout: core.serialization.string(),
});
",
                    "name": "WorkspaceRunDetails.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const WorkspaceStarterFilesResponse: core.serialization.ObjectSchema<serializers.WorkspaceStarterFilesResponse.Raw, TraceApi.WorkspaceStarterFilesResponse>;
export declare namespace WorkspaceStarterFilesResponse {
    interface Raw {
        files: Record<serializers.Language.Raw, serializers.WorkspaceFiles.Raw | null | undefined>;
    }
}
",
                    "name": "WorkspaceStarterFilesResponse.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const WorkspaceStarterFilesResponse = core.serialization.object({
    files: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../..\\")).WorkspaceFiles).optional()),
});
",
                    "name": "WorkspaceStarterFilesResponse.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const WorkspaceStarterFilesResponseV2: core.serialization.ObjectSchema<serializers.WorkspaceStarterFilesResponseV2.Raw, TraceApi.WorkspaceStarterFilesResponseV2>;
export declare namespace WorkspaceStarterFilesResponseV2 {
    interface Raw {
        filesByLanguage: Record<serializers.Language.Raw, serializers.v2.Files.Raw | null | undefined>;
    }
}
",
                    "name": "WorkspaceStarterFilesResponseV2.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const WorkspaceStarterFilesResponseV2 = core.serialization.object({
    filesByLanguage: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../..\\")).v2.Files).optional()),
});
",
                    "name": "WorkspaceStarterFilesResponseV2.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const WorkspaceSubmissionState: core.serialization.ObjectSchema<serializers.WorkspaceSubmissionState.Raw, TraceApi.WorkspaceSubmissionState>;
export declare namespace WorkspaceSubmissionState {
    interface Raw {
        status: serializers.WorkspaceSubmissionStatus.Raw;
    }
}
",
                    "name": "WorkspaceSubmissionState.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const WorkspaceSubmissionState = core.serialization.object({
    status: core.serialization.lazy(async () => (await import(\\"../../..\\")).WorkspaceSubmissionStatus),
});
",
                    "name": "WorkspaceSubmissionState.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const WorkspaceSubmissionStatus: core.serialization.Schema<serializers.WorkspaceSubmissionStatus.Raw, TraceApi.WorkspaceSubmissionStatus>;
export declare namespace WorkspaceSubmissionStatus {
    type Raw = WorkspaceSubmissionStatus.Stopped | WorkspaceSubmissionStatus.Errored | WorkspaceSubmissionStatus.Running | WorkspaceSubmissionStatus.Ran | WorkspaceSubmissionStatus.Traced;
    interface Stopped {
        type: \\"stopped\\";
    }
    interface Errored {
        type: \\"errored\\";
        value: serializers.ErrorInfo.Raw;
    }
    interface Running {
        type: \\"running\\";
        value: serializers.RunningSubmissionState.Raw;
    }
    interface Ran extends serializers.WorkspaceRunDetails.Raw {
        type: \\"ran\\";
    }
    interface Traced extends serializers.WorkspaceRunDetails.Raw {
        type: \\"traced\\";
    }
}
",
                    "name": "WorkspaceSubmissionStatus.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export const WorkspaceSubmissionStatus = core.serialization
    .union(\\"type\\", {
    stopped: core.serialization.object({}),
    errored: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).ErrorInfo),
    }),
    running: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).RunningSubmissionState),
    }),
    ran: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).WorkspaceRunDetails),
    traced: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).WorkspaceRunDetails),
})
    .transform({
    parse: (value) => {
        switch (value.type) {
            case \\"stopped\\":
                return TraceApi.WorkspaceSubmissionStatus.stopped();
            case \\"errored\\":
                return TraceApi.WorkspaceSubmissionStatus.errored(value.value);
            case \\"running\\":
                return TraceApi.WorkspaceSubmissionStatus.running(value.value);
            case \\"ran\\":
                return TraceApi.WorkspaceSubmissionStatus.ran(value);
            case \\"traced\\":
                return TraceApi.WorkspaceSubmissionStatus.traced(value);
            default:
                return TraceApi.WorkspaceSubmissionStatus._unknown(value);
        }
    },
    json: (value) => value,
});
",
                    "name": "WorkspaceSubmissionStatus.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const WorkspaceSubmissionStatusV2: core.serialization.ObjectSchema<serializers.WorkspaceSubmissionStatusV2.Raw, TraceApi.WorkspaceSubmissionStatusV2>;
export declare namespace WorkspaceSubmissionStatusV2 {
    interface Raw {
        updates: serializers.WorkspaceSubmissionUpdate.Raw[];
    }
}
",
                    "name": "WorkspaceSubmissionStatusV2.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const WorkspaceSubmissionStatusV2 = core.serialization.object({
    updates: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).WorkspaceSubmissionUpdate)),
});
",
                    "name": "WorkspaceSubmissionStatusV2.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const WorkspaceSubmissionUpdate: core.serialization.ObjectSchema<serializers.WorkspaceSubmissionUpdate.Raw, TraceApi.WorkspaceSubmissionUpdate>;
export declare namespace WorkspaceSubmissionUpdate {
    interface Raw {
        updateTime: string;
        updateInfo: serializers.WorkspaceSubmissionUpdateInfo.Raw;
    }
}
",
                    "name": "WorkspaceSubmissionUpdate.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const WorkspaceSubmissionUpdate = core.serialization.object({
    updateTime: core.serialization.date(),
    updateInfo: core.serialization.lazy(async () => (await import(\\"../../..\\")).WorkspaceSubmissionUpdateInfo),
});
",
                    "name": "WorkspaceSubmissionUpdate.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const WorkspaceSubmissionUpdateInfo: core.serialization.Schema<serializers.WorkspaceSubmissionUpdateInfo.Raw, TraceApi.WorkspaceSubmissionUpdateInfo>;
export declare namespace WorkspaceSubmissionUpdateInfo {
    type Raw = WorkspaceSubmissionUpdateInfo.Running | WorkspaceSubmissionUpdateInfo.Ran | WorkspaceSubmissionUpdateInfo.Stopped | WorkspaceSubmissionUpdateInfo.Traced | WorkspaceSubmissionUpdateInfo.TracedV2 | WorkspaceSubmissionUpdateInfo.Errored | WorkspaceSubmissionUpdateInfo.Finished;
    interface Running {
        type: \\"running\\";
        value: serializers.RunningSubmissionState.Raw;
    }
    interface Ran extends serializers.WorkspaceRunDetails.Raw {
        type: \\"ran\\";
    }
    interface Stopped {
        type: \\"stopped\\";
    }
    interface Traced {
        type: \\"traced\\";
    }
    interface TracedV2 extends serializers.WorkspaceTracedUpdate.Raw {
        type: \\"tracedV2\\";
    }
    interface Errored {
        type: \\"errored\\";
        value: serializers.ErrorInfo.Raw;
    }
    interface Finished {
        type: \\"finished\\";
    }
}
",
                    "name": "WorkspaceSubmissionUpdateInfo.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export const WorkspaceSubmissionUpdateInfo = core.serialization
    .union(\\"type\\", {
    running: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).RunningSubmissionState),
    }),
    ran: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).WorkspaceRunDetails),
    stopped: core.serialization.object({}),
    traced: core.serialization.object({}),
    tracedV2: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).WorkspaceTracedUpdate),
    errored: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).ErrorInfo),
    }),
    finished: core.serialization.object({}),
})
    .transform({
    parse: (value) => {
        switch (value.type) {
            case \\"running\\":
                return TraceApi.WorkspaceSubmissionUpdateInfo.running(value.value);
            case \\"ran\\":
                return TraceApi.WorkspaceSubmissionUpdateInfo.ran(value);
            case \\"stopped\\":
                return TraceApi.WorkspaceSubmissionUpdateInfo.stopped();
            case \\"traced\\":
                return TraceApi.WorkspaceSubmissionUpdateInfo.traced();
            case \\"tracedV2\\":
                return TraceApi.WorkspaceSubmissionUpdateInfo.tracedV2(value);
            case \\"errored\\":
                return TraceApi.WorkspaceSubmissionUpdateInfo.errored(value.value);
            case \\"finished\\":
                return TraceApi.WorkspaceSubmissionUpdateInfo.finished();
            default:
                return TraceApi.WorkspaceSubmissionUpdateInfo._unknown(value);
        }
    },
    json: (value) => value,
});
",
                    "name": "WorkspaceSubmissionUpdateInfo.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const WorkspaceSubmitRequest: core.serialization.ObjectSchema<serializers.WorkspaceSubmitRequest.Raw, TraceApi.WorkspaceSubmitRequest>;
export declare namespace WorkspaceSubmitRequest {
    interface Raw {
        submissionId: serializers.SubmissionId.Raw;
        language: serializers.Language.Raw;
        submissionFiles: serializers.SubmissionFileInfo.Raw[];
        userId?: string | null;
    }
}
",
                    "name": "WorkspaceSubmitRequest.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const WorkspaceSubmitRequest = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId),
    language: core.serialization.lazy(async () => (await import(\\"../../..\\")).Language),
    submissionFiles: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).SubmissionFileInfo)),
    userId: core.serialization.string().optional(),
});
",
                    "name": "WorkspaceSubmitRequest.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const WorkspaceTracedUpdate: core.serialization.ObjectSchema<serializers.WorkspaceTracedUpdate.Raw, TraceApi.WorkspaceTracedUpdate>;
export declare namespace WorkspaceTracedUpdate {
    interface Raw {
        traceResponsesSize: number;
    }
}
",
                    "name": "WorkspaceTracedUpdate.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const WorkspaceTracedUpdate = core.serialization.object({
    traceResponsesSize: core.serialization.number(),
});
",
                    "name": "WorkspaceTracedUpdate.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./SubmissionId\\";
export * from \\"./ShareId\\";
export * from \\"./SubmissionRequest\\";
export * from \\"./InitializeProblemRequest\\";
export * from \\"./SubmitRequestV2\\";
export * from \\"./WorkspaceSubmitRequest\\";
export * from \\"./SubmissionFileInfo\\";
export * from \\"./SubmissionTypeEnum\\";
export * from \\"./StopRequest\\";
export * from \\"./SubmissionResponse\\";
export * from \\"./CodeExecutionUpdate\\";
export * from \\"./BuildingExecutorResponse\\";
export * from \\"./RunningResponse\\";
export * from \\"./RunningSubmissionState\\";
export * from \\"./ErroredResponse\\";
export * from \\"./ErrorInfo\\";
export * from \\"./CompileError\\";
export * from \\"./RuntimeError\\";
export * from \\"./InternalError\\";
export * from \\"./StoppedResponse\\";
export * from \\"./WorkspaceRanResponse\\";
export * from \\"./WorkspaceRunDetails\\";
export * from \\"./GradedResponse\\";
export * from \\"./GradedResponseV2\\";
export * from \\"./TestCaseGrade\\";
export * from \\"./TestCaseHiddenGrade\\";
export * from \\"./TestCaseNonHiddenGrade\\";
export * from \\"./RecordedResponseNotification\\";
export * from \\"./RecordingResponseNotification\\";
export * from \\"./LightweightStackframeInformation\\";
export * from \\"./TestCaseResultWithStdout\\";
export * from \\"./TestCaseResult\\";
export * from \\"./ActualResult\\";
export * from \\"./ExceptionV2\\";
export * from \\"./ExceptionInfo\\";
export * from \\"./InvalidRequestResponse\\";
export * from \\"./InvalidRequestCause\\";
export * from \\"./ExistingSubmissionExecuting\\";
export * from \\"./SubmissionIdNotFound\\";
export * from \\"./CustomTestCasesUnsupported\\";
export * from \\"./UnexpectedLanguageError\\";
export * from \\"./TerminatedResponse\\";
export * from \\"./FinishedResponse\\";
export * from \\"./StdoutResponse\\";
export * from \\"./StderrResponse\\";
export * from \\"./TraceResponse\\";
export * from \\"./TraceResponseV2\\";
export * from \\"./TracedFile\\";
export * from \\"./ExpressionLocation\\";
export * from \\"./StackInformation\\";
export * from \\"./StackFrame\\";
export * from \\"./Scope\\";
export * from \\"./ExecutionSessionResponse\\";
export * from \\"./ExecutionSessionStatus\\";
export * from \\"./SubmissionStatusV2\\";
export * from \\"./TestSubmissionStatusV2\\";
export * from \\"./WorkspaceSubmissionStatusV2\\";
export * from \\"./TestSubmissionUpdate\\";
export * from \\"./TestSubmissionUpdateInfo\\";
export * from \\"./WorkspaceSubmissionUpdate\\";
export * from \\"./WorkspaceSubmissionUpdateInfo\\";
export * from \\"./GradedTestCaseUpdate\\";
export * from \\"./RecordedTestCaseUpdate\\";
export * from \\"./WorkspaceTracedUpdate\\";
export * from \\"./SubmissionTypeState\\";
export * from \\"./WorkspaceSubmissionState\\";
export * from \\"./WorkspaceSubmissionStatus\\";
export * from \\"./TestSubmissionState\\";
export * from \\"./TestSubmissionStatus\\";
export * from \\"./SubmissionStatusForTestCase\\";
export * from \\"./TracedTestCase\\";
export * from \\"./TraceResponsesPage\\";
export * from \\"./TraceResponsesPageV2\\";
export * from \\"./GetTraceResponsesPageRequest\\";
export * from \\"./WorkspaceStarterFilesResponse\\";
export * from \\"./WorkspaceStarterFilesResponseV2\\";
export * from \\"./WorkspaceFiles\\";
export * from \\"./ExecutionSessionState\\";
export * from \\"./GetExecutionSessionStateResponse\\";
export * from \\"./GetSubmissionStateResponse\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./SubmissionId\\";
export * from \\"./ShareId\\";
export * from \\"./SubmissionRequest\\";
export * from \\"./InitializeProblemRequest\\";
export * from \\"./SubmitRequestV2\\";
export * from \\"./WorkspaceSubmitRequest\\";
export * from \\"./SubmissionFileInfo\\";
export * from \\"./SubmissionTypeEnum\\";
export * from \\"./StopRequest\\";
export * from \\"./SubmissionResponse\\";
export * from \\"./CodeExecutionUpdate\\";
export * from \\"./BuildingExecutorResponse\\";
export * from \\"./RunningResponse\\";
export * from \\"./RunningSubmissionState\\";
export * from \\"./ErroredResponse\\";
export * from \\"./ErrorInfo\\";
export * from \\"./CompileError\\";
export * from \\"./RuntimeError\\";
export * from \\"./InternalError\\";
export * from \\"./StoppedResponse\\";
export * from \\"./WorkspaceRanResponse\\";
export * from \\"./WorkspaceRunDetails\\";
export * from \\"./GradedResponse\\";
export * from \\"./GradedResponseV2\\";
export * from \\"./TestCaseGrade\\";
export * from \\"./TestCaseHiddenGrade\\";
export * from \\"./TestCaseNonHiddenGrade\\";
export * from \\"./RecordedResponseNotification\\";
export * from \\"./RecordingResponseNotification\\";
export * from \\"./LightweightStackframeInformation\\";
export * from \\"./TestCaseResultWithStdout\\";
export * from \\"./TestCaseResult\\";
export * from \\"./ActualResult\\";
export * from \\"./ExceptionV2\\";
export * from \\"./ExceptionInfo\\";
export * from \\"./InvalidRequestResponse\\";
export * from \\"./InvalidRequestCause\\";
export * from \\"./ExistingSubmissionExecuting\\";
export * from \\"./SubmissionIdNotFound\\";
export * from \\"./CustomTestCasesUnsupported\\";
export * from \\"./UnexpectedLanguageError\\";
export * from \\"./TerminatedResponse\\";
export * from \\"./FinishedResponse\\";
export * from \\"./StdoutResponse\\";
export * from \\"./StderrResponse\\";
export * from \\"./TraceResponse\\";
export * from \\"./TraceResponseV2\\";
export * from \\"./TracedFile\\";
export * from \\"./ExpressionLocation\\";
export * from \\"./StackInformation\\";
export * from \\"./StackFrame\\";
export * from \\"./Scope\\";
export * from \\"./ExecutionSessionResponse\\";
export * from \\"./ExecutionSessionStatus\\";
export * from \\"./SubmissionStatusV2\\";
export * from \\"./TestSubmissionStatusV2\\";
export * from \\"./WorkspaceSubmissionStatusV2\\";
export * from \\"./TestSubmissionUpdate\\";
export * from \\"./TestSubmissionUpdateInfo\\";
export * from \\"./WorkspaceSubmissionUpdate\\";
export * from \\"./WorkspaceSubmissionUpdateInfo\\";
export * from \\"./GradedTestCaseUpdate\\";
export * from \\"./RecordedTestCaseUpdate\\";
export * from \\"./WorkspaceTracedUpdate\\";
export * from \\"./SubmissionTypeState\\";
export * from \\"./WorkspaceSubmissionState\\";
export * from \\"./WorkspaceSubmissionStatus\\";
export * from \\"./TestSubmissionState\\";
export * from \\"./TestSubmissionStatus\\";
export * from \\"./SubmissionStatusForTestCase\\";
export * from \\"./TracedTestCase\\";
export * from \\"./TraceResponsesPage\\";
export * from \\"./TraceResponsesPageV2\\";
export * from \\"./GetTraceResponsesPageRequest\\";
export * from \\"./WorkspaceStarterFilesResponse\\";
export * from \\"./WorkspaceStarterFilesResponseV2\\";
export * from \\"./WorkspaceFiles\\";
export * from \\"./ExecutionSessionState\\";
export * from \\"./GetExecutionSessionStateResponse\\";
export * from \\"./GetSubmissionStateResponse\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "submission",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./service\\";
",
                "name": "index.d.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./service\\";
",
                "name": "index.js",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";
export declare const Response: core.serialization.Schema<serializers.sysprop.getNumWarmInstances.Response.Raw, Record<TraceApi.Language, number | undefined>>;
export declare namespace Response {
    type Raw = Record<serializers.Language.Raw, number | null | undefined>;
}
",
                    "name": "getNumWarmInstances.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
export const Response = core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../..\\")).Language), core.serialization.number().optional());
",
                    "name": "getNumWarmInstances.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * as getNumWarmInstances from \\"./getNumWarmInstances\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * as getNumWarmInstances from \\"./getNumWarmInstances\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                ],
                "name": "service",
                "type": "directory",
              },
            ],
            "name": "sysprop",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./resources\\";
",
                "name": "index.d.ts",
                "type": "file",
              },
              Object {
                "contents": "export * from \\"./resources\\";
",
                "name": "index.js",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export * as problem from \\"./problem\\";
export * from \\"./problem/types\\";
export * as v3 from \\"./v3\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * as problem from \\"./problem\\";
export * from \\"./problem/types\\";
export * as v3 from \\"./v3\\";
",
                    "name": "index.js",
                    "type": "file",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export * from \\"./types\\";
export * from \\"./service\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export * from \\"./types\\";
export * from \\"./service\\";
",
                        "name": "index.js",
                        "type": "file",
                      },
                      Object {
                        "contents": Array [
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const Response: core.serialization.Schema<serializers.v2.problem.getLightweightProblems.Response.Raw, TraceApi.v2.LightweightProblemInfoV2[]>;
export declare namespace Response {
    type Raw = serializers.v2.LightweightProblemInfoV2.Raw[];
}
",
                            "name": "getLightweightProblems.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const Response = core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.LightweightProblemInfoV2));
",
                            "name": "getLightweightProblems.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const Response: core.serialization.Schema<serializers.v2.problem.getProblems.Response.Raw, TraceApi.v2.ProblemInfoV2[]>;
export declare namespace Response {
    type Raw = serializers.v2.ProblemInfoV2.Raw[];
}
",
                            "name": "getProblems.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const Response = core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.ProblemInfoV2));
",
                            "name": "getProblems.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "export * as getLightweightProblems from \\"./getLightweightProblems\\";
export * as getProblems from \\"./getProblems\\";
",
                            "name": "index.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "export * as getLightweightProblems from \\"./getLightweightProblems\\";
export * as getProblems from \\"./getProblems\\";
",
                            "name": "index.js",
                            "type": "file",
                          },
                        ],
                        "name": "service",
                        "type": "directory",
                      },
                      Object {
                        "contents": Array [
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const AssertCorrectnessCheck: core.serialization.Schema<serializers.v2.AssertCorrectnessCheck.Raw, TraceApi.v2.AssertCorrectnessCheck>;
export declare namespace AssertCorrectnessCheck {
    type Raw = AssertCorrectnessCheck.DeepEquality | AssertCorrectnessCheck.Custom;
    interface DeepEquality extends serializers.v2.DeepEqualityCorrectnessCheck.Raw {
        type: \\"deepEquality\\";
    }
    interface Custom extends serializers.v2.VoidFunctionDefinitionThatTakesActualResult.Raw {
        type: \\"custom\\";
    }
}
",
                            "name": "AssertCorrectnessCheck.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export const AssertCorrectnessCheck = core.serialization
    .union(\\"type\\", {
    deepEquality: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.DeepEqualityCorrectnessCheck),
    custom: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.VoidFunctionDefinitionThatTakesActualResult),
})
    .transform({
    parse: (value) => {
        switch (value.type) {
            case \\"deepEquality\\":
                return TraceApi.v2.AssertCorrectnessCheck.deepEquality(value);
            case \\"custom\\":
                return TraceApi.v2.AssertCorrectnessCheck.custom(value);
            default:
                return TraceApi.v2.AssertCorrectnessCheck._unknown(value);
        }
    },
    json: (value) => value,
});
",
                            "name": "AssertCorrectnessCheck.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const BasicCustomFiles: core.serialization.ObjectSchema<serializers.v2.BasicCustomFiles.Raw, TraceApi.v2.BasicCustomFiles>;
export declare namespace BasicCustomFiles {
    interface Raw {
        methodName: string;
        signature: serializers.v2.NonVoidFunctionSignature.Raw;
        additionalFiles: Record<serializers.Language.Raw, serializers.v2.Files.Raw | null | undefined>;
        basicTestCaseTemplate: serializers.v2.BasicTestCaseTemplate.Raw;
    }
}
",
                            "name": "BasicCustomFiles.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const BasicCustomFiles = core.serialization.object({
    methodName: core.serialization.string(),
    signature: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.NonVoidFunctionSignature),
    additionalFiles: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.Files).optional()),
    basicTestCaseTemplate: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.BasicTestCaseTemplate),
});
",
                            "name": "BasicCustomFiles.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const BasicTestCaseTemplate: core.serialization.ObjectSchema<serializers.v2.BasicTestCaseTemplate.Raw, TraceApi.v2.BasicTestCaseTemplate>;
export declare namespace BasicTestCaseTemplate {
    interface Raw {
        templateId: serializers.v2.TestCaseTemplateId.Raw;
        name: string;
        description: serializers.v2.TestCaseImplementationDescription.Raw;
        expectedValueParameterId: serializers.v2.ParameterId.Raw;
    }
}
",
                            "name": "BasicTestCaseTemplate.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const BasicTestCaseTemplate = core.serialization.object({
    templateId: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).v2.TestCaseTemplateId),
    name: core.serialization.string(),
    description: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.TestCaseImplementationDescription),
    expectedValueParameterId: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).v2.ParameterId),
});
",
                            "name": "BasicTestCaseTemplate.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const CreateProblemRequestV2: core.serialization.ObjectSchema<serializers.v2.CreateProblemRequestV2.Raw, TraceApi.v2.CreateProblemRequestV2>;
export declare namespace CreateProblemRequestV2 {
    interface Raw {
        problemName: string;
        problemDescription: serializers.ProblemDescription.Raw;
        customFiles: serializers.v2.CustomFiles.Raw;
        customTestCaseTemplates: serializers.v2.TestCaseTemplate.Raw[];
        testcases: serializers.v2.TestCaseV2.Raw[];
        supportedLanguages: serializers.Language.Raw[];
        isPublic: boolean;
    }
}
",
                            "name": "CreateProblemRequestV2.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const CreateProblemRequestV2 = core.serialization.object({
    problemName: core.serialization.string(),
    problemDescription: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).ProblemDescription),
    customFiles: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).v2.CustomFiles),
    customTestCaseTemplates: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.TestCaseTemplate)),
    testcases: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.TestCaseV2)),
    supportedLanguages: core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../../../..\\")).Language)),
    isPublic: core.serialization.boolean(),
});
",
                            "name": "CreateProblemRequestV2.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const CustomFiles: core.serialization.Schema<serializers.v2.CustomFiles.Raw, TraceApi.v2.CustomFiles>;
export declare namespace CustomFiles {
    type Raw = CustomFiles.Basic | CustomFiles.Custom;
    interface Basic extends serializers.v2.BasicCustomFiles.Raw {
        type: \\"basic\\";
    }
    interface Custom {
        type: \\"custom\\";
        value: Record<serializers.Language.Raw, serializers.v2.Files.Raw | null | undefined>;
    }
}
",
                            "name": "CustomFiles.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export const CustomFiles = core.serialization
    .union(\\"type\\", {
    basic: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.BasicCustomFiles),
    custom: core.serialization.object({
        value: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.Files).optional()),
    }),
})
    .transform({
    parse: (value) => {
        switch (value.type) {
            case \\"basic\\":
                return TraceApi.v2.CustomFiles.basic(value);
            case \\"custom\\":
                return TraceApi.v2.CustomFiles.custom(value.value);
            default:
                return TraceApi.v2.CustomFiles._unknown(value);
        }
    },
    json: (value) => value,
});
",
                            "name": "CustomFiles.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const DeepEqualityCorrectnessCheck: core.serialization.ObjectSchema<serializers.v2.DeepEqualityCorrectnessCheck.Raw, TraceApi.v2.DeepEqualityCorrectnessCheck>;
export declare namespace DeepEqualityCorrectnessCheck {
    interface Raw {
        expectedValueParameterId: serializers.v2.ParameterId.Raw;
    }
}
",
                            "name": "DeepEqualityCorrectnessCheck.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const DeepEqualityCorrectnessCheck = core.serialization.object({
    expectedValueParameterId: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).v2.ParameterId),
});
",
                            "name": "DeepEqualityCorrectnessCheck.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const DefaultProvidedFile: core.serialization.ObjectSchema<serializers.v2.DefaultProvidedFile.Raw, TraceApi.v2.DefaultProvidedFile>;
export declare namespace DefaultProvidedFile {
    interface Raw {
        file: serializers.v2.FileInfoV2.Raw;
        relatedTypes: serializers.VariableType.Raw[];
    }
}
",
                            "name": "DefaultProvidedFile.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const DefaultProvidedFile = core.serialization.object({
    file: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.FileInfoV2),
    relatedTypes: core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../../../..\\")).VariableType)),
});
",
                            "name": "DefaultProvidedFile.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const FileInfoV2: core.serialization.ObjectSchema<serializers.v2.FileInfoV2.Raw, TraceApi.v2.FileInfoV2>;
export declare namespace FileInfoV2 {
    interface Raw {
        filename: string;
        directory: string;
        contents: string;
        editable: boolean;
    }
}
",
                            "name": "FileInfoV2.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const FileInfoV2 = core.serialization.object({
    filename: core.serialization.string(),
    directory: core.serialization.string(),
    contents: core.serialization.string(),
    editable: core.serialization.boolean(),
});
",
                            "name": "FileInfoV2.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const Files: core.serialization.ObjectSchema<serializers.v2.Files.Raw, TraceApi.v2.Files>;
export declare namespace Files {
    interface Raw {
        files: serializers.v2.FileInfoV2.Raw[];
    }
}
",
                            "name": "Files.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const Files = core.serialization.object({
    files: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.FileInfoV2)),
});
",
                            "name": "Files.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const FunctionImplementation: core.serialization.ObjectSchema<serializers.v2.FunctionImplementation.Raw, TraceApi.v2.FunctionImplementation>;
export declare namespace FunctionImplementation {
    interface Raw {
        impl: string;
        imports?: string | null;
    }
}
",
                            "name": "FunctionImplementation.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const FunctionImplementation = core.serialization.object({
    impl: core.serialization.string(),
    imports: core.serialization.string().optional(),
});
",
                            "name": "FunctionImplementation.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const FunctionImplementationForMultipleLanguages: core.serialization.ObjectSchema<serializers.v2.FunctionImplementationForMultipleLanguages.Raw, TraceApi.v2.FunctionImplementationForMultipleLanguages>;
export declare namespace FunctionImplementationForMultipleLanguages {
    interface Raw {
        codeByLanguage: Record<serializers.Language.Raw, serializers.v2.FunctionImplementation.Raw | null | undefined>;
    }
}
",
                            "name": "FunctionImplementationForMultipleLanguages.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const FunctionImplementationForMultipleLanguages = core.serialization.object({
    codeByLanguage: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.FunctionImplementation).optional()),
});
",
                            "name": "FunctionImplementationForMultipleLanguages.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const FunctionSignature: core.serialization.Schema<serializers.v2.FunctionSignature.Raw, TraceApi.v2.FunctionSignature>;
export declare namespace FunctionSignature {
    type Raw = FunctionSignature.Void | FunctionSignature.NonVoid | FunctionSignature.VoidThatTakesActualResult;
    interface Void extends serializers.v2.VoidFunctionSignature.Raw {
        type: \\"void\\";
    }
    interface NonVoid extends serializers.v2.NonVoidFunctionSignature.Raw {
        type: \\"nonVoid\\";
    }
    interface VoidThatTakesActualResult extends serializers.v2.VoidFunctionSignatureThatTakesActualResult.Raw {
        type: \\"voidThatTakesActualResult\\";
    }
}
",
                            "name": "FunctionSignature.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export const FunctionSignature = core.serialization
    .union(\\"type\\", {
    void: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.VoidFunctionSignature),
    nonVoid: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.NonVoidFunctionSignature),
    voidThatTakesActualResult: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.VoidFunctionSignatureThatTakesActualResult),
})
    .transform({
    parse: (value) => {
        switch (value.type) {
            case \\"void\\":
                return TraceApi.v2.FunctionSignature.void(value);
            case \\"nonVoid\\":
                return TraceApi.v2.FunctionSignature.nonVoid(value);
            case \\"voidThatTakesActualResult\\":
                return TraceApi.v2.FunctionSignature.voidThatTakesActualResult(value);
            default:
                return TraceApi.v2.FunctionSignature._unknown(value);
        }
    },
    json: (value) => value,
});
",
                            "name": "FunctionSignature.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const GeneratedFiles: core.serialization.ObjectSchema<serializers.v2.GeneratedFiles.Raw, TraceApi.v2.GeneratedFiles>;
export declare namespace GeneratedFiles {
    interface Raw {
        generatedTestCaseFiles: Record<serializers.Language.Raw, serializers.v2.Files.Raw | null | undefined>;
        generatedTemplateFiles: Record<serializers.Language.Raw, serializers.v2.Files.Raw | null | undefined>;
        other: Record<serializers.Language.Raw, serializers.v2.Files.Raw | null | undefined>;
    }
}
",
                            "name": "GeneratedFiles.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const GeneratedFiles = core.serialization.object({
    generatedTestCaseFiles: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.Files).optional()),
    generatedTemplateFiles: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.Files).optional()),
    other: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.Files).optional()),
});
",
                            "name": "GeneratedFiles.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const GetBasicSolutionFileRequest: core.serialization.ObjectSchema<serializers.v2.GetBasicSolutionFileRequest.Raw, TraceApi.v2.GetBasicSolutionFileRequest>;
export declare namespace GetBasicSolutionFileRequest {
    interface Raw {
        methodName: string;
        signature: serializers.v2.NonVoidFunctionSignature.Raw;
    }
}
",
                            "name": "GetBasicSolutionFileRequest.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const GetBasicSolutionFileRequest = core.serialization.object({
    methodName: core.serialization.string(),
    signature: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.NonVoidFunctionSignature),
});
",
                            "name": "GetBasicSolutionFileRequest.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const GetBasicSolutionFileResponse: core.serialization.ObjectSchema<serializers.v2.GetBasicSolutionFileResponse.Raw, TraceApi.v2.GetBasicSolutionFileResponse>;
export declare namespace GetBasicSolutionFileResponse {
    interface Raw {
        solutionFileByLanguage: Record<serializers.Language.Raw, serializers.v2.FileInfoV2.Raw | null | undefined>;
    }
}
",
                            "name": "GetBasicSolutionFileResponse.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const GetBasicSolutionFileResponse = core.serialization.object({
    solutionFileByLanguage: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.FileInfoV2).optional()),
});
",
                            "name": "GetBasicSolutionFileResponse.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const GetFunctionSignatureRequest: core.serialization.ObjectSchema<serializers.v2.GetFunctionSignatureRequest.Raw, TraceApi.v2.GetFunctionSignatureRequest>;
export declare namespace GetFunctionSignatureRequest {
    interface Raw {
        functionSignature: serializers.v2.FunctionSignature.Raw;
    }
}
",
                            "name": "GetFunctionSignatureRequest.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const GetFunctionSignatureRequest = core.serialization.object({
    functionSignature: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).v2.FunctionSignature),
});
",
                            "name": "GetFunctionSignatureRequest.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const GetFunctionSignatureResponse: core.serialization.ObjectSchema<serializers.v2.GetFunctionSignatureResponse.Raw, TraceApi.v2.GetFunctionSignatureResponse>;
export declare namespace GetFunctionSignatureResponse {
    interface Raw {
        functionByLanguage: Record<serializers.Language.Raw, string | null | undefined>;
    }
}
",
                            "name": "GetFunctionSignatureResponse.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const GetFunctionSignatureResponse = core.serialization.object({
    functionByLanguage: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../..\\")).Language), core.serialization.string().optional()),
});
",
                            "name": "GetFunctionSignatureResponse.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const GetGeneratedTestCaseFileRequest: core.serialization.ObjectSchema<serializers.v2.GetGeneratedTestCaseFileRequest.Raw, TraceApi.v2.GetGeneratedTestCaseFileRequest>;
export declare namespace GetGeneratedTestCaseFileRequest {
    interface Raw {
        template?: serializers.v2.TestCaseTemplate.Raw | null;
        testCase: serializers.v2.TestCaseV2.Raw;
    }
}
",
                            "name": "GetGeneratedTestCaseFileRequest.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const GetGeneratedTestCaseFileRequest = core.serialization.object({
    template: core.serialization
        .lazyObject(async () => (await import(\\"../../../../..\\")).v2.TestCaseTemplate)
        .optional(),
    testCase: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.TestCaseV2),
});
",
                            "name": "GetGeneratedTestCaseFileRequest.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const GetGeneratedTestCaseTemplateFileRequest: core.serialization.ObjectSchema<serializers.v2.GetGeneratedTestCaseTemplateFileRequest.Raw, TraceApi.v2.GetGeneratedTestCaseTemplateFileRequest>;
export declare namespace GetGeneratedTestCaseTemplateFileRequest {
    interface Raw {
        template: serializers.v2.TestCaseTemplate.Raw;
    }
}
",
                            "name": "GetGeneratedTestCaseTemplateFileRequest.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const GetGeneratedTestCaseTemplateFileRequest = core.serialization.object({
    template: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.TestCaseTemplate),
});
",
                            "name": "GetGeneratedTestCaseTemplateFileRequest.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const LightweightProblemInfoV2: core.serialization.ObjectSchema<serializers.v2.LightweightProblemInfoV2.Raw, TraceApi.v2.LightweightProblemInfoV2>;
export declare namespace LightweightProblemInfoV2 {
    interface Raw {
        problemId: serializers.ProblemId.Raw;
        problemName: string;
        problemVersion: number;
        variableTypes: serializers.VariableType.Raw[];
    }
}
",
                            "name": "LightweightProblemInfoV2.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const LightweightProblemInfoV2 = core.serialization.object({
    problemId: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).ProblemId),
    problemName: core.serialization.string(),
    problemVersion: core.serialization.number(),
    variableTypes: core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../../../..\\")).VariableType)),
});
",
                            "name": "LightweightProblemInfoV2.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const NonVoidFunctionDefinition: core.serialization.ObjectSchema<serializers.v2.NonVoidFunctionDefinition.Raw, TraceApi.v2.NonVoidFunctionDefinition>;
export declare namespace NonVoidFunctionDefinition {
    interface Raw {
        signature: serializers.v2.NonVoidFunctionSignature.Raw;
        code: serializers.v2.FunctionImplementationForMultipleLanguages.Raw;
    }
}
",
                            "name": "NonVoidFunctionDefinition.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const NonVoidFunctionDefinition = core.serialization.object({
    signature: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.NonVoidFunctionSignature),
    code: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.FunctionImplementationForMultipleLanguages),
});
",
                            "name": "NonVoidFunctionDefinition.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const NonVoidFunctionSignature: core.serialization.ObjectSchema<serializers.v2.NonVoidFunctionSignature.Raw, TraceApi.v2.NonVoidFunctionSignature>;
export declare namespace NonVoidFunctionSignature {
    interface Raw {
        parameters: serializers.v2.Parameter.Raw[];
        returnType: serializers.VariableType.Raw;
    }
}
",
                            "name": "NonVoidFunctionSignature.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const NonVoidFunctionSignature = core.serialization.object({
    parameters: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.Parameter)),
    returnType: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).VariableType),
});
",
                            "name": "NonVoidFunctionSignature.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const Parameter: core.serialization.ObjectSchema<serializers.v2.Parameter.Raw, TraceApi.v2.Parameter>;
export declare namespace Parameter {
    interface Raw {
        parameterId: serializers.v2.ParameterId.Raw;
        name: string;
        variableType: serializers.VariableType.Raw;
    }
}
",
                            "name": "Parameter.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const Parameter = core.serialization.object({
    parameterId: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).v2.ParameterId),
    name: core.serialization.string(),
    variableType: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).VariableType),
});
",
                            "name": "Parameter.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const ParameterId: core.serialization.Schema<serializers.v2.ParameterId.Raw, TraceApi.v2.ParameterId>;
export declare namespace ParameterId {
    type Raw = string;
}
",
                            "name": "ParameterId.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const ParameterId = core.serialization.string();
",
                            "name": "ParameterId.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const ProblemInfoV2: core.serialization.ObjectSchema<serializers.v2.ProblemInfoV2.Raw, TraceApi.v2.ProblemInfoV2>;
export declare namespace ProblemInfoV2 {
    interface Raw {
        problemId: serializers.ProblemId.Raw;
        problemDescription: serializers.ProblemDescription.Raw;
        problemName: string;
        problemVersion: number;
        supportedLanguages: serializers.Language.Raw[];
        customFiles: serializers.v2.CustomFiles.Raw;
        generatedFiles: serializers.v2.GeneratedFiles.Raw;
        customTestCaseTemplates: serializers.v2.TestCaseTemplate.Raw[];
        testcases: serializers.v2.TestCaseV2.Raw[];
        isPublic: boolean;
    }
}
",
                            "name": "ProblemInfoV2.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const ProblemInfoV2 = core.serialization.object({
    problemId: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).ProblemId),
    problemDescription: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).ProblemDescription),
    problemName: core.serialization.string(),
    problemVersion: core.serialization.number(),
    supportedLanguages: core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../../../..\\")).Language)),
    customFiles: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).v2.CustomFiles),
    generatedFiles: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.GeneratedFiles),
    customTestCaseTemplates: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.TestCaseTemplate)),
    testcases: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.TestCaseV2)),
    isPublic: core.serialization.boolean(),
});
",
                            "name": "ProblemInfoV2.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const TestCaseExpects: core.serialization.ObjectSchema<serializers.v2.TestCaseExpects.Raw, TraceApi.v2.TestCaseExpects>;
export declare namespace TestCaseExpects {
    interface Raw {
        expectedStdout?: string | null;
    }
}
",
                            "name": "TestCaseExpects.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const TestCaseExpects = core.serialization.object({
    expectedStdout: core.serialization.string().optional(),
});
",
                            "name": "TestCaseExpects.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const TestCaseFunction: core.serialization.Schema<serializers.v2.TestCaseFunction.Raw, TraceApi.v2.TestCaseFunction>;
export declare namespace TestCaseFunction {
    type Raw = TestCaseFunction.WithActualResult | TestCaseFunction.Custom;
    interface WithActualResult extends serializers.v2.TestCaseWithActualResultImplementation.Raw {
        type: \\"withActualResult\\";
    }
    interface Custom extends serializers.v2.VoidFunctionDefinition.Raw {
        type: \\"custom\\";
    }
}
",
                            "name": "TestCaseFunction.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export const TestCaseFunction = core.serialization
    .union(\\"type\\", {
    withActualResult: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.TestCaseWithActualResultImplementation),
    custom: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.VoidFunctionDefinition),
})
    .transform({
    parse: (value) => {
        switch (value.type) {
            case \\"withActualResult\\":
                return TraceApi.v2.TestCaseFunction.withActualResult(value);
            case \\"custom\\":
                return TraceApi.v2.TestCaseFunction.custom(value);
            default:
                return TraceApi.v2.TestCaseFunction._unknown(value);
        }
    },
    json: (value) => value,
});
",
                            "name": "TestCaseFunction.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const TestCaseId: core.serialization.Schema<serializers.v2.TestCaseId.Raw, TraceApi.v2.TestCaseId>;
export declare namespace TestCaseId {
    type Raw = string;
}
",
                            "name": "TestCaseId.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const TestCaseId = core.serialization.string();
",
                            "name": "TestCaseId.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const TestCaseImplementation: core.serialization.ObjectSchema<serializers.v2.TestCaseImplementation.Raw, TraceApi.v2.TestCaseImplementation>;
export declare namespace TestCaseImplementation {
    interface Raw {
        description: serializers.v2.TestCaseImplementationDescription.Raw;
        function: serializers.v2.TestCaseFunction.Raw;
    }
}
",
                            "name": "TestCaseImplementation.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const TestCaseImplementation = core.serialization.object({
    description: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.TestCaseImplementationDescription),
    function: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).v2.TestCaseFunction),
});
",
                            "name": "TestCaseImplementation.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const TestCaseImplementationDescription: core.serialization.ObjectSchema<serializers.v2.TestCaseImplementationDescription.Raw, TraceApi.v2.TestCaseImplementationDescription>;
export declare namespace TestCaseImplementationDescription {
    interface Raw {
        boards: serializers.v2.TestCaseImplementationDescriptionBoard.Raw[];
    }
}
",
                            "name": "TestCaseImplementationDescription.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const TestCaseImplementationDescription = core.serialization.object({
    boards: core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../../../..\\")).v2.TestCaseImplementationDescriptionBoard)),
});
",
                            "name": "TestCaseImplementationDescription.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const TestCaseImplementationDescriptionBoard: core.serialization.Schema<serializers.v2.TestCaseImplementationDescriptionBoard.Raw, TraceApi.v2.TestCaseImplementationDescriptionBoard>;
export declare namespace TestCaseImplementationDescriptionBoard {
    type Raw = TestCaseImplementationDescriptionBoard.Html | TestCaseImplementationDescriptionBoard.ParamId;
    interface Html {
        type: \\"html\\";
        value: string;
    }
    interface ParamId {
        type: \\"paramId\\";
        value: serializers.v2.ParameterId.Raw;
    }
}
",
                            "name": "TestCaseImplementationDescriptionBoard.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export const TestCaseImplementationDescriptionBoard = core.serialization
    .union(\\"type\\", {
    html: core.serialization.object({
        value: core.serialization.string(),
    }),
    paramId: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).v2.ParameterId),
    }),
})
    .transform({
    parse: (value) => {
        switch (value.type) {
            case \\"html\\":
                return TraceApi.v2.TestCaseImplementationDescriptionBoard.html(value.value);
            case \\"paramId\\":
                return TraceApi.v2.TestCaseImplementationDescriptionBoard.paramId(value.value);
            default:
                return TraceApi.v2.TestCaseImplementationDescriptionBoard._unknown(value);
        }
    },
    json: (value) => value,
});
",
                            "name": "TestCaseImplementationDescriptionBoard.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const TestCaseImplementationReference: core.serialization.Schema<serializers.v2.TestCaseImplementationReference.Raw, TraceApi.v2.TestCaseImplementationReference>;
export declare namespace TestCaseImplementationReference {
    type Raw = TestCaseImplementationReference.TemplateId | TestCaseImplementationReference.Implementation;
    interface TemplateId {
        type: \\"templateId\\";
        value: serializers.v2.TestCaseTemplateId.Raw;
    }
    interface Implementation extends serializers.v2.TestCaseImplementation.Raw {
        type: \\"implementation\\";
    }
}
",
                            "name": "TestCaseImplementationReference.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export const TestCaseImplementationReference = core.serialization
    .union(\\"type\\", {
    templateId: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).v2.TestCaseTemplateId),
    }),
    implementation: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.TestCaseImplementation),
})
    .transform({
    parse: (value) => {
        switch (value.type) {
            case \\"templateId\\":
                return TraceApi.v2.TestCaseImplementationReference.templateId(value.value);
            case \\"implementation\\":
                return TraceApi.v2.TestCaseImplementationReference.implementation(value);
            default:
                return TraceApi.v2.TestCaseImplementationReference._unknown(value);
        }
    },
    json: (value) => value,
});
",
                            "name": "TestCaseImplementationReference.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const TestCaseMetadata: core.serialization.ObjectSchema<serializers.v2.TestCaseMetadata.Raw, TraceApi.v2.TestCaseMetadata>;
export declare namespace TestCaseMetadata {
    interface Raw {
        id: serializers.v2.TestCaseId.Raw;
        name: string;
        hidden: boolean;
    }
}
",
                            "name": "TestCaseMetadata.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const TestCaseMetadata = core.serialization.object({
    id: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).v2.TestCaseId),
    name: core.serialization.string(),
    hidden: core.serialization.boolean(),
});
",
                            "name": "TestCaseMetadata.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const TestCaseTemplate: core.serialization.ObjectSchema<serializers.v2.TestCaseTemplate.Raw, TraceApi.v2.TestCaseTemplate>;
export declare namespace TestCaseTemplate {
    interface Raw {
        templateId: serializers.v2.TestCaseTemplateId.Raw;
        name: string;
        implementation: serializers.v2.TestCaseImplementation.Raw;
    }
}
",
                            "name": "TestCaseTemplate.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const TestCaseTemplate = core.serialization.object({
    templateId: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).v2.TestCaseTemplateId),
    name: core.serialization.string(),
    implementation: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.TestCaseImplementation),
});
",
                            "name": "TestCaseTemplate.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const TestCaseTemplateId: core.serialization.Schema<serializers.v2.TestCaseTemplateId.Raw, TraceApi.v2.TestCaseTemplateId>;
export declare namespace TestCaseTemplateId {
    type Raw = string;
}
",
                            "name": "TestCaseTemplateId.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const TestCaseTemplateId = core.serialization.string();
",
                            "name": "TestCaseTemplateId.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const TestCaseV2: core.serialization.ObjectSchema<serializers.v2.TestCaseV2.Raw, TraceApi.v2.TestCaseV2>;
export declare namespace TestCaseV2 {
    interface Raw {
        metadata: serializers.v2.TestCaseMetadata.Raw;
        implementation: serializers.v2.TestCaseImplementationReference.Raw;
        arguments: Record<serializers.v2.ParameterId.Raw, serializers.VariableValue.Raw>;
        expects?: serializers.v2.TestCaseExpects.Raw | null;
    }
}
",
                            "name": "TestCaseV2.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const TestCaseV2 = core.serialization.object({
    metadata: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.TestCaseMetadata),
    implementation: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).v2.TestCaseImplementationReference),
    arguments: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../..\\")).v2.ParameterId), core.serialization.lazy(async () => (await import(\\"../../../../..\\")).VariableValue)),
    expects: core.serialization
        .lazyObject(async () => (await import(\\"../../../../..\\")).v2.TestCaseExpects)
        .optional(),
});
",
                            "name": "TestCaseV2.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const TestCaseWithActualResultImplementation: core.serialization.ObjectSchema<serializers.v2.TestCaseWithActualResultImplementation.Raw, TraceApi.v2.TestCaseWithActualResultImplementation>;
export declare namespace TestCaseWithActualResultImplementation {
    interface Raw {
        getActualResult: serializers.v2.NonVoidFunctionDefinition.Raw;
        assertCorrectnessCheck: serializers.v2.AssertCorrectnessCheck.Raw;
    }
}
",
                            "name": "TestCaseWithActualResultImplementation.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const TestCaseWithActualResultImplementation = core.serialization.object({
    getActualResult: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.NonVoidFunctionDefinition),
    assertCorrectnessCheck: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).v2.AssertCorrectnessCheck),
});
",
                            "name": "TestCaseWithActualResultImplementation.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const VoidFunctionDefinition: core.serialization.ObjectSchema<serializers.v2.VoidFunctionDefinition.Raw, TraceApi.v2.VoidFunctionDefinition>;
export declare namespace VoidFunctionDefinition {
    interface Raw {
        parameters: serializers.v2.Parameter.Raw[];
        code: serializers.v2.FunctionImplementationForMultipleLanguages.Raw;
    }
}
",
                            "name": "VoidFunctionDefinition.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const VoidFunctionDefinition = core.serialization.object({
    parameters: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.Parameter)),
    code: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.FunctionImplementationForMultipleLanguages),
});
",
                            "name": "VoidFunctionDefinition.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const VoidFunctionDefinitionThatTakesActualResult: core.serialization.ObjectSchema<serializers.v2.VoidFunctionDefinitionThatTakesActualResult.Raw, TraceApi.v2.VoidFunctionDefinitionThatTakesActualResult>;
export declare namespace VoidFunctionDefinitionThatTakesActualResult {
    interface Raw {
        additionalParameters: serializers.v2.Parameter.Raw[];
        code: serializers.v2.FunctionImplementationForMultipleLanguages.Raw;
    }
}
",
                            "name": "VoidFunctionDefinitionThatTakesActualResult.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const VoidFunctionDefinitionThatTakesActualResult = core.serialization.object({
    additionalParameters: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.Parameter)),
    code: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.FunctionImplementationForMultipleLanguages),
});
",
                            "name": "VoidFunctionDefinitionThatTakesActualResult.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const VoidFunctionSignature: core.serialization.ObjectSchema<serializers.v2.VoidFunctionSignature.Raw, TraceApi.v2.VoidFunctionSignature>;
export declare namespace VoidFunctionSignature {
    interface Raw {
        parameters: serializers.v2.Parameter.Raw[];
    }
}
",
                            "name": "VoidFunctionSignature.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const VoidFunctionSignature = core.serialization.object({
    parameters: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.Parameter)),
});
",
                            "name": "VoidFunctionSignature.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";
export declare const VoidFunctionSignatureThatTakesActualResult: core.serialization.ObjectSchema<serializers.v2.VoidFunctionSignatureThatTakesActualResult.Raw, TraceApi.v2.VoidFunctionSignatureThatTakesActualResult>;
export declare namespace VoidFunctionSignatureThatTakesActualResult {
    interface Raw {
        parameters: serializers.v2.Parameter.Raw[];
        actualResultType: serializers.VariableType.Raw;
    }
}
",
                            "name": "VoidFunctionSignatureThatTakesActualResult.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../core\\";
export const VoidFunctionSignatureThatTakesActualResult = core.serialization.object({
    parameters: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.Parameter)),
    actualResultType: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).VariableType),
});
",
                            "name": "VoidFunctionSignatureThatTakesActualResult.js",
                            "type": "file",
                          },
                          Object {
                            "contents": "export * from \\"./TestCaseTemplateId\\";
export * from \\"./TestCaseId\\";
export * from \\"./ParameterId\\";
export * from \\"./ProblemInfoV2\\";
export * from \\"./LightweightProblemInfoV2\\";
export * from \\"./CreateProblemRequestV2\\";
export * from \\"./TestCaseV2\\";
export * from \\"./TestCaseExpects\\";
export * from \\"./TestCaseImplementationReference\\";
export * from \\"./BasicTestCaseTemplate\\";
export * from \\"./TestCaseTemplate\\";
export * from \\"./TestCaseImplementation\\";
export * from \\"./TestCaseFunction\\";
export * from \\"./TestCaseWithActualResultImplementation\\";
export * from \\"./VoidFunctionDefinition\\";
export * from \\"./Parameter\\";
export * from \\"./NonVoidFunctionDefinition\\";
export * from \\"./VoidFunctionSignature\\";
export * from \\"./NonVoidFunctionSignature\\";
export * from \\"./VoidFunctionSignatureThatTakesActualResult\\";
export * from \\"./AssertCorrectnessCheck\\";
export * from \\"./DeepEqualityCorrectnessCheck\\";
export * from \\"./VoidFunctionDefinitionThatTakesActualResult\\";
export * from \\"./TestCaseImplementationDescription\\";
export * from \\"./TestCaseImplementationDescriptionBoard\\";
export * from \\"./TestCaseMetadata\\";
export * from \\"./FunctionImplementationForMultipleLanguages\\";
export * from \\"./FunctionImplementation\\";
export * from \\"./GeneratedFiles\\";
export * from \\"./CustomFiles\\";
export * from \\"./BasicCustomFiles\\";
export * from \\"./Files\\";
export * from \\"./FileInfoV2\\";
export * from \\"./DefaultProvidedFile\\";
export * from \\"./FunctionSignature\\";
export * from \\"./GetFunctionSignatureRequest\\";
export * from \\"./GetFunctionSignatureResponse\\";
export * from \\"./GetBasicSolutionFileRequest\\";
export * from \\"./GetBasicSolutionFileResponse\\";
export * from \\"./GetGeneratedTestCaseFileRequest\\";
export * from \\"./GetGeneratedTestCaseTemplateFileRequest\\";
",
                            "name": "index.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "export * from \\"./TestCaseTemplateId\\";
export * from \\"./TestCaseId\\";
export * from \\"./ParameterId\\";
export * from \\"./ProblemInfoV2\\";
export * from \\"./LightweightProblemInfoV2\\";
export * from \\"./CreateProblemRequestV2\\";
export * from \\"./TestCaseV2\\";
export * from \\"./TestCaseExpects\\";
export * from \\"./TestCaseImplementationReference\\";
export * from \\"./BasicTestCaseTemplate\\";
export * from \\"./TestCaseTemplate\\";
export * from \\"./TestCaseImplementation\\";
export * from \\"./TestCaseFunction\\";
export * from \\"./TestCaseWithActualResultImplementation\\";
export * from \\"./VoidFunctionDefinition\\";
export * from \\"./Parameter\\";
export * from \\"./NonVoidFunctionDefinition\\";
export * from \\"./VoidFunctionSignature\\";
export * from \\"./NonVoidFunctionSignature\\";
export * from \\"./VoidFunctionSignatureThatTakesActualResult\\";
export * from \\"./AssertCorrectnessCheck\\";
export * from \\"./DeepEqualityCorrectnessCheck\\";
export * from \\"./VoidFunctionDefinitionThatTakesActualResult\\";
export * from \\"./TestCaseImplementationDescription\\";
export * from \\"./TestCaseImplementationDescriptionBoard\\";
export * from \\"./TestCaseMetadata\\";
export * from \\"./FunctionImplementationForMultipleLanguages\\";
export * from \\"./FunctionImplementation\\";
export * from \\"./GeneratedFiles\\";
export * from \\"./CustomFiles\\";
export * from \\"./BasicCustomFiles\\";
export * from \\"./Files\\";
export * from \\"./FileInfoV2\\";
export * from \\"./DefaultProvidedFile\\";
export * from \\"./FunctionSignature\\";
export * from \\"./GetFunctionSignatureRequest\\";
export * from \\"./GetFunctionSignatureResponse\\";
export * from \\"./GetBasicSolutionFileRequest\\";
export * from \\"./GetBasicSolutionFileResponse\\";
export * from \\"./GetGeneratedTestCaseFileRequest\\";
export * from \\"./GetGeneratedTestCaseTemplateFileRequest\\";
",
                            "name": "index.js",
                            "type": "file",
                          },
                        ],
                        "name": "types",
                        "type": "directory",
                      },
                    ],
                    "name": "problem",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export * from \\"./resources\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export * from \\"./resources\\";
",
                        "name": "index.js",
                        "type": "file",
                      },
                      Object {
                        "contents": Array [
                          Object {
                            "contents": "export * as problem from \\"./problem\\";
export * from \\"./problem/types\\";
",
                            "name": "index.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "export * as problem from \\"./problem\\";
export * from \\"./problem/types\\";
",
                            "name": "index.js",
                            "type": "file",
                          },
                          Object {
                            "contents": Array [
                              Object {
                                "contents": "export * from \\"./types\\";
export * from \\"./service\\";
",
                                "name": "index.d.ts",
                                "type": "file",
                              },
                              Object {
                                "contents": "export * from \\"./types\\";
export * from \\"./service\\";
",
                                "name": "index.js",
                                "type": "file",
                              },
                              Object {
                                "contents": Array [
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const Response: core.serialization.Schema<serializers.v2.v3.problem.getLightweightProblems.Response.Raw, TraceApi.v2.v3.LightweightProblemInfoV2[]>;
export declare namespace Response {
    type Raw = serializers.v2.v3.LightweightProblemInfoV2.Raw[];
}
",
                                    "name": "getLightweightProblems.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const Response = core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.LightweightProblemInfoV2));
",
                                    "name": "getLightweightProblems.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const Response: core.serialization.Schema<serializers.v2.v3.problem.getProblems.Response.Raw, TraceApi.v2.v3.ProblemInfoV2[]>;
export declare namespace Response {
    type Raw = serializers.v2.v3.ProblemInfoV2.Raw[];
}
",
                                    "name": "getProblems.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const Response = core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.ProblemInfoV2));
",
                                    "name": "getProblems.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "export * as getLightweightProblems from \\"./getLightweightProblems\\";
export * as getProblems from \\"./getProblems\\";
",
                                    "name": "index.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "export * as getLightweightProblems from \\"./getLightweightProblems\\";
export * as getProblems from \\"./getProblems\\";
",
                                    "name": "index.js",
                                    "type": "file",
                                  },
                                ],
                                "name": "service",
                                "type": "directory",
                              },
                              Object {
                                "contents": Array [
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const AssertCorrectnessCheck: core.serialization.Schema<serializers.v2.v3.AssertCorrectnessCheck.Raw, TraceApi.v2.v3.AssertCorrectnessCheck>;
export declare namespace AssertCorrectnessCheck {
    type Raw = AssertCorrectnessCheck.DeepEquality | AssertCorrectnessCheck.Custom;
    interface DeepEquality extends serializers.v2.v3.DeepEqualityCorrectnessCheck.Raw {
        type: \\"deepEquality\\";
    }
    interface Custom extends serializers.v2.v3.VoidFunctionDefinitionThatTakesActualResult.Raw {
        type: \\"custom\\";
    }
}
",
                                    "name": "AssertCorrectnessCheck.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export const AssertCorrectnessCheck = core.serialization
    .union(\\"type\\", {
    deepEquality: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.DeepEqualityCorrectnessCheck),
    custom: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.VoidFunctionDefinitionThatTakesActualResult),
})
    .transform({
    parse: (value) => {
        switch (value.type) {
            case \\"deepEquality\\":
                return TraceApi.v2.v3.AssertCorrectnessCheck.deepEquality(value);
            case \\"custom\\":
                return TraceApi.v2.v3.AssertCorrectnessCheck.custom(value);
            default:
                return TraceApi.v2.v3.AssertCorrectnessCheck._unknown(value);
        }
    },
    json: (value) => value,
});
",
                                    "name": "AssertCorrectnessCheck.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const BasicCustomFiles: core.serialization.ObjectSchema<serializers.v2.v3.BasicCustomFiles.Raw, TraceApi.v2.v3.BasicCustomFiles>;
export declare namespace BasicCustomFiles {
    interface Raw {
        methodName: string;
        signature: serializers.v2.v3.NonVoidFunctionSignature.Raw;
        additionalFiles: Record<serializers.Language.Raw, serializers.v2.v3.Files.Raw | null | undefined>;
        basicTestCaseTemplate: serializers.v2.v3.BasicTestCaseTemplate.Raw;
    }
}
",
                                    "name": "BasicCustomFiles.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const BasicCustomFiles = core.serialization.object({
    methodName: core.serialization.string(),
    signature: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.NonVoidFunctionSignature),
    additionalFiles: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.Files).optional()),
    basicTestCaseTemplate: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.BasicTestCaseTemplate),
});
",
                                    "name": "BasicCustomFiles.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const BasicTestCaseTemplate: core.serialization.ObjectSchema<serializers.v2.v3.BasicTestCaseTemplate.Raw, TraceApi.v2.v3.BasicTestCaseTemplate>;
export declare namespace BasicTestCaseTemplate {
    interface Raw {
        templateId: serializers.v2.v3.TestCaseTemplateId.Raw;
        name: string;
        description: serializers.v2.v3.TestCaseImplementationDescription.Raw;
        expectedValueParameterId: serializers.v2.v3.ParameterId.Raw;
    }
}
",
                                    "name": "BasicTestCaseTemplate.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const BasicTestCaseTemplate = core.serialization.object({
    templateId: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseTemplateId),
    name: core.serialization.string(),
    description: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseImplementationDescription),
    expectedValueParameterId: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).v2.v3.ParameterId),
});
",
                                    "name": "BasicTestCaseTemplate.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const CreateProblemRequestV2: core.serialization.ObjectSchema<serializers.v2.v3.CreateProblemRequestV2.Raw, TraceApi.v2.v3.CreateProblemRequestV2>;
export declare namespace CreateProblemRequestV2 {
    interface Raw {
        problemName: string;
        problemDescription: serializers.ProblemDescription.Raw;
        customFiles: serializers.v2.v3.CustomFiles.Raw;
        customTestCaseTemplates: serializers.v2.v3.TestCaseTemplate.Raw[];
        testcases: serializers.v2.v3.TestCaseV2.Raw[];
        supportedLanguages: serializers.Language.Raw[];
        isPublic: boolean;
    }
}
",
                                    "name": "CreateProblemRequestV2.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const CreateProblemRequestV2 = core.serialization.object({
    problemName: core.serialization.string(),
    problemDescription: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).ProblemDescription),
    customFiles: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).v2.v3.CustomFiles),
    customTestCaseTemplates: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseTemplate)),
    testcases: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseV2)),
    supportedLanguages: core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).Language)),
    isPublic: core.serialization.boolean(),
});
",
                                    "name": "CreateProblemRequestV2.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const CustomFiles: core.serialization.Schema<serializers.v2.v3.CustomFiles.Raw, TraceApi.v2.v3.CustomFiles>;
export declare namespace CustomFiles {
    type Raw = CustomFiles.Basic | CustomFiles.Custom;
    interface Basic extends serializers.v2.v3.BasicCustomFiles.Raw {
        type: \\"basic\\";
    }
    interface Custom {
        type: \\"custom\\";
        value: Record<serializers.Language.Raw, serializers.v2.v3.Files.Raw | null | undefined>;
    }
}
",
                                    "name": "CustomFiles.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export const CustomFiles = core.serialization
    .union(\\"type\\", {
    basic: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.BasicCustomFiles),
    custom: core.serialization.object({
        value: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).Language), core.serialization
            .lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.Files)
            .optional()),
    }),
})
    .transform({
    parse: (value) => {
        switch (value.type) {
            case \\"basic\\":
                return TraceApi.v2.v3.CustomFiles.basic(value);
            case \\"custom\\":
                return TraceApi.v2.v3.CustomFiles.custom(value.value);
            default:
                return TraceApi.v2.v3.CustomFiles._unknown(value);
        }
    },
    json: (value) => value,
});
",
                                    "name": "CustomFiles.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const DeepEqualityCorrectnessCheck: core.serialization.ObjectSchema<serializers.v2.v3.DeepEqualityCorrectnessCheck.Raw, TraceApi.v2.v3.DeepEqualityCorrectnessCheck>;
export declare namespace DeepEqualityCorrectnessCheck {
    interface Raw {
        expectedValueParameterId: serializers.v2.v3.ParameterId.Raw;
    }
}
",
                                    "name": "DeepEqualityCorrectnessCheck.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const DeepEqualityCorrectnessCheck = core.serialization.object({
    expectedValueParameterId: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).v2.v3.ParameterId),
});
",
                                    "name": "DeepEqualityCorrectnessCheck.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const DefaultProvidedFile: core.serialization.ObjectSchema<serializers.v2.v3.DefaultProvidedFile.Raw, TraceApi.v2.v3.DefaultProvidedFile>;
export declare namespace DefaultProvidedFile {
    interface Raw {
        file: serializers.v2.v3.FileInfoV2.Raw;
        relatedTypes: serializers.VariableType.Raw[];
    }
}
",
                                    "name": "DefaultProvidedFile.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const DefaultProvidedFile = core.serialization.object({
    file: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.FileInfoV2),
    relatedTypes: core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).VariableType)),
});
",
                                    "name": "DefaultProvidedFile.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const FileInfoV2: core.serialization.ObjectSchema<serializers.v2.v3.FileInfoV2.Raw, TraceApi.v2.v3.FileInfoV2>;
export declare namespace FileInfoV2 {
    interface Raw {
        filename: string;
        directory: string;
        contents: string;
        editable: boolean;
    }
}
",
                                    "name": "FileInfoV2.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const FileInfoV2 = core.serialization.object({
    filename: core.serialization.string(),
    directory: core.serialization.string(),
    contents: core.serialization.string(),
    editable: core.serialization.boolean(),
});
",
                                    "name": "FileInfoV2.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const Files: core.serialization.ObjectSchema<serializers.v2.v3.Files.Raw, TraceApi.v2.v3.Files>;
export declare namespace Files {
    interface Raw {
        files: serializers.v2.v3.FileInfoV2.Raw[];
    }
}
",
                                    "name": "Files.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const Files = core.serialization.object({
    files: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.FileInfoV2)),
});
",
                                    "name": "Files.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const FunctionImplementation: core.serialization.ObjectSchema<serializers.v2.v3.FunctionImplementation.Raw, TraceApi.v2.v3.FunctionImplementation>;
export declare namespace FunctionImplementation {
    interface Raw {
        impl: string;
        imports?: string | null;
    }
}
",
                                    "name": "FunctionImplementation.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const FunctionImplementation = core.serialization.object({
    impl: core.serialization.string(),
    imports: core.serialization.string().optional(),
});
",
                                    "name": "FunctionImplementation.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const FunctionImplementationForMultipleLanguages: core.serialization.ObjectSchema<serializers.v2.v3.FunctionImplementationForMultipleLanguages.Raw, TraceApi.v2.v3.FunctionImplementationForMultipleLanguages>;
export declare namespace FunctionImplementationForMultipleLanguages {
    interface Raw {
        codeByLanguage: Record<serializers.Language.Raw, serializers.v2.v3.FunctionImplementation.Raw | null | undefined>;
    }
}
",
                                    "name": "FunctionImplementationForMultipleLanguages.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const FunctionImplementationForMultipleLanguages = core.serialization.object({
    codeByLanguage: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).Language), core.serialization
        .lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.FunctionImplementation)
        .optional()),
});
",
                                    "name": "FunctionImplementationForMultipleLanguages.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const FunctionSignature: core.serialization.Schema<serializers.v2.v3.FunctionSignature.Raw, TraceApi.v2.v3.FunctionSignature>;
export declare namespace FunctionSignature {
    type Raw = FunctionSignature.Void | FunctionSignature.NonVoid | FunctionSignature.VoidThatTakesActualResult;
    interface Void extends serializers.v2.v3.VoidFunctionSignature.Raw {
        type: \\"void\\";
    }
    interface NonVoid extends serializers.v2.v3.NonVoidFunctionSignature.Raw {
        type: \\"nonVoid\\";
    }
    interface VoidThatTakesActualResult extends serializers.v2.v3.VoidFunctionSignatureThatTakesActualResult.Raw {
        type: \\"voidThatTakesActualResult\\";
    }
}
",
                                    "name": "FunctionSignature.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export const FunctionSignature = core.serialization
    .union(\\"type\\", {
    void: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.VoidFunctionSignature),
    nonVoid: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.NonVoidFunctionSignature),
    voidThatTakesActualResult: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.VoidFunctionSignatureThatTakesActualResult),
})
    .transform({
    parse: (value) => {
        switch (value.type) {
            case \\"void\\":
                return TraceApi.v2.v3.FunctionSignature.void(value);
            case \\"nonVoid\\":
                return TraceApi.v2.v3.FunctionSignature.nonVoid(value);
            case \\"voidThatTakesActualResult\\":
                return TraceApi.v2.v3.FunctionSignature.voidThatTakesActualResult(value);
            default:
                return TraceApi.v2.v3.FunctionSignature._unknown(value);
        }
    },
    json: (value) => value,
});
",
                                    "name": "FunctionSignature.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const GeneratedFiles: core.serialization.ObjectSchema<serializers.v2.v3.GeneratedFiles.Raw, TraceApi.v2.v3.GeneratedFiles>;
export declare namespace GeneratedFiles {
    interface Raw {
        generatedTestCaseFiles: Record<serializers.Language.Raw, serializers.v2.v3.Files.Raw | null | undefined>;
        generatedTemplateFiles: Record<serializers.Language.Raw, serializers.v2.v3.Files.Raw | null | undefined>;
        other: Record<serializers.Language.Raw, serializers.v2.v3.Files.Raw | null | undefined>;
    }
}
",
                                    "name": "GeneratedFiles.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const GeneratedFiles = core.serialization.object({
    generatedTestCaseFiles: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.Files).optional()),
    generatedTemplateFiles: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.Files).optional()),
    other: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.Files).optional()),
});
",
                                    "name": "GeneratedFiles.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const GetBasicSolutionFileRequest: core.serialization.ObjectSchema<serializers.v2.v3.GetBasicSolutionFileRequest.Raw, TraceApi.v2.v3.GetBasicSolutionFileRequest>;
export declare namespace GetBasicSolutionFileRequest {
    interface Raw {
        methodName: string;
        signature: serializers.v2.v3.NonVoidFunctionSignature.Raw;
    }
}
",
                                    "name": "GetBasicSolutionFileRequest.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const GetBasicSolutionFileRequest = core.serialization.object({
    methodName: core.serialization.string(),
    signature: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.NonVoidFunctionSignature),
});
",
                                    "name": "GetBasicSolutionFileRequest.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const GetBasicSolutionFileResponse: core.serialization.ObjectSchema<serializers.v2.v3.GetBasicSolutionFileResponse.Raw, TraceApi.v2.v3.GetBasicSolutionFileResponse>;
export declare namespace GetBasicSolutionFileResponse {
    interface Raw {
        solutionFileByLanguage: Record<serializers.Language.Raw, serializers.v2.v3.FileInfoV2.Raw | null | undefined>;
    }
}
",
                                    "name": "GetBasicSolutionFileResponse.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const GetBasicSolutionFileResponse = core.serialization.object({
    solutionFileByLanguage: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.FileInfoV2).optional()),
});
",
                                    "name": "GetBasicSolutionFileResponse.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const GetFunctionSignatureRequest: core.serialization.ObjectSchema<serializers.v2.v3.GetFunctionSignatureRequest.Raw, TraceApi.v2.v3.GetFunctionSignatureRequest>;
export declare namespace GetFunctionSignatureRequest {
    interface Raw {
        functionSignature: serializers.v2.v3.FunctionSignature.Raw;
    }
}
",
                                    "name": "GetFunctionSignatureRequest.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const GetFunctionSignatureRequest = core.serialization.object({
    functionSignature: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).v2.v3.FunctionSignature),
});
",
                                    "name": "GetFunctionSignatureRequest.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const GetFunctionSignatureResponse: core.serialization.ObjectSchema<serializers.v2.v3.GetFunctionSignatureResponse.Raw, TraceApi.v2.v3.GetFunctionSignatureResponse>;
export declare namespace GetFunctionSignatureResponse {
    interface Raw {
        functionByLanguage: Record<serializers.Language.Raw, string | null | undefined>;
    }
}
",
                                    "name": "GetFunctionSignatureResponse.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const GetFunctionSignatureResponse = core.serialization.object({
    functionByLanguage: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).Language), core.serialization.string().optional()),
});
",
                                    "name": "GetFunctionSignatureResponse.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const GetGeneratedTestCaseFileRequest: core.serialization.ObjectSchema<serializers.v2.v3.GetGeneratedTestCaseFileRequest.Raw, TraceApi.v2.v3.GetGeneratedTestCaseFileRequest>;
export declare namespace GetGeneratedTestCaseFileRequest {
    interface Raw {
        template?: serializers.v2.v3.TestCaseTemplate.Raw | null;
        testCase: serializers.v2.v3.TestCaseV2.Raw;
    }
}
",
                                    "name": "GetGeneratedTestCaseFileRequest.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const GetGeneratedTestCaseFileRequest = core.serialization.object({
    template: core.serialization
        .lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseTemplate)
        .optional(),
    testCase: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseV2),
});
",
                                    "name": "GetGeneratedTestCaseFileRequest.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const GetGeneratedTestCaseTemplateFileRequest: core.serialization.ObjectSchema<serializers.v2.v3.GetGeneratedTestCaseTemplateFileRequest.Raw, TraceApi.v2.v3.GetGeneratedTestCaseTemplateFileRequest>;
export declare namespace GetGeneratedTestCaseTemplateFileRequest {
    interface Raw {
        template: serializers.v2.v3.TestCaseTemplate.Raw;
    }
}
",
                                    "name": "GetGeneratedTestCaseTemplateFileRequest.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const GetGeneratedTestCaseTemplateFileRequest = core.serialization.object({
    template: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseTemplate),
});
",
                                    "name": "GetGeneratedTestCaseTemplateFileRequest.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const LightweightProblemInfoV2: core.serialization.ObjectSchema<serializers.v2.v3.LightweightProblemInfoV2.Raw, TraceApi.v2.v3.LightweightProblemInfoV2>;
export declare namespace LightweightProblemInfoV2 {
    interface Raw {
        problemId: serializers.ProblemId.Raw;
        problemName: string;
        problemVersion: number;
        variableTypes: serializers.VariableType.Raw[];
    }
}
",
                                    "name": "LightweightProblemInfoV2.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const LightweightProblemInfoV2 = core.serialization.object({
    problemId: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).ProblemId),
    problemName: core.serialization.string(),
    problemVersion: core.serialization.number(),
    variableTypes: core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).VariableType)),
});
",
                                    "name": "LightweightProblemInfoV2.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const NonVoidFunctionDefinition: core.serialization.ObjectSchema<serializers.v2.v3.NonVoidFunctionDefinition.Raw, TraceApi.v2.v3.NonVoidFunctionDefinition>;
export declare namespace NonVoidFunctionDefinition {
    interface Raw {
        signature: serializers.v2.v3.NonVoidFunctionSignature.Raw;
        code: serializers.v2.v3.FunctionImplementationForMultipleLanguages.Raw;
    }
}
",
                                    "name": "NonVoidFunctionDefinition.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const NonVoidFunctionDefinition = core.serialization.object({
    signature: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.NonVoidFunctionSignature),
    code: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.FunctionImplementationForMultipleLanguages),
});
",
                                    "name": "NonVoidFunctionDefinition.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const NonVoidFunctionSignature: core.serialization.ObjectSchema<serializers.v2.v3.NonVoidFunctionSignature.Raw, TraceApi.v2.v3.NonVoidFunctionSignature>;
export declare namespace NonVoidFunctionSignature {
    interface Raw {
        parameters: serializers.v2.v3.Parameter.Raw[];
        returnType: serializers.VariableType.Raw;
    }
}
",
                                    "name": "NonVoidFunctionSignature.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const NonVoidFunctionSignature = core.serialization.object({
    parameters: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.Parameter)),
    returnType: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).VariableType),
});
",
                                    "name": "NonVoidFunctionSignature.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const Parameter: core.serialization.ObjectSchema<serializers.v2.v3.Parameter.Raw, TraceApi.v2.v3.Parameter>;
export declare namespace Parameter {
    interface Raw {
        parameterId: serializers.v2.v3.ParameterId.Raw;
        name: string;
        variableType: serializers.VariableType.Raw;
    }
}
",
                                    "name": "Parameter.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const Parameter = core.serialization.object({
    parameterId: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).v2.v3.ParameterId),
    name: core.serialization.string(),
    variableType: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).VariableType),
});
",
                                    "name": "Parameter.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const ParameterId: core.serialization.Schema<serializers.v2.v3.ParameterId.Raw, TraceApi.v2.v3.ParameterId>;
export declare namespace ParameterId {
    type Raw = string;
}
",
                                    "name": "ParameterId.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const ParameterId = core.serialization.string();
",
                                    "name": "ParameterId.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const ProblemInfoV2: core.serialization.ObjectSchema<serializers.v2.v3.ProblemInfoV2.Raw, TraceApi.v2.v3.ProblemInfoV2>;
export declare namespace ProblemInfoV2 {
    interface Raw {
        problemId: serializers.ProblemId.Raw;
        problemDescription: serializers.ProblemDescription.Raw;
        problemName: string;
        problemVersion: number;
        supportedLanguages: serializers.Language.Raw[];
        customFiles: serializers.v2.v3.CustomFiles.Raw;
        generatedFiles: serializers.v2.v3.GeneratedFiles.Raw;
        customTestCaseTemplates: serializers.v2.v3.TestCaseTemplate.Raw[];
        testcases: serializers.v2.v3.TestCaseV2.Raw[];
        isPublic: boolean;
    }
}
",
                                    "name": "ProblemInfoV2.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const ProblemInfoV2 = core.serialization.object({
    problemId: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).ProblemId),
    problemDescription: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).ProblemDescription),
    problemName: core.serialization.string(),
    problemVersion: core.serialization.number(),
    supportedLanguages: core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).Language)),
    customFiles: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).v2.v3.CustomFiles),
    generatedFiles: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.GeneratedFiles),
    customTestCaseTemplates: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseTemplate)),
    testcases: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseV2)),
    isPublic: core.serialization.boolean(),
});
",
                                    "name": "ProblemInfoV2.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const TestCaseExpects: core.serialization.ObjectSchema<serializers.v2.v3.TestCaseExpects.Raw, TraceApi.v2.v3.TestCaseExpects>;
export declare namespace TestCaseExpects {
    interface Raw {
        expectedStdout?: string | null;
    }
}
",
                                    "name": "TestCaseExpects.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const TestCaseExpects = core.serialization.object({
    expectedStdout: core.serialization.string().optional(),
});
",
                                    "name": "TestCaseExpects.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const TestCaseFunction: core.serialization.Schema<serializers.v2.v3.TestCaseFunction.Raw, TraceApi.v2.v3.TestCaseFunction>;
export declare namespace TestCaseFunction {
    type Raw = TestCaseFunction.WithActualResult | TestCaseFunction.Custom;
    interface WithActualResult extends serializers.v2.v3.TestCaseWithActualResultImplementation.Raw {
        type: \\"withActualResult\\";
    }
    interface Custom extends serializers.v2.v3.VoidFunctionDefinition.Raw {
        type: \\"custom\\";
    }
}
",
                                    "name": "TestCaseFunction.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export const TestCaseFunction = core.serialization
    .union(\\"type\\", {
    withActualResult: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseWithActualResultImplementation),
    custom: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.VoidFunctionDefinition),
})
    .transform({
    parse: (value) => {
        switch (value.type) {
            case \\"withActualResult\\":
                return TraceApi.v2.v3.TestCaseFunction.withActualResult(value);
            case \\"custom\\":
                return TraceApi.v2.v3.TestCaseFunction.custom(value);
            default:
                return TraceApi.v2.v3.TestCaseFunction._unknown(value);
        }
    },
    json: (value) => value,
});
",
                                    "name": "TestCaseFunction.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const TestCaseId: core.serialization.Schema<serializers.v2.v3.TestCaseId.Raw, TraceApi.v2.v3.TestCaseId>;
export declare namespace TestCaseId {
    type Raw = string;
}
",
                                    "name": "TestCaseId.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const TestCaseId = core.serialization.string();
",
                                    "name": "TestCaseId.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const TestCaseImplementation: core.serialization.ObjectSchema<serializers.v2.v3.TestCaseImplementation.Raw, TraceApi.v2.v3.TestCaseImplementation>;
export declare namespace TestCaseImplementation {
    interface Raw {
        description: serializers.v2.v3.TestCaseImplementationDescription.Raw;
        function: serializers.v2.v3.TestCaseFunction.Raw;
    }
}
",
                                    "name": "TestCaseImplementation.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const TestCaseImplementation = core.serialization.object({
    description: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseImplementationDescription),
    function: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseFunction),
});
",
                                    "name": "TestCaseImplementation.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const TestCaseImplementationDescription: core.serialization.ObjectSchema<serializers.v2.v3.TestCaseImplementationDescription.Raw, TraceApi.v2.v3.TestCaseImplementationDescription>;
export declare namespace TestCaseImplementationDescription {
    interface Raw {
        boards: serializers.v2.v3.TestCaseImplementationDescriptionBoard.Raw[];
    }
}
",
                                    "name": "TestCaseImplementationDescription.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const TestCaseImplementationDescription = core.serialization.object({
    boards: core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseImplementationDescriptionBoard)),
});
",
                                    "name": "TestCaseImplementationDescription.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const TestCaseImplementationDescriptionBoard: core.serialization.Schema<serializers.v2.v3.TestCaseImplementationDescriptionBoard.Raw, TraceApi.v2.v3.TestCaseImplementationDescriptionBoard>;
export declare namespace TestCaseImplementationDescriptionBoard {
    type Raw = TestCaseImplementationDescriptionBoard.Html | TestCaseImplementationDescriptionBoard.ParamId;
    interface Html {
        type: \\"html\\";
        value: string;
    }
    interface ParamId {
        type: \\"paramId\\";
        value: serializers.v2.v3.ParameterId.Raw;
    }
}
",
                                    "name": "TestCaseImplementationDescriptionBoard.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export const TestCaseImplementationDescriptionBoard = core.serialization
    .union(\\"type\\", {
    html: core.serialization.object({
        value: core.serialization.string(),
    }),
    paramId: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).v2.v3.ParameterId),
    }),
})
    .transform({
    parse: (value) => {
        switch (value.type) {
            case \\"html\\":
                return TraceApi.v2.v3.TestCaseImplementationDescriptionBoard.html(value.value);
            case \\"paramId\\":
                return TraceApi.v2.v3.TestCaseImplementationDescriptionBoard.paramId(value.value);
            default:
                return TraceApi.v2.v3.TestCaseImplementationDescriptionBoard._unknown(value);
        }
    },
    json: (value) => value,
});
",
                                    "name": "TestCaseImplementationDescriptionBoard.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const TestCaseImplementationReference: core.serialization.Schema<serializers.v2.v3.TestCaseImplementationReference.Raw, TraceApi.v2.v3.TestCaseImplementationReference>;
export declare namespace TestCaseImplementationReference {
    type Raw = TestCaseImplementationReference.TemplateId | TestCaseImplementationReference.Implementation;
    interface TemplateId {
        type: \\"templateId\\";
        value: serializers.v2.v3.TestCaseTemplateId.Raw;
    }
    interface Implementation extends serializers.v2.v3.TestCaseImplementation.Raw {
        type: \\"implementation\\";
    }
}
",
                                    "name": "TestCaseImplementationReference.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export const TestCaseImplementationReference = core.serialization
    .union(\\"type\\", {
    templateId: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseTemplateId),
    }),
    implementation: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseImplementation),
})
    .transform({
    parse: (value) => {
        switch (value.type) {
            case \\"templateId\\":
                return TraceApi.v2.v3.TestCaseImplementationReference.templateId(value.value);
            case \\"implementation\\":
                return TraceApi.v2.v3.TestCaseImplementationReference.implementation(value);
            default:
                return TraceApi.v2.v3.TestCaseImplementationReference._unknown(value);
        }
    },
    json: (value) => value,
});
",
                                    "name": "TestCaseImplementationReference.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const TestCaseMetadata: core.serialization.ObjectSchema<serializers.v2.v3.TestCaseMetadata.Raw, TraceApi.v2.v3.TestCaseMetadata>;
export declare namespace TestCaseMetadata {
    interface Raw {
        id: serializers.v2.v3.TestCaseId.Raw;
        name: string;
        hidden: boolean;
    }
}
",
                                    "name": "TestCaseMetadata.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const TestCaseMetadata = core.serialization.object({
    id: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseId),
    name: core.serialization.string(),
    hidden: core.serialization.boolean(),
});
",
                                    "name": "TestCaseMetadata.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const TestCaseTemplate: core.serialization.ObjectSchema<serializers.v2.v3.TestCaseTemplate.Raw, TraceApi.v2.v3.TestCaseTemplate>;
export declare namespace TestCaseTemplate {
    interface Raw {
        templateId: serializers.v2.v3.TestCaseTemplateId.Raw;
        name: string;
        implementation: serializers.v2.v3.TestCaseImplementation.Raw;
    }
}
",
                                    "name": "TestCaseTemplate.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const TestCaseTemplate = core.serialization.object({
    templateId: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseTemplateId),
    name: core.serialization.string(),
    implementation: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseImplementation),
});
",
                                    "name": "TestCaseTemplate.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const TestCaseTemplateId: core.serialization.Schema<serializers.v2.v3.TestCaseTemplateId.Raw, TraceApi.v2.v3.TestCaseTemplateId>;
export declare namespace TestCaseTemplateId {
    type Raw = string;
}
",
                                    "name": "TestCaseTemplateId.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const TestCaseTemplateId = core.serialization.string();
",
                                    "name": "TestCaseTemplateId.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const TestCaseV2: core.serialization.ObjectSchema<serializers.v2.v3.TestCaseV2.Raw, TraceApi.v2.v3.TestCaseV2>;
export declare namespace TestCaseV2 {
    interface Raw {
        metadata: serializers.v2.v3.TestCaseMetadata.Raw;
        implementation: serializers.v2.v3.TestCaseImplementationReference.Raw;
        arguments: Record<serializers.v2.v3.ParameterId.Raw, serializers.VariableValue.Raw>;
        expects?: serializers.v2.v3.TestCaseExpects.Raw | null;
    }
}
",
                                    "name": "TestCaseV2.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const TestCaseV2 = core.serialization.object({
    metadata: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseMetadata),
    implementation: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseImplementationReference),
    arguments: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).v2.v3.ParameterId), core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).VariableValue)),
    expects: core.serialization
        .lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseExpects)
        .optional(),
});
",
                                    "name": "TestCaseV2.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const TestCaseWithActualResultImplementation: core.serialization.ObjectSchema<serializers.v2.v3.TestCaseWithActualResultImplementation.Raw, TraceApi.v2.v3.TestCaseWithActualResultImplementation>;
export declare namespace TestCaseWithActualResultImplementation {
    interface Raw {
        getActualResult: serializers.v2.v3.NonVoidFunctionDefinition.Raw;
        assertCorrectnessCheck: serializers.v2.v3.AssertCorrectnessCheck.Raw;
    }
}
",
                                    "name": "TestCaseWithActualResultImplementation.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const TestCaseWithActualResultImplementation = core.serialization.object({
    getActualResult: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.NonVoidFunctionDefinition),
    assertCorrectnessCheck: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).v2.v3.AssertCorrectnessCheck),
});
",
                                    "name": "TestCaseWithActualResultImplementation.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const VoidFunctionDefinition: core.serialization.ObjectSchema<serializers.v2.v3.VoidFunctionDefinition.Raw, TraceApi.v2.v3.VoidFunctionDefinition>;
export declare namespace VoidFunctionDefinition {
    interface Raw {
        parameters: serializers.v2.v3.Parameter.Raw[];
        code: serializers.v2.v3.FunctionImplementationForMultipleLanguages.Raw;
    }
}
",
                                    "name": "VoidFunctionDefinition.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const VoidFunctionDefinition = core.serialization.object({
    parameters: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.Parameter)),
    code: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.FunctionImplementationForMultipleLanguages),
});
",
                                    "name": "VoidFunctionDefinition.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const VoidFunctionDefinitionThatTakesActualResult: core.serialization.ObjectSchema<serializers.v2.v3.VoidFunctionDefinitionThatTakesActualResult.Raw, TraceApi.v2.v3.VoidFunctionDefinitionThatTakesActualResult>;
export declare namespace VoidFunctionDefinitionThatTakesActualResult {
    interface Raw {
        additionalParameters: serializers.v2.v3.Parameter.Raw[];
        code: serializers.v2.v3.FunctionImplementationForMultipleLanguages.Raw;
    }
}
",
                                    "name": "VoidFunctionDefinitionThatTakesActualResult.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const VoidFunctionDefinitionThatTakesActualResult = core.serialization.object({
    additionalParameters: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.Parameter)),
    code: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.FunctionImplementationForMultipleLanguages),
});
",
                                    "name": "VoidFunctionDefinitionThatTakesActualResult.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const VoidFunctionSignature: core.serialization.ObjectSchema<serializers.v2.v3.VoidFunctionSignature.Raw, TraceApi.v2.v3.VoidFunctionSignature>;
export declare namespace VoidFunctionSignature {
    interface Raw {
        parameters: serializers.v2.v3.Parameter.Raw[];
    }
}
",
                                    "name": "VoidFunctionSignature.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const VoidFunctionSignature = core.serialization.object({
    parameters: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.Parameter)),
});
",
                                    "name": "VoidFunctionSignature.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";
export declare const VoidFunctionSignatureThatTakesActualResult: core.serialization.ObjectSchema<serializers.v2.v3.VoidFunctionSignatureThatTakesActualResult.Raw, TraceApi.v2.v3.VoidFunctionSignatureThatTakesActualResult>;
export declare namespace VoidFunctionSignatureThatTakesActualResult {
    interface Raw {
        parameters: serializers.v2.v3.Parameter.Raw[];
        actualResultType: serializers.VariableType.Raw;
    }
}
",
                                    "name": "VoidFunctionSignatureThatTakesActualResult.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../../../../../core\\";
export const VoidFunctionSignatureThatTakesActualResult = core.serialization.object({
    parameters: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.Parameter)),
    actualResultType: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).VariableType),
});
",
                                    "name": "VoidFunctionSignatureThatTakesActualResult.js",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "export * from \\"./TestCaseTemplateId\\";
export * from \\"./TestCaseId\\";
export * from \\"./ParameterId\\";
export * from \\"./ProblemInfoV2\\";
export * from \\"./LightweightProblemInfoV2\\";
export * from \\"./CreateProblemRequestV2\\";
export * from \\"./TestCaseV2\\";
export * from \\"./TestCaseExpects\\";
export * from \\"./TestCaseImplementationReference\\";
export * from \\"./BasicTestCaseTemplate\\";
export * from \\"./TestCaseTemplate\\";
export * from \\"./TestCaseImplementation\\";
export * from \\"./TestCaseFunction\\";
export * from \\"./TestCaseWithActualResultImplementation\\";
export * from \\"./VoidFunctionDefinition\\";
export * from \\"./Parameter\\";
export * from \\"./NonVoidFunctionDefinition\\";
export * from \\"./VoidFunctionSignature\\";
export * from \\"./NonVoidFunctionSignature\\";
export * from \\"./VoidFunctionSignatureThatTakesActualResult\\";
export * from \\"./AssertCorrectnessCheck\\";
export * from \\"./DeepEqualityCorrectnessCheck\\";
export * from \\"./VoidFunctionDefinitionThatTakesActualResult\\";
export * from \\"./TestCaseImplementationDescription\\";
export * from \\"./TestCaseImplementationDescriptionBoard\\";
export * from \\"./TestCaseMetadata\\";
export * from \\"./FunctionImplementationForMultipleLanguages\\";
export * from \\"./FunctionImplementation\\";
export * from \\"./GeneratedFiles\\";
export * from \\"./CustomFiles\\";
export * from \\"./BasicCustomFiles\\";
export * from \\"./Files\\";
export * from \\"./FileInfoV2\\";
export * from \\"./DefaultProvidedFile\\";
export * from \\"./FunctionSignature\\";
export * from \\"./GetFunctionSignatureRequest\\";
export * from \\"./GetFunctionSignatureResponse\\";
export * from \\"./GetBasicSolutionFileRequest\\";
export * from \\"./GetBasicSolutionFileResponse\\";
export * from \\"./GetGeneratedTestCaseFileRequest\\";
export * from \\"./GetGeneratedTestCaseTemplateFileRequest\\";
",
                                    "name": "index.d.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "export * from \\"./TestCaseTemplateId\\";
export * from \\"./TestCaseId\\";
export * from \\"./ParameterId\\";
export * from \\"./ProblemInfoV2\\";
export * from \\"./LightweightProblemInfoV2\\";
export * from \\"./CreateProblemRequestV2\\";
export * from \\"./TestCaseV2\\";
export * from \\"./TestCaseExpects\\";
export * from \\"./TestCaseImplementationReference\\";
export * from \\"./BasicTestCaseTemplate\\";
export * from \\"./TestCaseTemplate\\";
export * from \\"./TestCaseImplementation\\";
export * from \\"./TestCaseFunction\\";
export * from \\"./TestCaseWithActualResultImplementation\\";
export * from \\"./VoidFunctionDefinition\\";
export * from \\"./Parameter\\";
export * from \\"./NonVoidFunctionDefinition\\";
export * from \\"./VoidFunctionSignature\\";
export * from \\"./NonVoidFunctionSignature\\";
export * from \\"./VoidFunctionSignatureThatTakesActualResult\\";
export * from \\"./AssertCorrectnessCheck\\";
export * from \\"./DeepEqualityCorrectnessCheck\\";
export * from \\"./VoidFunctionDefinitionThatTakesActualResult\\";
export * from \\"./TestCaseImplementationDescription\\";
export * from \\"./TestCaseImplementationDescriptionBoard\\";
export * from \\"./TestCaseMetadata\\";
export * from \\"./FunctionImplementationForMultipleLanguages\\";
export * from \\"./FunctionImplementation\\";
export * from \\"./GeneratedFiles\\";
export * from \\"./CustomFiles\\";
export * from \\"./BasicCustomFiles\\";
export * from \\"./Files\\";
export * from \\"./FileInfoV2\\";
export * from \\"./DefaultProvidedFile\\";
export * from \\"./FunctionSignature\\";
export * from \\"./GetFunctionSignatureRequest\\";
export * from \\"./GetFunctionSignatureResponse\\";
export * from \\"./GetBasicSolutionFileRequest\\";
export * from \\"./GetBasicSolutionFileResponse\\";
export * from \\"./GetGeneratedTestCaseFileRequest\\";
export * from \\"./GetGeneratedTestCaseTemplateFileRequest\\";
",
                                    "name": "index.js",
                                    "type": "file",
                                  },
                                ],
                                "name": "types",
                                "type": "directory",
                              },
                            ],
                            "name": "problem",
                            "type": "directory",
                          },
                        ],
                        "name": "resources",
                        "type": "directory",
                      },
                    ],
                    "name": "v3",
                    "type": "directory",
                  },
                ],
                "name": "resources",
                "type": "directory",
              },
            ],
            "name": "v2",
            "type": "directory",
          },
        ],
        "name": "resources",
        "type": "directory",
      },
    ],
    "name": "serialization",
    "type": "directory",
  },
]
`;
