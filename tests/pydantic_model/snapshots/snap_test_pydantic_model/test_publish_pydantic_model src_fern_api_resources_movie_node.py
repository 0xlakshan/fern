# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

import pydantic
import typing_extensions

from ...core.datetime_utils import serialize_datetime


class Node(pydantic.BaseModel):
    """
    from fern.api import Node, Tree

    Node(
        name="root",
        nodes=[Node(name="left"), Node(name="right")],
        trees=[Tree(nodes=[Node(name="left"), Node(name="right")])],
    )
    """

    name: str
    nodes: typing.Optional[typing.List[Node]]
    trees: typing.Optional[typing.List[Tree]]

    class Partial(typing_extensions.TypedDict):
        name: typing_extensions.NotRequired[str]
        nodes: typing_extensions.NotRequired[typing.Optional[typing.List[Node]]]
        trees: typing_extensions.NotRequired[typing.Optional[typing.List[Tree]]]

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @Node.Validators.root()
            def validate(values: Node.Partial) -> Node.Partial:
                ...

            @Node.Validators.field("name")
            def validate_name(name: str, values: Node.Partial) -> str:
                ...

            @Node.Validators.field("nodes")
            def validate_nodes(nodes: typing.Optional[typing.List[Node]], values: Node.Partial) -> typing.Optional[typing.List[Node]]:
                ...

            @Node.Validators.field("trees")
            def validate_trees(trees: typing.Optional[typing.List[Tree]], values: Node.Partial) -> typing.Optional[typing.List[Tree]]:
                ...
        """

        _pre_validators: typing.ClassVar[typing.List[Node.Validators._PreRootValidator]] = []
        _post_validators: typing.ClassVar[typing.List[Node.Validators._RootValidator]] = []
        _name_pre_validators: typing.ClassVar[typing.List[Node.Validators.PreNameValidator]] = []
        _name_post_validators: typing.ClassVar[typing.List[Node.Validators.NameValidator]] = []
        _nodes_pre_validators: typing.ClassVar[typing.List[Node.Validators.PreNodesValidator]] = []
        _nodes_post_validators: typing.ClassVar[typing.List[Node.Validators.NodesValidator]] = []
        _trees_pre_validators: typing.ClassVar[typing.List[Node.Validators.PreTreesValidator]] = []
        _trees_post_validators: typing.ClassVar[typing.List[Node.Validators.TreesValidator]] = []

        @typing.overload
        @classmethod
        def root(
            cls, *, pre: typing_extensions.Literal[False] = False
        ) -> typing.Callable[[Node.Validators._RootValidator], Node.Validators._RootValidator]:
            ...

        @typing.overload
        @classmethod
        def root(
            cls, *, pre: typing_extensions.Literal[True]
        ) -> typing.Callable[[Node.Validators._PreRootValidator], Node.Validators._PreRootValidator]:
            ...

        @classmethod
        def root(cls, *, pre: bool = False) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if pre:
                    cls._pre_validators.append(validator)
                else:
                    cls._post_validators.append(validator)
                return validator

            return decorator

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["name"], *, pre: typing_extensions.Literal[True]
        ) -> typing.Callable[[Node.Validators.PreNameValidator], Node.Validators.PreNameValidator]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["name"], *, pre: typing_extensions.Literal[False] = False
        ) -> typing.Callable[[Node.Validators.NameValidator], Node.Validators.NameValidator]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["nodes"], *, pre: typing_extensions.Literal[True]
        ) -> typing.Callable[[Node.Validators.PreNodesValidator], Node.Validators.PreNodesValidator]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["nodes"], *, pre: typing_extensions.Literal[False] = False
        ) -> typing.Callable[[Node.Validators.NodesValidator], Node.Validators.NodesValidator]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["trees"], *, pre: typing_extensions.Literal[True]
        ) -> typing.Callable[[Node.Validators.PreTreesValidator], Node.Validators.PreTreesValidator]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["trees"], *, pre: typing_extensions.Literal[False] = False
        ) -> typing.Callable[[Node.Validators.TreesValidator], Node.Validators.TreesValidator]:
            ...

        @classmethod
        def field(cls, field_name: str, *, pre: bool = False) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if field_name == "name":
                    if pre:
                        cls._name_pre_validators.append(validator)
                    else:
                        cls._name_post_validators.append(validator)
                if field_name == "nodes":
                    if pre:
                        cls._nodes_pre_validators.append(validator)
                    else:
                        cls._nodes_post_validators.append(validator)
                if field_name == "trees":
                    if pre:
                        cls._trees_pre_validators.append(validator)
                    else:
                        cls._trees_post_validators.append(validator)
                return validator

            return decorator

        class PreNameValidator(typing_extensions.Protocol):
            def __call__(self, __v: typing.Any, __values: Node.Partial) -> typing.Any:
                ...

        class NameValidator(typing_extensions.Protocol):
            def __call__(self, __v: str, __values: Node.Partial) -> str:
                ...

        class PreNodesValidator(typing_extensions.Protocol):
            def __call__(self, __v: typing.Any, __values: Node.Partial) -> typing.Any:
                ...

        class NodesValidator(typing_extensions.Protocol):
            def __call__(
                self, __v: typing.Optional[typing.List[Node]], __values: Node.Partial
            ) -> typing.Optional[typing.List[Node]]:
                ...

        class PreTreesValidator(typing_extensions.Protocol):
            def __call__(self, __v: typing.Any, __values: Node.Partial) -> typing.Any:
                ...

        class TreesValidator(typing_extensions.Protocol):
            def __call__(
                self, __v: typing.Optional[typing.List[Tree]], __values: Node.Partial
            ) -> typing.Optional[typing.List[Tree]]:
                ...

        class _PreRootValidator(typing_extensions.Protocol):
            def __call__(self, __values: typing.Any) -> typing.Any:
                ...

        class _RootValidator(typing_extensions.Protocol):
            def __call__(self, __values: Node.Partial) -> Node.Partial:
                ...

    @pydantic.root_validator(pre=True)
    def _pre_validate_node(cls, values: Node.Partial) -> Node.Partial:
        for validator in Node.Validators._pre_validators:
            values = validator(values)
        return values

    @pydantic.root_validator(pre=False)
    def _post_validate_node(cls, values: Node.Partial) -> Node.Partial:
        for validator in Node.Validators._post_validators:
            values = validator(values)
        return values

    @pydantic.validator("name", pre=True)
    def _pre_validate_name(cls, v: str, values: Node.Partial) -> str:
        for validator in Node.Validators._name_pre_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("name", pre=False)
    def _post_validate_name(cls, v: str, values: Node.Partial) -> str:
        for validator in Node.Validators._name_post_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("nodes", pre=True)
    def _pre_validate_nodes(
        cls, v: typing.Optional[typing.List[Node]], values: Node.Partial
    ) -> typing.Optional[typing.List[Node]]:
        for validator in Node.Validators._nodes_pre_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("nodes", pre=False)
    def _post_validate_nodes(
        cls, v: typing.Optional[typing.List[Node]], values: Node.Partial
    ) -> typing.Optional[typing.List[Node]]:
        for validator in Node.Validators._nodes_post_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("trees", pre=True)
    def _pre_validate_trees(
        cls, v: typing.Optional[typing.List[Tree]], values: Node.Partial
    ) -> typing.Optional[typing.List[Tree]]:
        for validator in Node.Validators._trees_pre_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("trees", pre=False)
    def _post_validate_trees(
        cls, v: typing.Optional[typing.List[Tree]], values: Node.Partial
    ) -> typing.Optional[typing.List[Tree]]:
        for validator in Node.Validators._trees_post_validators:
            v = validator(v, values)
        return v

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        json_encoders = {dt.datetime: serialize_datetime}


from .tree import Tree  # noqa: E402

Node.update_forward_refs()
