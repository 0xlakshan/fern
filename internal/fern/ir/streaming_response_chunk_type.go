// This file was auto-generated by Fern from our API Definition.

package ir

import (
	json "encoding/json"
	fmt "fmt"
)

type StreamingResponseChunkType struct {
	Type string
	Json *TypeReference
	Text any
}

func NewStreamingResponseChunkTypeFromJson(value *TypeReference) *StreamingResponseChunkType {
	return &StreamingResponseChunkType{Type: "json", Json: value}
}

func NewStreamingResponseChunkTypeFromText(value any) *StreamingResponseChunkType {
	return &StreamingResponseChunkType{Type: "text", Text: value}
}

func (s *StreamingResponseChunkType) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	s.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "json":
		var valueUnmarshaler struct {
			Json *TypeReference `json:"value,omitempty"`
		}
		if err := json.Unmarshal(data, &valueUnmarshaler); err != nil {
			return err
		}
		s.Json = valueUnmarshaler.Json
	case "text":
		value := make(map[string]any)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.Text = value
	}
	return nil
}

func (s StreamingResponseChunkType) MarshalJSON() ([]byte, error) {
	switch s.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", s.Type, s)
	case "json":
		var marshaler = struct {
			Type string         `json:"type"`
			Json *TypeReference `json:"value,omitempty"`
		}{
			Type: s.Type,
			Json: s.Json,
		}
		return json.Marshal(marshaler)
	case "text":
		var marshaler = struct {
			Type string `json:"type"`
			Text any    `json:"text,omitempty"`
		}{
			Type: s.Type,
			Text: s.Text,
		}
		return json.Marshal(marshaler)
	}
}

type StreamingResponseChunkTypeVisitor interface {
	VisitJson(*TypeReference) error
	VisitText(any) error
}

func (s *StreamingResponseChunkType) Accept(v StreamingResponseChunkTypeVisitor) error {
	switch s.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", s.Type, s)
	case "json":
		return v.VisitJson(s.Json)
	case "text":
		return v.VisitText(s.Text)
	}
}
