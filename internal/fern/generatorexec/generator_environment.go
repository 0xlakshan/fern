// Generated by Fern. Do not edit.

package generatorexec

import (
	json "encoding/json"
	fmt "fmt"
)

type GeneratorEnvironment struct {
	Type   string
	Local  any
	Remote *RemoteGeneratorEnvironment
}

func (g *GeneratorEnvironment) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"_type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	g.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "local":
		value := make(map[string]any)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		g.Local = value
	case "remote":
		value := new(RemoteGeneratorEnvironment)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		g.Remote = value
	}
	return nil
}

func (g GeneratorEnvironment) MarshalJSON() ([]byte, error) {
	switch g.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", g.Type, g)
	case "local":
		var marshaler = struct {
			Type  string `json:"_type"`
			Local any    `json:"local"`
		}{
			Type:  g.Type,
			Local: g.Local,
		}
		return json.Marshal(marshaler)
	case "remote":
		var marshaler = struct {
			Type string `json:"_type"`
			*RemoteGeneratorEnvironment
		}{
			Type:                       g.Type,
			RemoteGeneratorEnvironment: g.Remote,
		}
		return json.Marshal(marshaler)
	}
}

type GeneratorEnvironmentVisitor interface {
	VisitLocal(any) error
	VisitRemote(*RemoteGeneratorEnvironment) error
}

func (g *GeneratorEnvironment) Accept(v GeneratorEnvironmentVisitor) error {
	switch g.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", g.Type, g)
	case "local":
		return v.VisitLocal(g.Local)
	case "remote":
		return v.VisitRemote(g.Remote)
	}
}
