// Generated by Fern. Do not edit.

package generatorexec

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
)

type RegistryType uint8

const (
	RegistryTypeNpm RegistryType = iota + 1
	RegistryTypeMaven
	RegistryTypePypi
)

func (r RegistryType) String() string {
	switch r {
	default:
		return strconv.Itoa(int(r))
	case RegistryTypeNpm:
		return "NPM"
	case RegistryTypeMaven:
		return "MAVEN"
	case RegistryTypePypi:
		return "PYPI"
	}
}

func (r RegistryType) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", r.String())), nil
}

func (r *RegistryType) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "NPM":
		value := RegistryTypeNpm
		*r = value
	case "MAVEN":
		value := RegistryTypeMaven
		*r = value
	case "PYPI":
		value := RegistryTypePypi
		*r = value
	}
	return nil
}
