// Generated by Fern. Do not edit.

package generatorexec

import (
	json "encoding/json"
	fmt "fmt"
)

type GeneratorPublishTarget struct {
	Type    string
	Maven   *MavenRegistryConfigV2
	Npm     *NpmRegistryConfigV2
	Pypi    *PypiRegistryConfig
	Postman *PostmanConfig
}

func NewGeneratorPublishTargetFromMaven(value *MavenRegistryConfigV2) *GeneratorPublishTarget {
	return &GeneratorPublishTarget{Type: "maven", Maven: value}
}

func NewGeneratorPublishTargetFromNpm(value *NpmRegistryConfigV2) *GeneratorPublishTarget {
	return &GeneratorPublishTarget{Type: "npm", Npm: value}
}

func NewGeneratorPublishTargetFromPypi(value *PypiRegistryConfig) *GeneratorPublishTarget {
	return &GeneratorPublishTarget{Type: "pypi", Pypi: value}
}

func NewGeneratorPublishTargetFromPostman(value *PostmanConfig) *GeneratorPublishTarget {
	return &GeneratorPublishTarget{Type: "postman", Postman: value}
}

func (g *GeneratorPublishTarget) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	g.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "maven":
		value := new(MavenRegistryConfigV2)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		g.Maven = value
	case "npm":
		value := new(NpmRegistryConfigV2)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		g.Npm = value
	case "pypi":
		value := new(PypiRegistryConfig)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		g.Pypi = value
	case "postman":
		value := new(PostmanConfig)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		g.Postman = value
	}
	return nil
}

func (g GeneratorPublishTarget) MarshalJSON() ([]byte, error) {
	switch g.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", g.Type, g)
	case "maven":
		var marshaler = struct {
			Type string `json:"type"`
			*MavenRegistryConfigV2
		}{
			Type:                  g.Type,
			MavenRegistryConfigV2: g.Maven,
		}
		return json.Marshal(marshaler)
	case "npm":
		var marshaler = struct {
			Type string `json:"type"`
			*NpmRegistryConfigV2
		}{
			Type:                g.Type,
			NpmRegistryConfigV2: g.Npm,
		}
		return json.Marshal(marshaler)
	case "pypi":
		var marshaler = struct {
			Type string `json:"type"`
			*PypiRegistryConfig
		}{
			Type:               g.Type,
			PypiRegistryConfig: g.Pypi,
		}
		return json.Marshal(marshaler)
	case "postman":
		var marshaler = struct {
			Type string `json:"type"`
			*PostmanConfig
		}{
			Type:          g.Type,
			PostmanConfig: g.Postman,
		}
		return json.Marshal(marshaler)
	}
}

type GeneratorPublishTargetVisitor interface {
	VisitMaven(*MavenRegistryConfigV2) error
	VisitNpm(*NpmRegistryConfigV2) error
	VisitPypi(*PypiRegistryConfig) error
	VisitPostman(*PostmanConfig) error
}

func (g *GeneratorPublishTarget) Accept(v GeneratorPublishTargetVisitor) error {
	switch g.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", g.Type, g)
	case "maven":
		return v.VisitMaven(g.Maven)
	case "npm":
		return v.VisitNpm(g.Npm)
	case "pypi":
		return v.VisitPypi(g.Pypi)
	case "postman":
		return v.VisitPostman(g.Postman)
	}
}
