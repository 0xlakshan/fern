// Generated by Fern. Do not edit.

package api

import (
	bytes "bytes"
	context "context"
	json "encoding/json"
	errors "errors"
	fmt "fmt"
	core "github.com/fern-api/fern-go/internal/testdata/sdk/error/fixtures/core"
	io "io"
	http "net/http"
	strings "strings"
)

type UserClient interface {
	Get(ctx context.Context, id string) (string, error)
	Update(ctx context.Context, id string, request string) (string, error)
}

func NewUserClient(baseURL string, httpClient core.HTTPClient, opts ...core.ClientOption) UserClient {
	options := new(core.ClientOptions)
	for _, opt := range opts {
		opt(options)
	}
	return &userClient{
		baseURL:    strings.TrimRight(baseURL, "/"),
		httpClient: httpClient,
		header:     options.ToHeader(),
	}
}

type userClient struct {
	baseURL    string
	httpClient core.HTTPClient
	header     http.Header
}

func (u *userClient) Get(ctx context.Context, id string) (string, error) {
	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 404:
			value := new(UserNotFoundError)
			if err := decoder.Decode(value); err != nil {
				return err
			}
			value.APIError = apiError
			return value
		case 501:
			value := new(NotImplementedError)
			if err := decoder.Decode(value); err != nil {
				return err
			}
			value.APIError = apiError
			return value
		case 418:
			value := new(TeapotError)
			if err := decoder.Decode(value); err != nil {
				return err
			}
			value.APIError = apiError
			return value
		case 426:
			value := new(UpgradeError)
			if err := decoder.Decode(value); err != nil {
				return err
			}
			value.APIError = apiError
			return value
		}
		return apiError
	}

	headers := u.header.Clone()
	endpointURL := fmt.Sprintf(u.baseURL+"/"+"%v", id)
	var response string
	if err := core.DoRequest(
		ctx,
		u.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		headers,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

func (u *userClient) Update(ctx context.Context, id string, request string) (string, error) {
	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 426:
			value := new(UpgradeError)
			if err := decoder.Decode(value); err != nil {
				return err
			}
			value.APIError = apiError
			return value
		}
		return apiError
	}

	headers := u.header.Clone()
	endpointURL := fmt.Sprintf(u.baseURL+"/"+"%v", id)
	var response string
	if err := core.DoRequest(
		ctx,
		u.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		headers,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}
