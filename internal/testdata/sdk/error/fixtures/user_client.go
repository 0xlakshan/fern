// Generated by Fern. Do not edit.

package api

import (
	json "encoding/json"
	errors "errors"
	io "io"
)

type UserClient interface{}

type getEndpoint struct {
	url    string
	client HTTPClient
}

func newgetEndpoint(url string, client HTTPClient) *getEndpoint {
	return &getEndpoint{
		url:    url,
		client: client,
	}
}

func (g *getEndpoint) decodeError(statusCode int, body io.Reader) error {
	decoder := json.NewDecoder(body)
	switch statusCode {
	case 404:
		value := new(UserNotFoundError)
		if err := decoder.Decode(value); err != nil {
			return err
		}
		value.StatusCode = statusCode
		return value
	case 501:
		value := new(NotImplementedError)
		if err := decoder.Decode(value); err != nil {
			return err
		}
		value.StatusCode = statusCode
		return value
	case 418:
		value := new(TeapotError)
		if err := decoder.Decode(value); err != nil {
			return err
		}
		value.StatusCode = statusCode
		return value
	case 426:
		value := new(UpgradeError)
		if err := decoder.Decode(value); err != nil {
			return err
		}
		value.StatusCode = statusCode
		return value
	}
	bytes, err := io.ReadAll(body)
	if err != nil {
		return err
	}
	return errors.New(string(bytes))
}

type updateEndpoint struct {
	url    string
	client HTTPClient
}

func newupdateEndpoint(url string, client HTTPClient) *updateEndpoint {
	return &updateEndpoint{
		url:    url,
		client: client,
	}
}

func (u *updateEndpoint) decodeError(statusCode int, body io.Reader) error {
	decoder := json.NewDecoder(body)
	switch statusCode {
	case 426:
		value := new(UpgradeError)
		if err := decoder.Decode(value); err != nil {
			return err
		}
		value.StatusCode = statusCode
		return value
	}
	bytes, err := io.ReadAll(body)
	if err != nil {
		return err
	}
	return errors.New(string(bytes))
}
