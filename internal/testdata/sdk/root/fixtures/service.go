// Generated by Fern. Do not edit.

package api

import (
	context "context"
	core "github.com/fern-api/fern-go/internal/testdata/sdk/root/fixtures/core"
	path "path"
)

type Service interface {
	GetFoo(ctx context.Context) ([]*Foo, error)
	PostFoo(ctx context.Context, request *Bar) (*Foo, error)
	GetFooFooId(ctx context.Context, fooId Id) (*Foo, error)
	PatchFooFooId(ctx context.Context, fooId Id, request *Foo) (*Foo, error)
	DeleteFooFooId(ctx context.Context, fooId Id) error
	PostFooFooIdRun(ctx context.Context, fooId Id) (*Foo, error)
	PostFooBatchCreate(ctx context.Context, request []*Bar) ([]*Foo, error)
	PostFooBatchDelete(ctx context.Context, request []Id) error
}

func NewClient(baseURL string, httpClient core.HTTPClient, opts ...core.ClientOption) (Service, error) {
	options := new(core.ClientOptions)
	for _, opt := range opts {
		opt(options)
	}
	return &client{
		getFooEndpoint:             newGetFooEndpoint(path.Join(baseURL, "foo"), httpClient, options),
		postFooEndpoint:            newPostFooEndpoint(path.Join(baseURL, "foo"), httpClient, options),
		getFooFooIdEndpoint:        newGetFooFooIdEndpoint(path.Join(baseURL, "foo/%v"), httpClient, options),
		patchFooFooIdEndpoint:      newPatchFooFooIdEndpoint(path.Join(baseURL, "foo/%v"), httpClient, options),
		deleteFooFooIdEndpoint:     newDeleteFooFooIdEndpoint(path.Join(baseURL, "foo/%v"), httpClient, options),
		postFooFooIdRunEndpoint:    newPostFooFooIdRunEndpoint(path.Join(baseURL, "foo/%v/run"), httpClient, options),
		postFooBatchCreateEndpoint: newPostFooBatchCreateEndpoint(path.Join(baseURL, "foo/batch-create"), httpClient, options),
		postFooBatchDeleteEndpoint: newPostFooBatchDeleteEndpoint(path.Join(baseURL, "foo/batch-delete"), httpClient, options),
	}, nil
}

type client struct {
	getFooEndpoint             *getFooEndpoint
	postFooEndpoint            *postFooEndpoint
	getFooFooIdEndpoint        *getFooFooIdEndpoint
	patchFooFooIdEndpoint      *patchFooFooIdEndpoint
	deleteFooFooIdEndpoint     *deleteFooFooIdEndpoint
	postFooFooIdRunEndpoint    *postFooFooIdRunEndpoint
	postFooBatchCreateEndpoint *postFooBatchCreateEndpoint
	postFooBatchDeleteEndpoint *postFooBatchDeleteEndpoint
}

func (g *client) GetFoo(ctx context.Context) ([]*Foo, error) {
	return g.getFooEndpoint.Call(ctx)
}

func (p *client) PostFoo(ctx context.Context, request *Bar) (*Foo, error) {
	return p.postFooEndpoint.Call(ctx, request)
}

func (g *client) GetFooFooId(ctx context.Context, fooId Id) (*Foo, error) {
	return g.getFooFooIdEndpoint.Call(ctx, fooId)
}

func (p *client) PatchFooFooId(ctx context.Context, fooId Id, request *Foo) (*Foo, error) {
	return p.patchFooFooIdEndpoint.Call(ctx, fooId, request)
}

func (d *client) DeleteFooFooId(ctx context.Context, fooId Id) error {
	return d.deleteFooFooIdEndpoint.Call(ctx, fooId)
}

func (p *client) PostFooFooIdRun(ctx context.Context, fooId Id) (*Foo, error) {
	return p.postFooFooIdRunEndpoint.Call(ctx, fooId)
}

func (p *client) PostFooBatchCreate(ctx context.Context, request []*Bar) ([]*Foo, error) {
	return p.postFooBatchCreateEndpoint.Call(ctx, request)
}

func (p *client) PostFooBatchDelete(ctx context.Context, request []Id) error {
	return p.postFooBatchDeleteEndpoint.Call(ctx, request)
}
