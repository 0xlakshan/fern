// This file was auto-generated by Fern from our API Definition.

package client

import (
	core "github.com/fern-api/fern-go/internal/testdata/sdk/headers/fixtures/core"
	uuid "github.com/gofrs/uuid/v5"
	http "net/http"
	time "time"
)

// WithBaseURL sets the client's base URL, overriding the
// default environment, if any.
func WithBaseURL(baseURL string) core.ClientOption {
	return func(opts *core.ClientOptions) {
		opts.BaseURL = baseURL
	}
}

// WithHTTPClient uses the given HTTPClient to issue all HTTP requests.
func WithHTTPClient(httpClient core.HTTPClient) core.ClientOption {
	return func(opts *core.ClientOptions) {
		opts.HTTPClient = httpClient
	}
}

// WithHTTPHeader adds the given http.Header to all requests
// issued by the client.
func WithHTTPHeader(httpHeader http.Header) core.ClientOption {
	return func(opts *core.ClientOptions) {
		// Clone the headers so they can't be modified after the option call.
		opts.HTTPHeader = httpHeader.Clone()
	}
}

// WithAuthCustom sets the custom auth header on every request.
func WithAuthCustom(custom *[]byte) core.ClientOption {
	return func(opts *core.ClientOptions) {
		opts.Custom = custom
	}
}

// WithHeaderXApiName sets the xApiName header on every request.
func WithHeaderXApiName(xApiName string) core.ClientOption {
	return func(opts *core.ClientOptions) {
		opts.XApiName = xApiName
	}
}

// WithHeaderXApiId sets the xApiId header on every request.
func WithHeaderXApiId(xApiId uuid.UUID) core.ClientOption {
	return func(opts *core.ClientOptions) {
		opts.XApiId = xApiId
	}
}

// WithHeaderXApiDatetime sets the xApiDatetime header on every request.
func WithHeaderXApiDatetime(xApiDatetime time.Time) core.ClientOption {
	return func(opts *core.ClientOptions) {
		opts.XApiDatetime = xApiDatetime
	}
}

// WithHeaderXApiDate sets the xApiDate header on every request.
func WithHeaderXApiDate(xApiDate time.Time) core.ClientOption {
	return func(opts *core.ClientOptions) {
		opts.XApiDate = xApiDate
	}
}

// WithHeaderXApiBytes sets the xApiBytes header on every request.
func WithHeaderXApiBytes(xApiBytes []byte) core.ClientOption {
	return func(opts *core.ClientOptions) {
		opts.XApiBytes = xApiBytes
	}
}

// WithHeaderXApiOptionalName sets the xApiOptionalName header on every request.
func WithHeaderXApiOptionalName(xApiOptionalName *string) core.ClientOption {
	return func(opts *core.ClientOptions) {
		opts.XApiOptionalName = xApiOptionalName
	}
}

// WithHeaderXApiOptionalId sets the xApiOptionalId header on every request.
func WithHeaderXApiOptionalId(xApiOptionalId *uuid.UUID) core.ClientOption {
	return func(opts *core.ClientOptions) {
		opts.XApiOptionalId = xApiOptionalId
	}
}

// WithHeaderXApiOptionalDatetime sets the xApiOptionalDatetime header on every request.
func WithHeaderXApiOptionalDatetime(xApiOptionalDatetime *time.Time) core.ClientOption {
	return func(opts *core.ClientOptions) {
		opts.XApiOptionalDatetime = xApiOptionalDatetime
	}
}

// WithHeaderXApiOptionalDate sets the xApiOptionalDate header on every request.
func WithHeaderXApiOptionalDate(xApiOptionalDate *time.Time) core.ClientOption {
	return func(opts *core.ClientOptions) {
		opts.XApiOptionalDate = xApiOptionalDate
	}
}

// WithHeaderXApiOptionalBytes sets the xApiOptionalBytes header on every request.
func WithHeaderXApiOptionalBytes(xApiOptionalBytes *[]byte) core.ClientOption {
	return func(opts *core.ClientOptions) {
		opts.XApiOptionalBytes = xApiOptionalBytes
	}
}
