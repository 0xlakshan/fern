// This file was auto-generated by Fern from our API Definition.

package api

import (
	context "context"
	base64 "encoding/base64"
	fmt "fmt"
	core "github.com/fern-api/fern-go/internal/testdata/sdk/headers/fixtures/core"
	http "net/http"
	time "time"
)

type UserClient interface {
	SetName(ctx context.Context, userId string, request *SetNameRequest) (string, error)
}

func NewUserClient(opts ...core.ClientOption) UserClient {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &userClient{
		baseURL:    options.BaseURL,
		httpClient: options.HTTPClient,
		header:     options.ToHeader(),
	}
}

type userClient struct {
	baseURL    string
	httpClient core.HTTPClient
	header     http.Header
}

func (u *userClient) SetName(ctx context.Context, userId string, request *SetNameRequest) (string, error) {
	baseURL := ""
	if u.baseURL != "" {
		baseURL = u.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"users/%v/set-name", userId)

	headers := u.header.Clone()
	headers.Add("X-Endpoint-Header", fmt.Sprintf("%v", request.XEndpointHeader))
	headers.Add("X-Endpoint-ID-Header", fmt.Sprintf("%v", request.XEndpointIdHeader))
	headers.Add("X-Endpoint-Date-Header", fmt.Sprintf("%v", request.XEndpointDateHeader.Format("2006-01-02")))
	headers.Add("X-Endpoint-Datetime-Header", fmt.Sprintf("%v", request.XEndpointDatetimeHeader.Format(time.RFC3339)))
	headers.Add("X-Endpoint-Bytes-Header", fmt.Sprintf("%v", base64.StdEncoding.EncodeToString(request.XEndpointBytesHeader)))
	if request.XEndpointOptionalHeader != nil {
		headers.Add("X-Endpoint-Optional-Header", fmt.Sprintf("%v", *request.XEndpointOptionalHeader))
	}
	if request.XEndpointOptionalIdHeader != nil {
		headers.Add("X-Endpoint-Optional-ID-Header", fmt.Sprintf("%v", *request.XEndpointOptionalIdHeader))
	}
	if request.XEndpointOptionalDateHeader != nil {
		headers.Add("X-Endpoint-Optional-Date-Header", fmt.Sprintf("%v", request.XEndpointOptionalDateHeader.Format("2006-01-02")))
	}
	if request.XEndpointOptionalDatetimeHeader != nil {
		headers.Add("X-Endpoint-Optional-Datetime-Header", fmt.Sprintf("%v", request.XEndpointOptionalDatetimeHeader.Format(time.RFC3339)))
	}
	if request.XEndpointOptionalBytesHeader != nil {
		headers.Add("X-Endpoint-Optional-Bytes-Header", fmt.Sprintf("%v", base64.StdEncoding.EncodeToString(*request.XEndpointOptionalBytesHeader)))
	}
	headers.Add("X-Endpoint-Fern-Header", fmt.Sprintf("%v", "fern"))

	var response string
	if err := core.DoRequest(
		ctx,
		u.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		headers,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}
