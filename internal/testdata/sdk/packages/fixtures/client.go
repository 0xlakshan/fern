// Generated by Fern. Do not edit.

package api

import (
	context "context"
	core "github.com/fern-api/fern-go/internal/testdata/sdk/packages/fixtures/core"
	user "github.com/fern-api/fern-go/internal/testdata/sdk/packages/fixtures/user"
	strings "strings"
)

type Client interface {
	GetFoo(ctx context.Context) ([]*Foo, error)
	PostFoo(ctx context.Context, request *Foo) (*Foo, error)
	User() user.Client
}

func NewClient(baseURL string, httpClient core.HTTPClient, opts ...core.ClientOption) Client {
	options := new(core.ClientOptions)
	for _, opt := range opts {
		opt(options)
	}
	baseURL = strings.TrimRight(baseURL, "/")
	return &client{
		getFooEndpoint:  newGetFooEndpoint(baseURL+"/"+"foo", httpClient, options),
		postFooEndpoint: newPostFooEndpoint(baseURL+"/"+"foo", httpClient, options),
		userClient:      user.NewClient(baseURL, httpClient, opts...),
	}
}

type client struct {
	getFooEndpoint  *getFooEndpoint
	postFooEndpoint *postFooEndpoint
	userClient      user.Client
}

func (c *client) GetFoo(ctx context.Context) ([]*Foo, error) {
	return c.getFooEndpoint.Call(ctx)
}

func (c *client) PostFoo(ctx context.Context, request *Foo) (*Foo, error) {
	return c.postFooEndpoint.Call(ctx, request)
}

func (c *client) User() user.Client {
	return c.userClient
}
