// Generated by Fern. Do not edit.

package user

import (
	context "context"
	core "github.com/fern-api/fern-go/internal/testdata/sdk/packages/fixtures/core"
	notification "github.com/fern-api/fern-go/internal/testdata/sdk/packages/fixtures/user/notification"
	strings "strings"
)

type Client interface {
	GetUser(ctx context.Context, userId string) (*User, error)
	Notification() notification.Client
	User() UserClient
}

func NewClient(baseURL string, httpClient core.HTTPClient, opts ...core.ClientOption) Client {
	options := new(core.ClientOptions)
	for _, opt := range opts {
		opt(options)
	}
	baseURL = strings.TrimRight(baseURL, "/")
	return &client{
		getUserEndpoint:    newGetUserEndpoint(baseURL+"/"+"users/%v", httpClient, options),
		notificationClient: notification.NewClient(baseURL, httpClient, opts...),
		userClient:         NewUserClient(baseURL, httpClient, opts...),
	}
}

type client struct {
	getUserEndpoint    *getUserEndpoint
	notificationClient notification.Client
	userClient         UserClient
}

func (c *client) GetUser(ctx context.Context, userId string) (*User, error) {
	return c.getUserEndpoint.Call(ctx, userId)
}

func (c *client) Notification() notification.Client {
	return c.notificationClient
}

func (c *client) User() UserClient {
	return c.userClient
}
