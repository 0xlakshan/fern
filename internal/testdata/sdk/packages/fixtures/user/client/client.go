// This file was auto-generated by Fern from our API Definition.

package client

import (
	context "context"
	fmt "fmt"
	core "github.com/fern-api/fern-go/internal/testdata/sdk/packages/fixtures/core"
	option "github.com/fern-api/fern-go/internal/testdata/sdk/packages/fixtures/option"
	fixturesuser "github.com/fern-api/fern-go/internal/testdata/sdk/packages/fixtures/user"
	notificationclient "github.com/fern-api/fern-go/internal/testdata/sdk/packages/fixtures/user/notification/client"
	useruser "github.com/fern-api/fern-go/internal/testdata/sdk/packages/fixtures/user/user"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header

	Notification *notificationclient.Client
	User         *useruser.Client
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL:      options.BaseURL,
		caller:       core.NewCaller(options.HTTPClient),
		header:       options.ToHeader(),
		Notification: notificationclient.NewClient(opts...),
		User:         useruser.NewClient(opts...),
	}
}

func (c *Client) GetUser(ctx context.Context, user string) (*fixturesuser.User, error) {
	baseURL := "https://api.foo.io/v1"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"users/%v", user)

	var response *fixturesuser.User
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:      endpointURL,
			Method:   http.MethodGet,
			Headers:  c.header,
			Response: &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
