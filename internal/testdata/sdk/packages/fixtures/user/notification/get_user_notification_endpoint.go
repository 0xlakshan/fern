// Generated by Fern. Do not edit.

package notification

import (
	context "context"
	errors "errors"
	fmt "fmt"
	core "github.com/fern-api/fern-go/internal/testdata/sdk/packages/fixtures/core"
	io "io"
	http "net/http"
)

type getUserNotificationEndpoint struct {
	url        string
	httpClient core.HTTPClient
	header     http.Header
}

func newGetUserNotificationEndpoint(url string, httpClient core.HTTPClient, clientOptions *core.ClientOptions) *getUserNotificationEndpoint {
	return &getUserNotificationEndpoint{
		url:        url,
		httpClient: httpClient,
		header:     clientOptions.ToHeader(),
	}
}

func (g *getUserNotificationEndpoint) decodeError(statusCode int, body io.Reader) error {
	bytes, err := io.ReadAll(body)
	if err != nil {
		return err
	}
	return errors.New(string(bytes))
}

func (g *getUserNotificationEndpoint) Call(ctx context.Context, userId string, notificationId string) (*Notification, error) {
	endpointURL := fmt.Sprintf(g.url, userId, notificationId)
	response := new(Notification)
	if err := core.DoRequest(
		ctx,
		g.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		g.header,
		g.decodeError,
	); err != nil {
		return response, err
	}
	return response, nil
}
