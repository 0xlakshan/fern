// This file was auto-generated by Fern from our API Definition.

package notification

import (
	context "context"
	fmt "fmt"
	core "github.com/fern-api/fern-go/internal/testdata/sdk/packages/fixtures/core"
	http "net/http"
)

type Client interface {
	GetUserNotification(ctx context.Context, userId string, notificationId string) (*Notification, error)
	Notification() NotificationClient
}

func NewClient(opts ...core.ClientOption) Client {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &client{
		baseURL:            options.BaseURL,
		httpClient:         options.HTTPClient,
		header:             options.ToHeader(),
		notificationClient: NewNotificationClient(opts...),
	}
}

type client struct {
	baseURL            string
	httpClient         core.HTTPClient
	header             http.Header
	notificationClient NotificationClient
}

func (c *client) GetUserNotification(ctx context.Context, userId string, notificationId string) (*Notification, error) {
	endpointURL := fmt.Sprintf(c.baseURL+"/"+"users/%v/notifications/%v", userId, notificationId)

	response := new(Notification)
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

func (c *client) Notification() NotificationClient {
	return c.notificationClient
}
