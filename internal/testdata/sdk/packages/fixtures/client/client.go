// This file was auto-generated by Fern from our API Definition.

package client

import (
	bytes "bytes"
	context "context"
	json "encoding/json"
	errors "errors"
	fixtures "github.com/fern-api/fern-go/internal/testdata/sdk/packages/fixtures"
	core "github.com/fern-api/fern-go/internal/testdata/sdk/packages/fixtures/core"
	userclient "github.com/fern-api/fern-go/internal/testdata/sdk/packages/fixtures/user/client"
	io "io"
	http "net/http"
)

type Client interface {
	GetFoo(ctx context.Context) ([]*fixtures.Foo, error)
	PostFoo(ctx context.Context, request *fixtures.Foo) (*fixtures.Foo, error)
	User() userclient.Client
}

func NewClient(opts ...core.ClientOption) Client {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &client{
		baseURL:    options.BaseURL,
		httpClient: options.HTTPClient,
		header:     options.ToHeader(),
		userClient: userclient.NewClient(opts...),
	}
}

type client struct {
	baseURL    string
	httpClient core.HTTPClient
	header     http.Header
	userClient userclient.Client
}

func (c *client) GetFoo(ctx context.Context) ([]*fixtures.Foo, error) {
	baseURL := "https://api.foo.io/v1"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "foo"

	var response []*fixtures.Foo
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

func (c *client) PostFoo(ctx context.Context, request *fixtures.Foo) (*fixtures.Foo, error) {
	baseURL := "https://api.foo.io/v1"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "foo"

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 409:
			value := new(fixtures.ConflictError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 422:
			value := new(fixtures.UnprocessableEntityError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	var response *fixtures.Foo
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		false,
		c.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

func (c *client) User() userclient.Client {
	return c.userClient
}
