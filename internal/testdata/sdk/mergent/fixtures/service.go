// Generated by Fern. Do not edit.

package api

import (
	context "context"
	core "github.com/fern-api/fern-go/internal/testdata/sdk/mergent/fixtures/core"
	strings "strings"
)

type Service interface {
	GetTasks(ctx context.Context) ([]*Task, error)
	PostTasks(ctx context.Context, request *TaskNew) (*Task, error)
	GetTasksTaskId(ctx context.Context, taskId Id) (*Task, error)
	PatchTasksTaskId(ctx context.Context, taskId Id, request *Task) (*Task, error)
	DeleteTasksTaskId(ctx context.Context, taskId Id) error
	PostTasksTaskIdRun(ctx context.Context, taskId Id) (*Task, error)
	PostTasksBatchCreate(ctx context.Context, request []*TaskNew) ([]*Task, error)
	PostTasksBatchDelete(ctx context.Context, request []Id) error
	GetSchedules(ctx context.Context) ([]*Schedule, error)
	PostSchedules(ctx context.Context, request *ScheduleNew) (*Schedule, error)
	GetSchedulesScheduleId(ctx context.Context, scheduleId Id) (*Schedule, error)
	PatchSchedulesScheduleId(ctx context.Context, scheduleId Id, request *Schedule) (*Schedule, error)
	DeleteSchedulesScheduleId(ctx context.Context, scheduleId Id) error
	GetSchedulesScheduleIdTasks(ctx context.Context, scheduleId Id) ([]*Task, error)
}

func NewClient(baseURL string, httpClient core.HTTPClient, opts ...core.ClientOption) (Service, error) {
	options := new(core.ClientOptions)
	for _, opt := range opts {
		opt(options)
	}
	baseURL = strings.TrimRight(baseURL, "/")
	return &client{
		getTasksEndpoint:                    newGetTasksEndpoint(baseURL+"/"+"tasks", httpClient, options),
		postTasksEndpoint:                   newPostTasksEndpoint(baseURL+"/"+"tasks", httpClient, options),
		getTasksTaskIdEndpoint:              newGetTasksTaskIdEndpoint(baseURL+"/"+"tasks/%v", httpClient, options),
		patchTasksTaskIdEndpoint:            newPatchTasksTaskIdEndpoint(baseURL+"/"+"tasks/%v", httpClient, options),
		deleteTasksTaskIdEndpoint:           newDeleteTasksTaskIdEndpoint(baseURL+"/"+"tasks/%v", httpClient, options),
		postTasksTaskIdRunEndpoint:          newPostTasksTaskIdRunEndpoint(baseURL+"/"+"tasks/%v/run", httpClient, options),
		postTasksBatchCreateEndpoint:        newPostTasksBatchCreateEndpoint(baseURL+"/"+"tasks/batch-create", httpClient, options),
		postTasksBatchDeleteEndpoint:        newPostTasksBatchDeleteEndpoint(baseURL+"/"+"tasks/batch-delete", httpClient, options),
		getSchedulesEndpoint:                newGetSchedulesEndpoint(baseURL+"/"+"schedules", httpClient, options),
		postSchedulesEndpoint:               newPostSchedulesEndpoint(baseURL+"/"+"schedules", httpClient, options),
		getSchedulesScheduleIdEndpoint:      newGetSchedulesScheduleIdEndpoint(baseURL+"/"+"schedules/%v", httpClient, options),
		patchSchedulesScheduleIdEndpoint:    newPatchSchedulesScheduleIdEndpoint(baseURL+"/"+"schedules/%v", httpClient, options),
		deleteSchedulesScheduleIdEndpoint:   newDeleteSchedulesScheduleIdEndpoint(baseURL+"/"+"schedules/%v", httpClient, options),
		getSchedulesScheduleIdTasksEndpoint: newGetSchedulesScheduleIdTasksEndpoint(baseURL+"/"+"schedules/%v/tasks", httpClient, options),
	}, nil
}

type client struct {
	getTasksEndpoint                    *getTasksEndpoint
	postTasksEndpoint                   *postTasksEndpoint
	getTasksTaskIdEndpoint              *getTasksTaskIdEndpoint
	patchTasksTaskIdEndpoint            *patchTasksTaskIdEndpoint
	deleteTasksTaskIdEndpoint           *deleteTasksTaskIdEndpoint
	postTasksTaskIdRunEndpoint          *postTasksTaskIdRunEndpoint
	postTasksBatchCreateEndpoint        *postTasksBatchCreateEndpoint
	postTasksBatchDeleteEndpoint        *postTasksBatchDeleteEndpoint
	getSchedulesEndpoint                *getSchedulesEndpoint
	postSchedulesEndpoint               *postSchedulesEndpoint
	getSchedulesScheduleIdEndpoint      *getSchedulesScheduleIdEndpoint
	patchSchedulesScheduleIdEndpoint    *patchSchedulesScheduleIdEndpoint
	deleteSchedulesScheduleIdEndpoint   *deleteSchedulesScheduleIdEndpoint
	getSchedulesScheduleIdTasksEndpoint *getSchedulesScheduleIdTasksEndpoint
}

func (g *client) GetTasks(ctx context.Context) ([]*Task, error) {
	return g.getTasksEndpoint.Call(ctx)
}

func (p *client) PostTasks(ctx context.Context, request *TaskNew) (*Task, error) {
	return p.postTasksEndpoint.Call(ctx, request)
}

func (g *client) GetTasksTaskId(ctx context.Context, taskId Id) (*Task, error) {
	return g.getTasksTaskIdEndpoint.Call(ctx, taskId)
}

func (p *client) PatchTasksTaskId(ctx context.Context, taskId Id, request *Task) (*Task, error) {
	return p.patchTasksTaskIdEndpoint.Call(ctx, taskId, request)
}

func (d *client) DeleteTasksTaskId(ctx context.Context, taskId Id) error {
	return d.deleteTasksTaskIdEndpoint.Call(ctx, taskId)
}

func (p *client) PostTasksTaskIdRun(ctx context.Context, taskId Id) (*Task, error) {
	return p.postTasksTaskIdRunEndpoint.Call(ctx, taskId)
}

func (p *client) PostTasksBatchCreate(ctx context.Context, request []*TaskNew) ([]*Task, error) {
	return p.postTasksBatchCreateEndpoint.Call(ctx, request)
}

func (p *client) PostTasksBatchDelete(ctx context.Context, request []Id) error {
	return p.postTasksBatchDeleteEndpoint.Call(ctx, request)
}

func (g *client) GetSchedules(ctx context.Context) ([]*Schedule, error) {
	return g.getSchedulesEndpoint.Call(ctx)
}

func (p *client) PostSchedules(ctx context.Context, request *ScheduleNew) (*Schedule, error) {
	return p.postSchedulesEndpoint.Call(ctx, request)
}

func (g *client) GetSchedulesScheduleId(ctx context.Context, scheduleId Id) (*Schedule, error) {
	return g.getSchedulesScheduleIdEndpoint.Call(ctx, scheduleId)
}

func (p *client) PatchSchedulesScheduleId(ctx context.Context, scheduleId Id, request *Schedule) (*Schedule, error) {
	return p.patchSchedulesScheduleIdEndpoint.Call(ctx, scheduleId, request)
}

func (d *client) DeleteSchedulesScheduleId(ctx context.Context, scheduleId Id) error {
	return d.deleteSchedulesScheduleIdEndpoint.Call(ctx, scheduleId)
}

func (g *client) GetSchedulesScheduleIdTasks(ctx context.Context, scheduleId Id) ([]*Task, error) {
	return g.getSchedulesScheduleIdTasksEndpoint.Call(ctx, scheduleId)
}
