// Generated by Fern. Do not edit.

package api

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
)

// The status of this Task.
type TaskStatus uint8

const (
	TaskStatusQueued TaskStatus = iota + 1
	TaskStatusWorking
	TaskStatusSuccess
	TaskStatusFailure
)

func (t TaskStatus) String() string {
	switch t {
	default:
		return strconv.Itoa(int(t))
	case TaskStatusQueued:
		return "queued"
	case TaskStatusWorking:
		return "working"
	case TaskStatusSuccess:
		return "success"
	case TaskStatusFailure:
		return "failure"
	}
}

func (t TaskStatus) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", t.String())), nil
}

func (t *TaskStatus) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "queued":
		value := TaskStatusQueued
		*t = value
	case "working":
		value := TaskStatusWorking
		*t = value
	case "success":
		value := TaskStatusSuccess
		*t = value
	case "failure":
		value := TaskStatusFailure
		*t = value
	}
	return nil
}
