// This file was auto-generated by Fern from our API Definition.

package user

import (
	context "context"
	fmt "fmt"
	fixtures "github.com/fern-api/fern-go/internal/testdata/sdk/query-params/fixtures"
	core "github.com/fern-api/fern-go/internal/testdata/sdk/query-params/fixtures/core"
	option "github.com/fern-api/fern-go/internal/testdata/sdk/query-params/fixtures/option"
	http "net/http"
	url "net/url"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller:  core.NewCaller(options.HTTPClient),
		header:  options.ToHeader(),
	}
}

func (c *Client) GetAllUsers(ctx context.Context, request *fixtures.GetAllUsersRequest) (string, error) {
	baseURL := ""
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "users/all"

	queryParams := make(url.Values)
	if request.Limit != nil {
		queryParams.Add("limit", fmt.Sprintf("%v", *request.Limit))
	}
	queryParams.Add("key", fmt.Sprintf("%v", "fern"))
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := c.header.Clone()
	headers.Add("X-Endpoint-Header", fmt.Sprintf("%v", request.XEndpointHeader))

	var response string
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:      endpointURL,
			Method:   http.MethodGet,
			Headers:  headers,
			Response: &response,
		},
	); err != nil {
		return "", err
	}
	return response, nil
}
