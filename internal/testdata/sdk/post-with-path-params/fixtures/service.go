// Generated by Fern. Do not edit.

package api

import (
	context "context"
	errors "errors"
	fmt "fmt"
	core "github.com/fern-api/fern-go/internal/testdata/sdk/post-with-path-params/fixtures/core"
	io "io"
	http "net/http"
)

type setNameEndpoint struct {
	url        string
	httpClient core.HTTPClient
	header     http.Header
}

func newSetNameEndpoint(url string, httpClient core.HTTPClient, clientOptions *core.ClientOptions) *setNameEndpoint {
	return &setNameEndpoint{
		url:        url,
		httpClient: httpClient,
		header:     clientOptions.ToHeader(),
	}
}

func (s *setNameEndpoint) decodeError(statusCode int, body io.Reader) error {
	bytes, err := io.ReadAll(body)
	if err != nil {
		return err
	}
	return errors.New(string(bytes))
}

func (s *setNameEndpoint) Call(ctx context.Context, userId string, request string) (string, error) {
	endpointURL := fmt.Sprintf(s.url, userId)
	var response string
	if err := core.DoRequest(
		ctx,
		s.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		response,
		s.header,
		s.decodeError,
	); err != nil {
		return response, err
	}
	return response, nil
}

type setNameV2Endpoint struct {
	url        string
	httpClient core.HTTPClient
	header     http.Header
}

func newSetNameV2Endpoint(url string, httpClient core.HTTPClient, clientOptions *core.ClientOptions) *setNameV2Endpoint {
	return &setNameV2Endpoint{
		url:        url,
		httpClient: httpClient,
		header:     clientOptions.ToHeader(),
	}
}

func (s *setNameV2Endpoint) decodeError(statusCode int, body io.Reader) error {
	bytes, err := io.ReadAll(body)
	if err != nil {
		return err
	}
	return errors.New(string(bytes))
}

func (s *setNameV2Endpoint) Call(ctx context.Context, userId string, request *SetNameRequest) (string, error) {
	endpointURL := fmt.Sprintf(s.url, userId)
	var response string
	if err := core.DoRequest(
		ctx,
		s.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		response,
		s.header,
		s.decodeError,
	); err != nil {
		return response, err
	}
	return response, nil
}

type setNameV3Endpoint struct {
	url        string
	httpClient core.HTTPClient
	header     http.Header
}

func newSetNameV3Endpoint(url string, httpClient core.HTTPClient, clientOptions *core.ClientOptions) *setNameV3Endpoint {
	return &setNameV3Endpoint{
		url:        url,
		httpClient: httpClient,
		header:     clientOptions.ToHeader(),
	}
}

func (s *setNameV3Endpoint) decodeError(statusCode int, body io.Reader) error {
	bytes, err := io.ReadAll(body)
	if err != nil {
		return err
	}
	return errors.New(string(bytes))
}

func (s *setNameV3Endpoint) Call(ctx context.Context, userId string, request *SetNameRequestV3) (*SetNameRequestV3Body, error) {
	endpointURL := fmt.Sprintf(s.url, userId)
	response := new(SetNameRequestV3Body)
	if err := core.DoRequest(
		ctx,
		s.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		response,
		s.header,
		s.decodeError,
	); err != nil {
		return response, err
	}
	return response, nil
}

type setNameV4Endpoint struct {
	url        string
	httpClient core.HTTPClient
	header     http.Header
}

func newSetNameV4Endpoint(url string, httpClient core.HTTPClient, clientOptions *core.ClientOptions) *setNameV4Endpoint {
	return &setNameV4Endpoint{
		url:        url,
		httpClient: httpClient,
		header:     clientOptions.ToHeader(),
	}
}

func (s *setNameV4Endpoint) decodeError(statusCode int, body io.Reader) error {
	bytes, err := io.ReadAll(body)
	if err != nil {
		return err
	}
	return errors.New(string(bytes))
}

func (s *setNameV4Endpoint) Call(ctx context.Context, userId string, request *SetNameRequestV4) (string, error) {
	endpointURL := fmt.Sprintf(s.url, userId)
	var response string
	if err := core.DoRequest(
		ctx,
		s.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		response,
		s.header,
		s.decodeError,
	); err != nil {
		return response, err
	}
	return response, nil
}

type setNameV5Endpoint struct {
	url        string
	httpClient core.HTTPClient
	header     http.Header
}

func newSetNameV5Endpoint(url string, httpClient core.HTTPClient, clientOptions *core.ClientOptions) *setNameV5Endpoint {
	return &setNameV5Endpoint{
		url:        url,
		httpClient: httpClient,
		header:     clientOptions.ToHeader(),
	}
}

func (s *setNameV5Endpoint) decodeError(statusCode int, body io.Reader) error {
	bytes, err := io.ReadAll(body)
	if err != nil {
		return err
	}
	return errors.New(string(bytes))
}

func (s *setNameV5Endpoint) Call(ctx context.Context, userId string, request *SetNameRequestV5) (string, error) {
	endpointURL := fmt.Sprintf(s.url, userId)
	var response string
	if err := core.DoRequest(
		ctx,
		s.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		response,
		s.header,
		s.decodeError,
	); err != nil {
		return response, err
	}
	return response, nil
}

type Service interface {
	SetName(ctx context.Context, userId string, request string) (string, error)
	SetNameV2(ctx context.Context, userId string, request *SetNameRequest) (string, error)
	SetNameV3(ctx context.Context, userId string, request *SetNameRequestV3) (*SetNameRequestV3Body, error)
	SetNameV4(ctx context.Context, userId string, request *SetNameRequestV4) (string, error)
	SetNameV5(ctx context.Context, userId string, request *SetNameRequestV5) (string, error)
}

func NewClient(baseURL string, httpClient core.HTTPClient, opts ...core.ClientOption) (Service, error) {
	options := new(core.ClientOptions)
	for _, opt := range opts {
		opt(options)
	}
	return &client{
		setName:   newSetNameEndpoint(baseURL, httpClient, options).Call,
		setNameV2: newSetNameV2Endpoint(baseURL, httpClient, options).Call,
		setNameV3: newSetNameV3Endpoint(baseURL, httpClient, options).Call,
		setNameV4: newSetNameV4Endpoint(baseURL, httpClient, options).Call,
		setNameV5: newSetNameV5Endpoint(baseURL, httpClient, options).Call,
	}, nil
}

type client struct {
	setName   func(ctx context.Context, userId string, request string) (string, error)
	setNameV2 func(ctx context.Context, userId string, request *SetNameRequest) (string, error)
	setNameV3 func(ctx context.Context, userId string, request *SetNameRequestV3) (*SetNameRequestV3Body, error)
	setNameV4 func(ctx context.Context, userId string, request *SetNameRequestV4) (string, error)
	setNameV5 func(ctx context.Context, userId string, request *SetNameRequestV5) (string, error)
}

func (s *client) SetName(ctx context.Context, userId string, request string) (string, error) {
	return s.setName(ctx, userId, request)
}

func (s *client) SetNameV2(ctx context.Context, userId string, request *SetNameRequest) (string, error) {
	return s.setNameV2(ctx, userId, request)
}

func (s *client) SetNameV3(ctx context.Context, userId string, request *SetNameRequestV3) (*SetNameRequestV3Body, error) {
	return s.setNameV3(ctx, userId, request)
}

func (s *client) SetNameV4(ctx context.Context, userId string, request *SetNameRequestV4) (string, error) {
	return s.setNameV4(ctx, userId, request)
}

func (s *client) SetNameV5(ctx context.Context, userId string, request *SetNameRequestV5) (string, error) {
	return s.setNameV5(ctx, userId, request)
}
