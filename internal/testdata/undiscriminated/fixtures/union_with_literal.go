// Generated by Fern. Do not edit.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

type UnionWithLiteral struct {
	typeName      string
	stringLiteral string
	String        string
}

func (x *UnionWithLiteral) StringLiteral() string {
	return x.stringLiteral
}

func (x *UnionWithLiteral) UnmarshalJSON(data []byte) error {
	var valueStringLiteral string
	if err := json.Unmarshal(data, &valueStringLiteral); err == nil {
		if valueStringLiteral == "fern" {
			x.typeName = "stringLiteral"
			x.stringLiteral = valueStringLiteral
			return nil
		}
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		x.typeName = "string"
		x.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, x)
}

func (x UnionWithLiteral) MarshalJSON() ([]byte, error) {
	switch x.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", x.typeName, x)
	case "stringLiteral":
		return json.Marshal("fern")
	case "string":
		return json.Marshal(x.String)
	}
}

type UnionWithLiteralVisitor interface {
	VisitStringLiteral(string) error
	VisitString(string) error
}

func (x *UnionWithLiteral) Accept(v UnionWithLiteralVisitor) error {
	switch x.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", x.typeName, x)
	case "stringLiteral":
		return v.VisitStringLiteral(x.stringLiteral)
	case "string":
		return v.VisitString(x.String)
	}
}
