// Generated by Fern. Do not edit.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

type UnionWithLiteral struct {
	Type     string
	fern     string
	extended string
	base     string
}

func (x *UnionWithLiteral) Extended() string {
	return x.extended
}

func (x *UnionWithLiteral) Base() string {
	return x.base
}

func (x *UnionWithLiteral) Fern() string {
	return x.fern
}

func (x *UnionWithLiteral) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	x.Type = unmarshaler.Type
	x.extended = "extended"
	x.base = "base"
	switch unmarshaler.Type {
	case "fern":
		x.fern = "fern"
	}
	return nil
}

func (x UnionWithLiteral) MarshalJSON() ([]byte, error) {
	switch x.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", x.Type, x)
	case "fern":
		var marshaler = struct {
			Type     string `json:"type"`
			Extended string `json:"extended"`
			Base     string `json:"base"`
			Fern     string `json:"value"`
		}{
			Type:     x.Type,
			Extended: "extended",
			Base:     "base",
			Fern:     "fern",
		}
		return json.Marshal(marshaler)
	}
}

type UnionWithLiteralVisitor interface {
	VisitFern(string) error
}

func (x *UnionWithLiteral) Accept(v UnionWithLiteralVisitor) error {
	switch x.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", x.Type, x)
	case "fern":
		return v.VisitFern(x.fern)
	}
}
