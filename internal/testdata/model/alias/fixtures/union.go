// Generated by Fern. Do not edit.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

type Union struct {
	Type        string
	FooAlias    *Foo
	BarAlias    BarAlias
	DoubleAlias Double
}

func (u *Union) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	u.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "fooAlias":
		value := new(Foo)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		u.FooAlias = value
	case "barAlias":
		var valueUnmarshaler struct {
			BarAlias BarAlias `json:"barAlias"`
		}
		if err := json.Unmarshal(data, &valueUnmarshaler); err != nil {
			return err
		}
		u.BarAlias = valueUnmarshaler.BarAlias
	case "doubleAlias":
		var valueUnmarshaler struct {
			DoubleAlias Double `json:"doubleAlias"`
		}
		if err := json.Unmarshal(data, &valueUnmarshaler); err != nil {
			return err
		}
		u.DoubleAlias = valueUnmarshaler.DoubleAlias
	}
	return nil
}

func (u Union) MarshalJSON() ([]byte, error) {
	switch u.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", u.Type, u)
	case "fooAlias":
		var marshaler = struct {
			Type string `json:"type"`
			*Foo
		}{
			Type: u.Type,
			Foo:  u.FooAlias,
		}
		return json.Marshal(marshaler)
	case "barAlias":
		var marshaler = struct {
			Type     string   `json:"type"`
			BarAlias BarAlias `json:"barAlias"`
		}{
			Type:     u.Type,
			BarAlias: u.BarAlias,
		}
		return json.Marshal(marshaler)
	case "doubleAlias":
		var marshaler = struct {
			Type        string `json:"type"`
			DoubleAlias Double `json:"doubleAlias"`
		}{
			Type:        u.Type,
			DoubleAlias: u.DoubleAlias,
		}
		return json.Marshal(marshaler)
	}
}

type UnionVisitor interface {
	VisitFooAlias(*Foo) error
	VisitBarAlias(BarAlias) error
	VisitDoubleAlias(Double) error
}

func (u *Union) Accept(v UnionVisitor) error {
	switch u.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", u.Type, u)
	case "fooAlias":
		return v.VisitFooAlias(u.FooAlias)
	case "barAlias":
		return v.VisitBarAlias(u.BarAlias)
	case "doubleAlias":
		return v.VisitDoubleAlias(u.DoubleAlias)
	}
}
