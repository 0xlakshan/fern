// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

type AnotherUnion struct {
	typeName      string
	String        string
	stringLiteral string
	Foo           *Foo
}

func NewAnotherUnionFromString(value string) *AnotherUnion {
	return &AnotherUnion{typeName: "string", String: value}
}

func NewAnotherUnionWithStringLiteral() *AnotherUnion {
	return &AnotherUnion{typeName: "stringLiteral", stringLiteral: "fern"}
}

func NewAnotherUnionFromFoo(value *Foo) *AnotherUnion {
	return &AnotherUnion{typeName: "foo", Foo: value}
}

func (a *AnotherUnion) StringLiteral() string {
	return a.stringLiteral
}

func (a *AnotherUnion) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	var valueStringLiteral string
	if err := json.Unmarshal(data, &valueStringLiteral); err == nil {
		if valueStringLiteral == "fern" {
			a.typeName = "stringLiteral"
			a.stringLiteral = valueStringLiteral
			return nil
		}
	}
	valueFoo := new(Foo)
	if err := json.Unmarshal(data, &valueFoo); err == nil {
		a.typeName = "foo"
		a.Foo = valueFoo
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AnotherUnion) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return json.Marshal(a.String)
	case "stringLiteral":
		return json.Marshal("fern")
	case "foo":
		return json.Marshal(a.Foo)
	}
}

type AnotherUnionVisitor interface {
	VisitString(string) error
	VisitStringLiteral(string) error
	VisitFoo(*Foo) error
}

func (a *AnotherUnion) Accept(v AnotherUnionVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return v.VisitString(a.String)
	case "stringLiteral":
		return v.VisitStringLiteral(a.stringLiteral)
	case "foo":
		return v.VisitFoo(a.Foo)
	}
}
