// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

type NestedUnion struct {
	Type string
	Docs string
	Raw  string
	One  *ExampleType
}

func NewNestedUnionFromOne(value *ExampleType) *NestedUnion {
	return &NestedUnion{Type: "one", One: value}
}

func (n *NestedUnion) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
		Docs string `json:"docs"`
		Raw  string `json:"raw"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	n.Type = unmarshaler.Type
	n.Docs = unmarshaler.Docs
	n.Raw = unmarshaler.Raw
	switch unmarshaler.Type {
	case "one":
		value := new(ExampleType)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.One = value
	}
	return nil
}

func (n NestedUnion) MarshalJSON() ([]byte, error) {
	switch n.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", n.Type, n)
	case "one":
		var marshaler = struct {
			Type string `json:"type"`
			Docs string `json:"docs"`
			Raw  string `json:"raw"`
			*ExampleType
		}{
			Type:        n.Type,
			Docs:        n.Docs,
			Raw:         n.Raw,
			ExampleType: n.One,
		}
		return json.Marshal(marshaler)
	}
}

type NestedUnionVisitor interface {
	VisitOne(*ExampleType) error
}

func (n *NestedUnion) Accept(v NestedUnionVisitor) error {
	switch n.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", n.Type, n)
	case "one":
		return v.VisitOne(n.One)
	}
}
