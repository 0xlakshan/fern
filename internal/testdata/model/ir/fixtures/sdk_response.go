// This file was auto-generated by Fern from our API Definition.

package ir

import (
	json "encoding/json"
	fmt "fmt"
)

type SdkResponse struct {
	Type           string
	Json           *JsonResponse
	Streaming      *StreamingResponse
	MaybeStreaming *MaybeStreamingResponse
	FileDownload   *FileDownloadResponse
}

func NewSdkResponseFromJson(value *JsonResponse) *SdkResponse {
	return &SdkResponse{Type: "json", Json: value}
}

func NewSdkResponseFromStreaming(value *StreamingResponse) *SdkResponse {
	return &SdkResponse{Type: "streaming", Streaming: value}
}

func NewSdkResponseFromMaybeStreaming(value *MaybeStreamingResponse) *SdkResponse {
	return &SdkResponse{Type: "maybeStreaming", MaybeStreaming: value}
}

func NewSdkResponseFromFileDownload(value *FileDownloadResponse) *SdkResponse {
	return &SdkResponse{Type: "fileDownload", FileDownload: value}
}

func (s *SdkResponse) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type,omitempty"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	s.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "json":
		value := new(JsonResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.Json = value
	case "streaming":
		value := new(StreamingResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.Streaming = value
	case "maybeStreaming":
		value := new(MaybeStreamingResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.MaybeStreaming = value
	case "fileDownload":
		value := new(FileDownloadResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.FileDownload = value
	}
	return nil
}

func (s SdkResponse) MarshalJSON() ([]byte, error) {
	switch s.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", s.Type, s)
	case "json":
		var marshaler = struct {
			Type string `json:"type,omitempty"`
			*JsonResponse
		}{
			Type:         s.Type,
			JsonResponse: s.Json,
		}
		return json.Marshal(marshaler)
	case "streaming":
		var marshaler = struct {
			Type string `json:"type,omitempty"`
			*StreamingResponse
		}{
			Type:              s.Type,
			StreamingResponse: s.Streaming,
		}
		return json.Marshal(marshaler)
	case "maybeStreaming":
		var marshaler = struct {
			Type string `json:"type,omitempty"`
			*MaybeStreamingResponse
		}{
			Type:                   s.Type,
			MaybeStreamingResponse: s.MaybeStreaming,
		}
		return json.Marshal(marshaler)
	case "fileDownload":
		var marshaler = struct {
			Type string `json:"type,omitempty"`
			*FileDownloadResponse
		}{
			Type:                 s.Type,
			FileDownloadResponse: s.FileDownload,
		}
		return json.Marshal(marshaler)
	}
}

type SdkResponseVisitor interface {
	VisitJson(*JsonResponse) error
	VisitStreaming(*StreamingResponse) error
	VisitMaybeStreaming(*MaybeStreamingResponse) error
	VisitFileDownload(*FileDownloadResponse) error
}

func (s *SdkResponse) Accept(v SdkResponseVisitor) error {
	switch s.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", s.Type, s)
	case "json":
		return v.VisitJson(s.Json)
	case "streaming":
		return v.VisitStreaming(s.Streaming)
	case "maybeStreaming":
		return v.VisitMaybeStreaming(s.MaybeStreaming)
	case "fileDownload":
		return v.VisitFileDownload(s.FileDownload)
	}
}
