// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`convertToOpenApi any-auth 1`] = `
"openapi: 3.0.1
info:
  title: fern
  version: ''
paths:
  /create:
    post:
      operationId: PostsService.createPost
      tags:
        - PostsService
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPostId'
      security:
        - BearerAuth: []
        - BasicAuth: []
        - MyHeaderAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogBlogPost'
  /{postId}:
    get:
      operationId: PostsService.getPost
      tags:
        - PostsService
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/BlogPostId'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogBlogPost'
components:
  schemas:
    BlogPostId:
      type: string
    BlogBlogPost:
      type: object
      description: A blog post
      properties:
        id:
          $ref: '#/components/schemas/BlogPostId'
        title:
          type: string
        author:
          $ref: '#/components/schemas/BlogAuthor'
        content:
          type: string
      required:
        - id
        - title
        - author
        - content
    BlogAuthor:
      type: object
      properties:
        name:
          type: string
      required:
        - name
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    BasicAuth:
      type: http
      scheme: basic
    MyHeaderAuth:
      type: apiKey
      in: header
      name: My-Header
servers: []
"
`;

exports[`convertToOpenApi test-api 1`] = `
"openapi: 3.0.1
info:
  title: fern
  version: ''
paths:
  /create:
    post:
      description: Creates a blog post and returns blog post id.
      operationId: PostsService.createPost
      tags:
        - PostsService
      parameters:
        - name: x-endpoint-header
          in: header
          description: I'm a header!
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPostId'
      security:
        - {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCreatePostRequest'
  /{postId}:
    get:
      description: Gets a blog post.
      operationId: PostsService.getPost
      tags:
        - PostsService
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/BlogPostId'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogBlogPost'
        '400':
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    allOf:
                      - type: object
                        properties:
                          _error:
                            type: string
                            enum:
                              - PostNotFoundError
                      - $ref: '#/components/schemas/BlogPostNotFoundError'
components:
  schemas:
    BlogPostId:
      type: string
    BlogBlogPost:
      type: object
      description: A blog post
      properties:
        id:
          $ref: '#/components/schemas/BlogPostId'
        type:
          $ref: '#/components/schemas/BlogPostType'
        title:
          type: string
        author:
          $ref: '#/components/schemas/BlogAuthor'
        content:
          type: string
      required:
        - id
        - type
        - title
        - author
        - content
    BlogPostType:
      type: string
      enum:
        - LONG
        - SHORT
    BlogAuthor:
      oneOf:
        - type: object
          properties:
            type: {}
        - type: object
          properties:
            type:
              type: string
        - type: object
          allOf:
            - $ref: '#/components/schemas/BlogPostType'
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - type
    BlogCreatePostRequest:
      type: object
      properties:
        title:
          type: string
        author:
          $ref: '#/components/schemas/BlogAuthor'
          description: Author is the writer.
        content:
          type: string
        postType:
          $ref: '#/components/schemas/BlogPostType'
      required:
        - title
        - author
        - content
        - postType
    BlogPostNotFoundErrorBody:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/BlogPostId'
      required:
        - id
    BlogPostNotFoundError:
      $ref: '#/components/schemas/BlogPostNotFoundErrorBody'
  securitySchemes: {}
servers:
  - url: https://buildwithfern.com
  - url: https://dev.buildwithfern.com
"
`;
