types:
  PostId: string
  BlogPost:
    docs: A blog post
    properties:
      id: PostId
      type: PostType
      title: string
      author: Author
      content: string
  PostType:
    enum:
      - LONG
      - SHORT
  Author:
    union:
      anonymous: {}
      name: string
      type: PostType
  PostNotFoundErrorBody:
    properties:
      id: PostId
  CreatePostRequest:
    properties:
      title: string
      author:
        type: Author
        docs: Author is the writer.
      content: string
      postType: PostType
errors:
  PostNotFoundError:
    status-code: 400
    type: PostNotFoundErrorBody
services:
  http:
    PostsService:
      auth: false
      headers:
        x-service-header: string
      base-path: /
      endpoints:
        createPost:
          docs: Creates a blog post and returns blog post id.
          method: POST
          path: /create
          request:
            name: CreatePostRequestWrapper
            body: CreatePostRequest
            headers:
              x-endpoint-header:
                docs: I'm a header!
                type: string
          response: PostId
        getPost:
          docs: Gets a blog post.
          method: GET
          auth: false
          path: /{postId}
          path-parameters:
            postId: PostId
          request:
            name: GetPostRequest
          response: BlogPost
          errors:
            - PostNotFoundError
        updatePost:
          docs: Updates a blog post.
          method: POST
          auth: false
          path: /{postId}
          path-parameters:
            postId: PostId
          request:
            name: UpdatePostRequest
            body:
              type: CreatePostRequest
          response: PostId
          errors:
            - PostNotFoundError
