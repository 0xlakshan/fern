/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core";
import * as SeedStreaming from "../../..";
import * as serializers from "../../../../serialization";
import urlJoin from "url-join";

export declare namespace Dummy {
    interface Options {
        environment: core.Supplier<string>;
        fetcher?: core.FetchFunction;
        streamingFetcher?: core.StreamingFetchFunction;
    }

    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}

export class Dummy {
    constructor(protected readonly _options: Dummy.Options) {}

    public async generateStream(
        request: SeedStreaming.GenerateStreamRequestzs,
        requestOptions?: Dummy.RequestOptions
    ): Promise<core.Stream<SeedStreaming.StreamResponse>> {
        const _response = await (this._options.streamingFetcher ?? core.streamingFetcher)({
            url: urlJoin(await core.Supplier.get(this._options.environment), "generate-stream"),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "",
                "X-Fern-SDK-Version": "0.0.1",
            },
            body: await serializers.GenerateStreamRequestzs.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 2000,
        });
        return new core.Stream({
            stream: _response.data,
            terminator: "\n",
            parse: async (data) => {
                return await serializers.StreamResponse.parseOrThrow(data, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            },
        });
    }
}
