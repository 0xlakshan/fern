/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.literalHeaders;

import com.seed.literalHeaders.core.ClientOptions;
import com.seed.literalHeaders.core.Suppliers;
import com.seed.literalHeaders.noheaders._NoHeadersClient;
import com.seed.literalHeaders.onlyliteralheaders._OnlyLiteralHeadersClient;
import com.seed.literalHeaders.withnonliteralheaders._WithNonLiteralHeadersClient;
import java.util.function.Supplier;

public class LiteralHeaders {
    protected final ClientOptions clientOptions;

    protected final Supplier<_NoHeadersClient> noHeadersClient;

    protected final Supplier<_OnlyLiteralHeadersClient> onlyLiteralHeadersClient;

    protected final Supplier<_WithNonLiteralHeadersClient> withNonLiteralHeadersClient;

    public LiteralHeaders(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.noHeadersClient = Suppliers.memoize(() -> new _NoHeadersClient(clientOptions));
        this.onlyLiteralHeadersClient = Suppliers.memoize(() -> new _OnlyLiteralHeadersClient(clientOptions));
        this.withNonLiteralHeadersClient = Suppliers.memoize(() -> new _WithNonLiteralHeadersClient(clientOptions));
    }

    public _NoHeadersClient noHeaders() {
        return this.noHeadersClient.get();
    }

    public _OnlyLiteralHeadersClient onlyLiteralHeaders() {
        return this.onlyLiteralHeadersClient.get();
    }

    public _WithNonLiteralHeadersClient withNonLiteralHeaders() {
        return this.withNonLiteralHeadersClient.get();
    }

    public static LiteralHeadersBuilder builder() {
        return new LiteralHeadersBuilder();
    }
}
