// This file was auto-generated by Fern from our API Definition.

package onlyliteralheaders

import (
	context "context"
	fmt "fmt"
	core "github.com/literal-headers/fern/core"
	option "github.com/literal-headers/fern/option"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller:  core.NewCaller(options.HTTPClient),
		header:  options.ToHeader(),
	}
}

func (c *Client) Get(
	ctx context.Context,
	opts ...option.RequestOption,
) error {
	options := core.NewRequestOptions(opts...)

	baseURL := ""
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/" + "only-literal-headers"

	headers := c.header.Clone()
	headers.Add("literalEndpointHeader", fmt.Sprintf("%v", "endpoint header"))
	headers.Add("falseEndpointHeader", fmt.Sprintf("%v", false))
	for key, values := range options.HTTPHeader {
		for _, value := range values {
			headers.Add(key, value)
		}
	}

	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:     endpointURL,
			Method:  http.MethodPost,
			Headers: headers,
			Client:  options.HTTPClient,
		},
	); err != nil {
		return err
	}
	return nil
}
