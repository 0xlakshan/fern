// This file was auto-generated by Fern from our API Definition.

package payment

import (
	context "context"
	fmt "fmt"
	uuid "github.com/google/uuid"
	fern "github.com/idempotency-headers/fern"
	core "github.com/idempotency-headers/fern/core"
	option "github.com/idempotency-headers/fern/option"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller:  core.NewCaller(options.HTTPClient),
		header:  options.ToHeader(),
	}
}

func (c *Client) Create(ctx context.Context, request *fern.CreatePaymentRequest) (uuid.UUID, error) {
	baseURL := ""
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "payment"

	headers := c.header.Clone()
	headers.Add("Idempotency-Key", fmt.Sprintf("%v", request.IdempotencyKey))
	headers.Add("Idempotency-Expiration", fmt.Sprintf("%v", request.IdempotencyExpiration))

	var response uuid.UUID
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:      endpointURL,
			Method:   http.MethodPost,
			Headers:  headers,
			Request:  request,
			Response: &response,
		},
	); err != nil {
		return uuid.Nil, err
	}
	return response, nil
}

func (c *Client) Delete(ctx context.Context, paymentId string) error {
	baseURL := ""
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"payment/%v", paymentId)

	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:     endpointURL,
			Method:  http.MethodDelete,
			Headers: c.header,
		},
	); err != nil {
		return err
	}
	return nil
}
