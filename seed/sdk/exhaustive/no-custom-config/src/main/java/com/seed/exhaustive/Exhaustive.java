/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.exhaustive;

import com.seed.exhaustive.core.ClientOptions;
import com.seed.exhaustive.core.Suppliers;
import com.seed.exhaustive.endpoints._EndpointsClient;
import com.seed.exhaustive.inlinedrequests._InlinedRequestsClient;
import com.seed.exhaustive.noauth._NoAuthClient;
import com.seed.exhaustive.noreqbody._NoReqBodyClient;
import com.seed.exhaustive.reqwithheaders._ReqWithHeadersClient;
import java.util.function.Supplier;

public class Exhaustive {
    protected final ClientOptions clientOptions;

    protected final Supplier<_EndpointsClient> endpointsClient;

    protected final Supplier<_InlinedRequestsClient> inlinedRequestsClient;

    protected final Supplier<_NoAuthClient> noAuthClient;

    protected final Supplier<_NoReqBodyClient> noReqBodyClient;

    protected final Supplier<_ReqWithHeadersClient> reqWithHeadersClient;

    public Exhaustive(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.endpointsClient = Suppliers.memoize(() -> new _EndpointsClient(clientOptions));
        this.inlinedRequestsClient = Suppliers.memoize(() -> new _InlinedRequestsClient(clientOptions));
        this.noAuthClient = Suppliers.memoize(() -> new _NoAuthClient(clientOptions));
        this.noReqBodyClient = Suppliers.memoize(() -> new _NoReqBodyClient(clientOptions));
        this.reqWithHeadersClient = Suppliers.memoize(() -> new _ReqWithHeadersClient(clientOptions));
    }

    public _EndpointsClient endpoints() {
        return this.endpointsClient.get();
    }

    public _InlinedRequestsClient inlinedRequests() {
        return this.inlinedRequestsClient.get();
    }

    public _NoAuthClient noAuth() {
        return this.noAuthClient.get();
    }

    public _NoReqBodyClient noReqBody() {
        return this.noReqBodyClient.get();
    }

    public _ReqWithHeadersClient reqWithHeaders() {
        return this.reqWithHeadersClient.get();
    }

    public static ExhaustiveBuilder builder() {
        return new ExhaustiveBuilder();
    }
}
