/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.types.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = Movie.Builder.class
)
public final class Movie implements IMovie {
  private final MovieId id;

  private final String title;

  private final String from;

  private final double rating;

  private Movie(MovieId id, String title, String from, double rating) {
    this.id = id;
    this.title = title;
    this.from = from;
    this.rating = rating;
  }

  @JsonProperty("id")
  @Override
  public MovieId getId() {
    return id;
  }

  @JsonProperty("title")
  @Override
  public String getTitle() {
    return title;
  }

  @JsonProperty("from")
  @Override
  public String getFrom() {
    return from;
  }

  /**
   * @return The rating scale is one to five stars
   */
  @JsonProperty("rating")
  @Override
  public double getRating() {
    return rating;
  }

  @JsonProperty("type")
  @Override
  public String getType() {
    return "movie";
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Movie && equalTo((Movie) other);
  }

  private boolean equalTo(Movie other) {
    return id.equals(other.id) && title.equals(other.title) && from.equals(other.from) && rating == other.rating;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.id, this.title, this.from, this.rating);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static IdStage builder() {
    return new Builder();
  }

  public interface IdStage {
    TitleStage id(MovieId id);

    Builder from(Movie other);
  }

  public interface TitleStage {
    FromStage title(String title);
  }

  public interface FromStage {
    RatingStage from(String from);
  }

  public interface RatingStage {
    _FinalStage rating(double rating);
  }

  public interface _FinalStage {
    Movie build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements IdStage, TitleStage, FromStage, RatingStage, _FinalStage {
    private MovieId id;

    private String title;

    private String from;

    private double rating;

    private Builder() {
    }

    @Override
    public Builder from(Movie other) {
      id(other.getId());
      title(other.getTitle());
      from(other.getFrom());
      rating(other.getRating());
      return this;
    }

    @Override
    @JsonSetter("id")
    public TitleStage id(MovieId id) {
      this.id = id;
      return this;
    }

    @Override
    @JsonSetter("title")
    public FromStage title(String title) {
      this.title = title;
      return this;
    }

    @Override
    @JsonSetter("from")
    public RatingStage from(String from) {
      this.from = from;
      return this;
    }

    /**
     * <p>The rating scale is one to five stars</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("rating")
    public _FinalStage rating(double rating) {
      this.rating = rating;
      return this;
    }

    @Override
    public Movie build() {
      return new Movie(id, title, from, rating);
    }
  }
}
