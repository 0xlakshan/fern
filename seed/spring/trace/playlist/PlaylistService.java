/**
 * This file was auto-generated by Fern from our API Definition.
 */

package playlist;

import core.BearerAuth;
import java.lang.Integer;
import java.lang.String;
import java.security.Principal;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

@RequestMapping(
    path = "/v2/playlist/{serviceParam}"
)
public interface PlaylistService {
  @PostMapping(
      value = "/create",
      produces = "application/json",
      consumes = "application/json"
  )
  Playlist createPlaylist(@RequestHeader("Authorization") BearerAuth auth, Principal principal,
      @RequestHeader("X-Random-Header") Optional<String> xRandomHeader,
      @RequestParam("datetime") OffsetDateTime datetime,
      @RequestParam("optionalDatetime") Optional<OffsetDateTime> optionalDatetime,
      @RequestBody PlaylistCreateRequest body);

  @GetMapping(
      value = "/all",
      produces = "application/json"
  )
  List<Playlist> getPlaylists(@RequestHeader("Authorization") BearerAuth auth, Principal principal,
      @RequestHeader("X-Random-Header") Optional<String> xRandomHeader,
      @RequestParam("limit") Optional<Integer> limit, @RequestParam("otherField") String otherField,
      @RequestParam("multiLineDocs") String multiLineDocs,
      @RequestParam("optionalMultipleField") Optional<String> optionalMultipleField,
      @RequestParam("multipleField") String multipleField);

  @GetMapping(
      value = "/{playlistId}",
      produces = "application/json"
  )
  Playlist getPlaylist(@RequestHeader("X-Random-Header") Optional<String> xRandomHeader,
      @PathVariable("playlistId") PlaylistId playlistId) throws PlaylistIdNotFoundError,
      UnauthorizedError;

  @PutMapping(
      value = "/{playlistId}",
      produces = "application/json",
      consumes = "application/json"
  )
  Optional<Playlist> updatePlaylist(@RequestHeader("Authorization") BearerAuth auth,
      Principal principal, @RequestHeader("X-Random-Header") Optional<String> xRandomHeader,
      @PathVariable("playlistId") PlaylistId playlistId,
      @RequestBody Optional<UpdatePlaylistRequest> body) throws PlaylistIdNotFoundError;

  @DeleteMapping("/{playlist_id}")
  void deletePlaylist(@RequestHeader("Authorization") BearerAuth auth, Principal principal,
      @RequestHeader("X-Random-Header") Optional<String> xRandomHeader,
      @PathVariable("playlist_id") PlaylistId playlistId);
}
