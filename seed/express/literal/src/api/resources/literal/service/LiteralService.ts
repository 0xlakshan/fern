/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as SeedLiteral from "../../..";
import express from "express";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export interface LiteralServiceMethods {
    createOptions(
        req: express.Request<never, SeedLiteral.CreateOptionsResponse, SeedLiteral.CreateOptionsRequest, never>,
        res: {
            send: (responseBody: SeedLiteral.CreateOptionsResponse) => Promise<void>;
            cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
            locals: any;
        }
    ): void | Promise<void>;
    getOptions(
        req: express.Request<never, SeedLiteral.Options, SeedLiteral.GetOptionsRequest, never>,
        res: {
            send: (responseBody: SeedLiteral.Options) => Promise<void>;
            cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
            locals: any;
        }
    ): void | Promise<void>;
    getUndiscriminatedOptions(
        req: express.Request<
            never,
            SeedLiteral.UndiscriminatedOptions,
            SeedLiteral.GetUndiscriminatedOptionsRequest,
            never
        >,
        res: {
            send: (responseBody: SeedLiteral.UndiscriminatedOptions) => Promise<void>;
            cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
            locals: any;
        }
    ): void | Promise<void>;
}

export class LiteralService {
    private router;

    constructor(private readonly methods: LiteralServiceMethods, middleware: express.RequestHandler[] = []) {
        this.router = express.Router({ mergeParams: true }).use(
            express.json({
                strict: false,
            }),
            ...middleware
        );
    }

    public addMiddleware(handler: express.RequestHandler): this {
        this.router.use(handler);
        return this;
    }

    public toRouter(): express.Router {
        this.router.post("/options", async (req, res, next) => {
            const request = await serializers.CreateOptionsRequest.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    await this.methods.createOptions(req as any, {
                        send: async (responseBody) => {
                            res.json(
                                await serializers.CreateOptionsResponse.jsonOrThrow(responseBody, {
                                    unrecognizedObjectKeys: "strip",
                                })
                            );
                        },
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                } catch (error) {
                    console.error(error);
                    if (error instanceof errors.SeedLiteralError) {
                        console.warn(
                            `Endpoint 'createOptions' unexpectedly threw ${error.constructor.name}.` +
                                ` If this was intentional, please add ${error.constructor.name} to` +
                                " the endpoint's errors list in your Fern Definition."
                        );
                        await error.send(res);
                    } else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            } else {
                res.status(422).json({
                    errors: request.errors.map(
                        (error) => ["request", ...error.path].join(" -> ") + ": " + error.message
                    ),
                });
                next(request.errors);
            }
        });
        this.router.post("/options", async (req, res, next) => {
            const request = await serializers.GetOptionsRequest.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    await this.methods.getOptions(req as any, {
                        send: async (responseBody) => {
                            res.json(
                                await serializers.Options.jsonOrThrow(responseBody, { unrecognizedObjectKeys: "strip" })
                            );
                        },
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                } catch (error) {
                    console.error(error);
                    if (error instanceof errors.SeedLiteralError) {
                        console.warn(
                            `Endpoint 'getOptions' unexpectedly threw ${error.constructor.name}.` +
                                ` If this was intentional, please add ${error.constructor.name} to` +
                                " the endpoint's errors list in your Fern Definition."
                        );
                        await error.send(res);
                    } else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            } else {
                res.status(422).json({
                    errors: request.errors.map(
                        (error) => ["request", ...error.path].join(" -> ") + ": " + error.message
                    ),
                });
                next(request.errors);
            }
        });
        this.router.post("/options", async (req, res, next) => {
            const request = await serializers.GetUndiscriminatedOptionsRequest.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    await this.methods.getUndiscriminatedOptions(req as any, {
                        send: async (responseBody) => {
                            res.json(
                                await serializers.UndiscriminatedOptions.jsonOrThrow(responseBody, {
                                    unrecognizedObjectKeys: "strip",
                                })
                            );
                        },
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    });
                    next();
                } catch (error) {
                    console.error(error);
                    if (error instanceof errors.SeedLiteralError) {
                        console.warn(
                            `Endpoint 'getUndiscriminatedOptions' unexpectedly threw ${error.constructor.name}.` +
                                ` If this was intentional, please add ${error.constructor.name} to` +
                                " the endpoint's errors list in your Fern Definition."
                        );
                        await error.send(res);
                    } else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            } else {
                res.status(422).json({
                    errors: request.errors.map(
                        (error) => ["request", ...error.path].join(" -> ") + ": " + error.message
                    ),
                });
                next(request.errors);
            }
        });
        return this.router;
    }
}
