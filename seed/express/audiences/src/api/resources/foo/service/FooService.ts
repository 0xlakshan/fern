/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as SeedAudiences from "../../..";
import express from "express";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export interface FooServiceMethods {
    find(
        req: express.Request<
            never,
            SeedAudiences.ImportingType,
            never,
            {
                optionalString?: SeedAudiences.OptionalString;
            }
        >,
        res: {
            send: (responseBody: SeedAudiences.ImportingType) => Promise<void>;
            cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
            locals: any;
        }
    ): void | Promise<void>;
}

export class FooService {
    private router;

    constructor(private readonly methods: FooServiceMethods, middleware: express.RequestHandler[] = []) {
        this.router = express.Router({ mergeParams: true }).use(
            express.json({
                strict: false,
            }),
            ...middleware
        );
    }

    public addMiddleware(handler: express.RequestHandler): this {
        this.router.use(handler);
        return this;
    }

    public toRouter(): express.Router {
        this.router.post("", async (req, res, next) => {
            try {
                await this.methods.find(req as any, {
                    send: async (responseBody) => {
                        res.json(
                            await serializers.ImportingType.jsonOrThrow(responseBody, {
                                unrecognizedObjectKeys: "strip",
                            })
                        );
                    },
                    cookie: res.cookie.bind(res),
                    locals: res.locals,
                });
                next();
            } catch (error) {
                console.error(error);
                if (error instanceof errors.SeedAudiencesError) {
                    console.warn(
                        `Endpoint 'find' unexpectedly threw ${error.constructor.name}.` +
                            ` If this was intentional, please add ${error.constructor.name} to` +
                            " the endpoint's errors list in your Fern Definition."
                    );
                    await error.send(res);
                } else {
                    res.status(500).json("Internal Server Error");
                }
                next(error);
            }
        });
        return this.router;
    }
}
