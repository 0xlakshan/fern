version: 2.1
orbs:
  node: circleci/node@5.0.3
jobs:
  lint:
    docker:
      - image: cimg/node:current
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: yarn-berry
      - run:
          name: lint:monorepo
          command: yarn lint:monorepo
      - run:
          name: Organize imports
          # not using --list-different because sometimes this removes a trailing
          # comma that prettier adds back. Instead, we write the changes to disk.
          # if the repo is dirty after the prettier step is run, this job will fail
          # on the last step.
          command: yarn organize-imports:all
      - run:
          name: Check dependencies
          command: yarn depcheck
      - run:
          # compilation is needed for some typescript-eslint rules,
          # so we do it before the eslint check
          name: compile
          command: yarn compile
      - run:
          name: lint:eslint
          command: yarn lint:eslint
      - run:
          name: Format
          command: yarn format:all
      - run:
          name: Ensure no changes to git-tracked files
          command: git --no-pager diff --exit-code

  test:
    # this is machine because of the docker-utils tests
    machine:
      image: ubuntu-2004:current
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: yarn-berry
      - run:
          name: Run tests
          command: yarn test --ci
      - run:
          name: Ensure no changes to git-tracked files
          command: git --no-pager diff --exit-code

  publish-dev:
    docker:
      - image: cimg/node:current
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: yarn-berry
      - run:
          name: Print version
          command: |
            git_version="$(./scripts/git-version.sh)"
            echo Publishing version: "${git_version}"
      - run:
          name: Add version to package.json's
          command: |
            git_version="$(./scripts/git-version.sh)"
            yarn mrlint version "$git_version"
      - run:
          name: Update yarn.lock with new versions
          command: yarn
      - run:
          name: Compile
          command: yarn compile
      - run:
          name: Publish all packages
          command: yarn run publish --tag next

  build-dockers:
    machine:
      image: ubuntu-2004:current
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: yarn-berry
      - run:
          name: Build fern-typescript Docker
          command: |
            projectVersion=$(./scripts/git-version.sh)
            yarn workspace fern-typescript dockerTagVersion "$projectVersion"
      - run:
          name: Build fern-typescript-sdk Docker
          command: |
            projectVersion=$(./scripts/git-version.sh)
            yarn workspace @fern-typescript/sdk-generator-cli dockerTagVersion "$projectVersion"

  publish-dockers:
    machine:
      image: ubuntu-2004:current
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: yarn-berry
      - run:
          name: Publish fern-typescript Docker
          command: |
            projectVersion=$(./scripts/git-version.sh)
            yarn workspace fern-typescript dockerTagVersion "$projectVersion"
            echo "$FERNAPI_DOCKER_HUB_PASSWORD" | docker login --username fernapi --password-stdin
            docker push fernapi/fern-typescript:"$projectVersion"
      - run:
          name: Publish fern-typescript-sdk Docker
          command: |
            projectVersion=$(./scripts/git-version.sh)
            yarn workspace @fern-typescript/sdk-generator-cli dockerTagVersion "$projectVersion"
            echo "$FERNAPI_DOCKER_HUB_PASSWORD" | docker login --username fernapi --password-stdin
            docker push fernapi/fern-typescript-sdk:"$projectVersion"

  publish:
    docker:
      - image: cimg/node:current
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: yarn-berry
      - run:
          name: Print version
          command: |
            git_version="$(./scripts/git-version.sh)"
            echo Publishing version: "${git_version}"
      - run:
          name: Add version to package.json's
          command: |
            git_version="$(./scripts/git-version.sh)"
            yarn mrlint version "$git_version"
      - run:
          name: Update yarn.lock with new versions
          command: yarn
      - run:
          name: Compile
          command: yarn compile
      - run:
          name: Publish all packages
          command: yarn run publish

workflows:
  version: 2
  build:
    jobs:
      - lint:
          filters:
            tags:
              only: /.*/

      - test:
          filters:
            tags:
              only: /.*/

      - build-dockers:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: main

      - publish-dev:
          filters:
            branches:
              only: main
          requires:
            - lint
            - test
          context:
            - npm
            - auth0-dev

      - publish-dockers:
          filters:
            branches:
              only: main
            tags:
              only: /.*/
          requires:
            - lint
            - test
          context:
            - docker-hub
            - auth0-dev

      - publish:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
          requires:
            - lint
            - test
            # sequence after publish-dev to avoid 422's from npm
            - publish-dev
          context:
            - npm
            - auth0-dev
